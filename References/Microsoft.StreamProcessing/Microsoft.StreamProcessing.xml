<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.StreamProcessing</name>
    </assembly>
    <members>
        <member name="T:AssemblyRef">
            <summary>
            Sets public key string for friend assemblies.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.NullOutputWrapper`1">
            <summary>
            Currently for internal use only
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Aggregates.NullOutputWrapper`1.Count">
            <summary>
            Currently for internal use only
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Aggregates.NullOutputWrapper`1.State">
            <summary>
            Currently for internal use only
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.AggregateFunctions">
            <summary>
            Currently for internal use only
            </summary>
            <summary>
            Methods to combine individual aggregates into a single, state-efficient one
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Wrap``4(Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Transforms the input to the aggregate with the specified transform expression.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Wrap``4(Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Transforms the input to the aggregate with the specified transform expression. Also makes the input
            to the aggregate nullable with the behavior of dropping null values.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.ApplyFilter``3(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies a filter to the input of an aggregate. Any values for which the filter predicate returns false
            will be dropped.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.MakeInputNullableAndSkipNulls``3(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2})">
            <summary>
            Makes the input to the aggregate nullable with the behavior of dropping null values.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.SkipNulls``3(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2})">
            <summary>
            Drops null values on the input if the input type is either reference-type of value-type nullable.
            The function does not change the aggregate if the input type is a non-nullable value-type.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.MakeOutputNullableAndOutputNullWhenEmpty``3(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2})">
            <summary>
            Makes the output of the aggregate nullable with the behavior being to automatically return "null"
            instead of calling the aggregate's "ComputeResult" expression when the snapshot is empty. An
            empty snapshot is possible when some of the input values are dropped (either through dropping nulls
            or with a filter).
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.OutputDefaultWhenEmpty``3(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2})">
            <summary>
            Modifies the aggregate to return "null" instead of calling the aggregate's "ComputeResult" expression
            when the snapshot is empty. An empty snapshot is possible when some of the input values are dropped
            (either through dropping nulls or with a filter).
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``4(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},System.Linq.Expressions.Expression{System.Func{``2,``3}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``6(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},System.Linq.Expressions.Expression{System.Func{``2,``4,``5}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``8(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``7}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``10(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``9}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``12(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``11}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``14(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``13}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``16(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``13,``14},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``14,``15}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>,
            <typeparam name="TState7">Aggregation state type for aggregate number 7</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>,
            <typeparam name="TResult7">Result type for aggregate number 7</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>,
            <param name="aggregate7">Aggregation specification number 7</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``18(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``15,``16},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``14,``16,``17}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>,
            <typeparam name="TState7">Aggregation state type for aggregate number 7</typeparam>,
            <typeparam name="TState8">Aggregation state type for aggregate number 8</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>,
            <typeparam name="TResult7">Result type for aggregate number 7</typeparam>,
            <typeparam name="TResult8">Result type for aggregate number 8</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>,
            <param name="aggregate7">Aggregation specification number 7</param>,
            <param name="aggregate8">Aggregation specification number 8</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``20(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``17,``18},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``14,``16,``18,``19}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>,
            <typeparam name="TState7">Aggregation state type for aggregate number 7</typeparam>,
            <typeparam name="TState8">Aggregation state type for aggregate number 8</typeparam>,
            <typeparam name="TState9">Aggregation state type for aggregate number 9</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>,
            <typeparam name="TResult7">Result type for aggregate number 7</typeparam>,
            <typeparam name="TResult8">Result type for aggregate number 8</typeparam>,
            <typeparam name="TResult9">Result type for aggregate number 9</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>,
            <param name="aggregate7">Aggregation specification number 7</param>,
            <param name="aggregate8">Aggregation specification number 8</param>,
            <param name="aggregate9">Aggregation specification number 9</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``22(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``19,``20},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``14,``16,``18,``20,``21}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>,
            <typeparam name="TState7">Aggregation state type for aggregate number 7</typeparam>,
            <typeparam name="TState8">Aggregation state type for aggregate number 8</typeparam>,
            <typeparam name="TState9">Aggregation state type for aggregate number 9</typeparam>,
            <typeparam name="TState10">Aggregation state type for aggregate number 10</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>,
            <typeparam name="TResult7">Result type for aggregate number 7</typeparam>,
            <typeparam name="TResult8">Result type for aggregate number 8</typeparam>,
            <typeparam name="TResult9">Result type for aggregate number 9</typeparam>,
            <typeparam name="TResult10">Result type for aggregate number 10</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>,
            <param name="aggregate7">Aggregation specification number 7</param>,
            <param name="aggregate8">Aggregation specification number 8</param>,
            <param name="aggregate9">Aggregation specification number 9</param>,
            <param name="aggregate10">Aggregation specification number 10</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``24(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``21,``22},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``23}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>,
            <typeparam name="TState7">Aggregation state type for aggregate number 7</typeparam>,
            <typeparam name="TState8">Aggregation state type for aggregate number 8</typeparam>,
            <typeparam name="TState9">Aggregation state type for aggregate number 9</typeparam>,
            <typeparam name="TState10">Aggregation state type for aggregate number 10</typeparam>,
            <typeparam name="TState11">Aggregation state type for aggregate number 11</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>,
            <typeparam name="TResult7">Result type for aggregate number 7</typeparam>,
            <typeparam name="TResult8">Result type for aggregate number 8</typeparam>,
            <typeparam name="TResult9">Result type for aggregate number 9</typeparam>,
            <typeparam name="TResult10">Result type for aggregate number 10</typeparam>,
            <typeparam name="TResult11">Result type for aggregate number 11</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>,
            <param name="aggregate7">Aggregation specification number 7</param>,
            <param name="aggregate8">Aggregation specification number 8</param>,
            <param name="aggregate9">Aggregation specification number 9</param>,
            <param name="aggregate10">Aggregation specification number 10</param>,
            <param name="aggregate11">Aggregation specification number 11</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``26(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``21,``22},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``23,``24},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``25}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>,
            <typeparam name="TState7">Aggregation state type for aggregate number 7</typeparam>,
            <typeparam name="TState8">Aggregation state type for aggregate number 8</typeparam>,
            <typeparam name="TState9">Aggregation state type for aggregate number 9</typeparam>,
            <typeparam name="TState10">Aggregation state type for aggregate number 10</typeparam>,
            <typeparam name="TState11">Aggregation state type for aggregate number 11</typeparam>,
            <typeparam name="TState12">Aggregation state type for aggregate number 12</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>,
            <typeparam name="TResult7">Result type for aggregate number 7</typeparam>,
            <typeparam name="TResult8">Result type for aggregate number 8</typeparam>,
            <typeparam name="TResult9">Result type for aggregate number 9</typeparam>,
            <typeparam name="TResult10">Result type for aggregate number 10</typeparam>,
            <typeparam name="TResult11">Result type for aggregate number 11</typeparam>,
            <typeparam name="TResult12">Result type for aggregate number 12</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>,
            <param name="aggregate7">Aggregation specification number 7</param>,
            <param name="aggregate8">Aggregation specification number 8</param>,
            <param name="aggregate9">Aggregation specification number 9</param>,
            <param name="aggregate10">Aggregation specification number 10</param>,
            <param name="aggregate11">Aggregation specification number 11</param>,
            <param name="aggregate12">Aggregation specification number 12</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``28(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``21,``22},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``23,``24},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``25,``26},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``27}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>,
            <typeparam name="TState7">Aggregation state type for aggregate number 7</typeparam>,
            <typeparam name="TState8">Aggregation state type for aggregate number 8</typeparam>,
            <typeparam name="TState9">Aggregation state type for aggregate number 9</typeparam>,
            <typeparam name="TState10">Aggregation state type for aggregate number 10</typeparam>,
            <typeparam name="TState11">Aggregation state type for aggregate number 11</typeparam>,
            <typeparam name="TState12">Aggregation state type for aggregate number 12</typeparam>,
            <typeparam name="TState13">Aggregation state type for aggregate number 13</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>,
            <typeparam name="TResult7">Result type for aggregate number 7</typeparam>,
            <typeparam name="TResult8">Result type for aggregate number 8</typeparam>,
            <typeparam name="TResult9">Result type for aggregate number 9</typeparam>,
            <typeparam name="TResult10">Result type for aggregate number 10</typeparam>,
            <typeparam name="TResult11">Result type for aggregate number 11</typeparam>,
            <typeparam name="TResult12">Result type for aggregate number 12</typeparam>,
            <typeparam name="TResult13">Result type for aggregate number 13</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>,
            <param name="aggregate7">Aggregation specification number 7</param>,
            <param name="aggregate8">Aggregation specification number 8</param>,
            <param name="aggregate9">Aggregation specification number 9</param>,
            <param name="aggregate10">Aggregation specification number 10</param>,
            <param name="aggregate11">Aggregation specification number 11</param>,
            <param name="aggregate12">Aggregation specification number 12</param>,
            <param name="aggregate13">Aggregation specification number 13</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``30(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``21,``22},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``23,``24},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``25,``26},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``27,``28},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``28,``29}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>,
            <typeparam name="TState7">Aggregation state type for aggregate number 7</typeparam>,
            <typeparam name="TState8">Aggregation state type for aggregate number 8</typeparam>,
            <typeparam name="TState9">Aggregation state type for aggregate number 9</typeparam>,
            <typeparam name="TState10">Aggregation state type for aggregate number 10</typeparam>,
            <typeparam name="TState11">Aggregation state type for aggregate number 11</typeparam>,
            <typeparam name="TState12">Aggregation state type for aggregate number 12</typeparam>,
            <typeparam name="TState13">Aggregation state type for aggregate number 13</typeparam>,
            <typeparam name="TState14">Aggregation state type for aggregate number 14</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>,
            <typeparam name="TResult7">Result type for aggregate number 7</typeparam>,
            <typeparam name="TResult8">Result type for aggregate number 8</typeparam>,
            <typeparam name="TResult9">Result type for aggregate number 9</typeparam>,
            <typeparam name="TResult10">Result type for aggregate number 10</typeparam>,
            <typeparam name="TResult11">Result type for aggregate number 11</typeparam>,
            <typeparam name="TResult12">Result type for aggregate number 12</typeparam>,
            <typeparam name="TResult13">Result type for aggregate number 13</typeparam>,
            <typeparam name="TResult14">Result type for aggregate number 14</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>,
            <param name="aggregate7">Aggregation specification number 7</param>,
            <param name="aggregate8">Aggregation specification number 8</param>,
            <param name="aggregate9">Aggregation specification number 9</param>,
            <param name="aggregate10">Aggregation specification number 10</param>,
            <param name="aggregate11">Aggregation specification number 11</param>,
            <param name="aggregate12">Aggregation specification number 12</param>,
            <param name="aggregate13">Aggregation specification number 13</param>,
            <param name="aggregate14">Aggregation specification number 14</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.AggregateFunctions.Combine``32(Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``1,``2},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``21,``22},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``23,``24},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``25,``26},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``27,``28},Microsoft.StreamProcessing.Aggregates.IAggregate{``0,``29,``30},System.Linq.Expressions.Expression{System.Func{``2,``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``28,``30,``31}})">
            <summary>
            Performs multiple aggregations simultaneously
            </summary>
            <typeparam name="TInput">The input stream to aggregate</typeparam>
            <typeparam name="TState1">Aggregation state type for aggregate number 1</typeparam>,
            <typeparam name="TState2">Aggregation state type for aggregate number 2</typeparam>,
            <typeparam name="TState3">Aggregation state type for aggregate number 3</typeparam>,
            <typeparam name="TState4">Aggregation state type for aggregate number 4</typeparam>,
            <typeparam name="TState5">Aggregation state type for aggregate number 5</typeparam>,
            <typeparam name="TState6">Aggregation state type for aggregate number 6</typeparam>,
            <typeparam name="TState7">Aggregation state type for aggregate number 7</typeparam>,
            <typeparam name="TState8">Aggregation state type for aggregate number 8</typeparam>,
            <typeparam name="TState9">Aggregation state type for aggregate number 9</typeparam>,
            <typeparam name="TState10">Aggregation state type for aggregate number 10</typeparam>,
            <typeparam name="TState11">Aggregation state type for aggregate number 11</typeparam>,
            <typeparam name="TState12">Aggregation state type for aggregate number 12</typeparam>,
            <typeparam name="TState13">Aggregation state type for aggregate number 13</typeparam>,
            <typeparam name="TState14">Aggregation state type for aggregate number 14</typeparam>,
            <typeparam name="TState15">Aggregation state type for aggregate number 15</typeparam>
            <typeparam name="TResult1">Result type for aggregate number 1</typeparam>,
            <typeparam name="TResult2">Result type for aggregate number 2</typeparam>,
            <typeparam name="TResult3">Result type for aggregate number 3</typeparam>,
            <typeparam name="TResult4">Result type for aggregate number 4</typeparam>,
            <typeparam name="TResult5">Result type for aggregate number 5</typeparam>,
            <typeparam name="TResult6">Result type for aggregate number 6</typeparam>,
            <typeparam name="TResult7">Result type for aggregate number 7</typeparam>,
            <typeparam name="TResult8">Result type for aggregate number 8</typeparam>,
            <typeparam name="TResult9">Result type for aggregate number 9</typeparam>,
            <typeparam name="TResult10">Result type for aggregate number 10</typeparam>,
            <typeparam name="TResult11">Result type for aggregate number 11</typeparam>,
            <typeparam name="TResult12">Result type for aggregate number 12</typeparam>,
            <typeparam name="TResult13">Result type for aggregate number 13</typeparam>,
            <typeparam name="TResult14">Result type for aggregate number 14</typeparam>,
            <typeparam name="TResult15">Result type for aggregate number 15</typeparam>
            <typeparam name="TResult">Result type of the merged aggregation</typeparam>
            <param name="aggregate1">Aggregation specification number 1</param>,
            <param name="aggregate2">Aggregation specification number 2</param>,
            <param name="aggregate3">Aggregation specification number 3</param>,
            <param name="aggregate4">Aggregation specification number 4</param>,
            <param name="aggregate5">Aggregation specification number 5</param>,
            <param name="aggregate6">Aggregation specification number 6</param>,
            <param name="aggregate7">Aggregation specification number 7</param>,
            <param name="aggregate8">Aggregation specification number 8</param>,
            <param name="aggregate9">Aggregation specification number 9</param>,
            <param name="aggregate10">Aggregation specification number 10</param>,
            <param name="aggregate11">Aggregation specification number 11</param>,
            <param name="aggregate12">Aggregation specification number 12</param>,
            <param name="aggregate13">Aggregation specification number 13</param>,
            <param name="aggregate14">Aggregation specification number 14</param>,
            <param name="aggregate15">Aggregation specification number 15</param>
            <param name="merger">Function to take the result of all aggregations and merge them into a single result</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.AverageState`1">
            <summary>
            The state object used in average aggregates.
            </summary>
            <typeparam name="T">The type of the underlying elements being aggregated.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Aggregates.AverageState`1.Sum">
            <summary>
            The sum of all data seen so far.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Aggregates.AverageState`1.Count">
            <summary>
            The count of all events so far.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.IAggregate`3">
            <summary>
            Interface used by all aggregates.
            </summary>
            <typeparam name="TInput">The type of the input being aggregated.</typeparam>
            <typeparam name="TState">The type of the state object used for intermediate computation.</typeparam>
            <typeparam name="TResult">The type of the computed result of the aggregation.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IAggregate`3.InitialState">
            <summary>
            Provides an expression that creates the initial state for the aggregate computation.
            </summary>
            <returns>An expression that creates the initial state for the aggregate computation.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IAggregate`3.Accumulate">
            <summary>
            Provides an expression that describes how to take the aggregate state and a new data object and compute a new aggregate state.
            </summary>
            <returns>An expression that describes how to take the aggregate state and a new data object and compute a new aggregate state.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IAggregate`3.Deaccumulate">
            <summary>
            Provides an expression that describes how to take the aggregate state and a retracted data object and compute a new aggregate state.
            </summary>
            <returns>An expression that describes how to take the aggregate state and a retracted data object and compute a new aggregate state.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IAggregate`3.Difference">
            <summary>
            Provides an expression that describes how to take two different aggregate states and subtract one from the other.
            </summary>
            <returns>An expression that describes how to take two different aggregate states and subtract one from the other.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IAggregate`3.ComputeResult">
            <summary>
            Provides an expression that describes how to compute a final result from an aggregate state.
            </summary>
            <returns>An expression that describes how to compute a final result from an aggregate state.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.ISummableAggregate`3">
            <summary>
            Interface used by aggregates that support the ability to "sum" two states.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.ISummableAggregate`3.Sum">
            <summary>
            Provides an expression that describes how to take two different aggregate states and combine them.
            </summary>
            <returns>An expression that describes how to take two different aggregate states and combine them.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.IBinaryAggregate`4">
            <summary>
            Interface used by all aggregates over two inputs.
            </summary>
            <typeparam name="TLeft">The type of the left input being aggregated.</typeparam>
            <typeparam name="TRight">The type of the right input being aggregated.</typeparam>
            <typeparam name="TState">The type of the state object used for intermediate computation.</typeparam>
            <typeparam name="TResult">The type of the computed result of the aggregation.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IBinaryAggregate`4.InitialState">
            <summary>
            Provides an expression that creates the initial state for the aggregate computation.
            </summary>
            <returns>An expression that creates the initial state for the aggregate computation.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IBinaryAggregate`4.AccumulateLeft">
            <summary>
            Provides an expression that describes how to take the aggregate state and a new data object from the left input and compute a new aggregate state.
            </summary>
            <returns>An expression that describes how to take the aggregate state and a new data object from the left input and compute a new aggregate state.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IBinaryAggregate`4.AccumulateRight">
            <summary>
            Provides an expression that describes how to take the aggregate state and a new data object from the right input and compute a new aggregate state.
            </summary>
            <returns>An expression that describes how to take the aggregate state and a new data object from the right input and compute a new aggregate state.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IBinaryAggregate`4.DeaccumulateLeft">
            <summary>
            Provides an expression that describes how to take the aggregate state and a retracted data object from the left input and compute a new aggregate state.
            </summary>
            <returns>An expression that describes how to take the aggregate state and a retracted data object from the left input and compute a new aggregate state.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IBinaryAggregate`4.DeaccumulateRight">
            <summary>
            Provides an expression that describes how to take the aggregate state and a retracted data object from the right input and compute a new aggregate state.
            </summary>
            <returns>An expression that describes how to take the aggregate state and a retracted data object from the right input and compute a new aggregate state.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IBinaryAggregate`4.Difference">
            <summary>
            Provides an expression that describes how to take two different aggregate states and subtract one from the other.
            </summary>
            <returns>An expression that describes how to take two different aggregate states and subtract one from the other.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Aggregates.IBinaryAggregate`4.ComputeResult">
            <summary>
            Provides an expression that describes how to compute a final result from an aggregate state.
            </summary>
            <returns>An expression that describes how to compute a final result from an aggregate state.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.StandardDeviationDouble">
            <summary>
            An aggregate that computes the sample standard deviation
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.PopulationStandardDeviationDouble">
            <summary>
            An aggregate that computes the population standard deviation
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.VarianceDouble">
            <summary>
            An aggregate that computes the sample variance
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Aggregates.PopulationVarianceDouble">
            <summary>
            An aggregate that computes the population variance
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.MinMaxState`1">
            <summary>
            The state object used in minimum and maximum aggregates.
            </summary>
            <typeparam name="T">The type of the underlying elements being aggregated.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.MinMaxState`1.savedValues">
            <summary>
            A sorted multiset of all values currently in state.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.MinMaxState`1.currentValue">
            <summary>
            The current value if the aggregate were to be computed immediately.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.MinMaxState`1.currentTimestamp">
            <summary>
            The timestamp of the last operation on this state object.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.ColumnPoolBase">
            <summary>
            The base class for all column pools.
            Non-generic so it can be the base class for
            classes of different genericity as well as
            making it easy to have collections of them.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.ColumnPoolBase.GetStatusReport">
            <summary>
            Returns a formatted report of how many objects have been created
            and how many have been returned.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.ColumnPoolBase.Leaked">
            <summary>
            If there are any unreturned memory blocks, this returns the column pool itself (so
            that it can be further queried). Otherwise it returns null
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.ColumnPoolBase.Free(System.Boolean)">
            <summary>
            Frees the queue and re-initializes the pool. If the reset flag is set, then it also zeros out
            the number of objects it has created.
            </summary>
            <param name="reset"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.ColumnPool`1">
            <summary>
            Encapsulates a memory pool of ColumnBatches.
            </summary>
            <typeparam name="T">
            The type of element stored within each ColumnBatch.
            </typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.ColumnPool`1.Return(Microsoft.StreamProcessing.Internal.ColumnBatch{`0})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.ColumnPool`1.Get(Microsoft.StreamProcessing.Internal.ColumnBatch{`0}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.ColumnPool`1.GetStatusReport">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.ColumnPool`1.Leaked">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.ColumnPool`1.Free(System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="reset"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.DataStructurePool`1">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.DataStructurePool`1.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.DataStructurePool`1.#ctor(System.Func{`0})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="creator"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.DataStructurePool`1.Return(`0)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.DataStructurePool`1.Get(`0@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.DataStructurePool`1.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.DoublingArrayPool`1">
            <summary>
            Encapsulates a memory pool of ColumnBatches.
            </summary>
            <typeparam name="T">
            The type of element stored within each ColumnBatch.
            </typeparam>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2">
            <summary>
            Currently for internal use only - do not use directly.
            Fast dictionary implementation, sparse entries, no next pointers, bitvector pre-filtering, lean API
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.IteratorStart">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.entries">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.#ctor(System.Int32,System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="capacity"></param>
            <param name="equals"></param>
            <param name="getHashCode"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.Lookup(`0,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.Lookup(`0,System.Int32,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="key"></param>
            <param name="hashCode"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.Insert(System.Int32@,`0,`1)">
            <summary>
            Insert takes an index as ref parameter because Insert may resize the dictionary, which would cause index to change.
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.Iterate(System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary`2.Clear">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2">
            <summary>
            Currently for internal use only - do not use directly.
            Fast dictionary implementation, sparse entries, no next pointers, bitvector pre-filtering, lean API.
            Supports remove operation
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.IteratorStart">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.entries">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Size">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.#ctor(System.Int32,System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="capacity"></param>
            <param name="equals"></param>
            <param name="getHashCode"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Initialize">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Clear">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Insert(`0,`1)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Insert(`0,`1,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hashCode"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Lookup(`0,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Lookup(`0,System.Int32,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="key"></param>
            <param name="hashCode"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Remove(`0)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Remove(`0,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="key"></param>
            <param name="hashCode"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary2`2.Iterate(System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2">
            <summary>
            Currently for internal use only - do not use directly.
            Fast dictionary implementation, sparse entries, no next pointers, bitvector pre-filtering, lean API
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.IteratorStart">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.comparerEquals">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.entries">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.Size">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.bitvector">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.#ctor(System.Int32,System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="capacity"></param>
            <param name="equals"></param>
            <param name="getHashCode"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.Lookup(`0,System.Int32,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="key"></param>
            <param name="hashCode"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.Insert(System.Int32@,`0,`1,System.Int32)">
            <summary>
            Insert takes an index as ref parameter because Insert may resize the dictionary, which would cause index to change.
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hashCode"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.Iterate(System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.IterateDirty(System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.Clean">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.IsClean(System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.SetDirty(System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastDictionary3`2.Clear">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.#ctor(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="minCapacity"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.IsEmpty">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.Values">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.Insert">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.Insert(`0)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.Remove(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.Clear">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.Iterate(System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.ListTraverser">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.ListTraverser.#ctor(Microsoft.StreamProcessing.Internal.Collections.FastLinkedList{`0})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.ListTraverser.Reset">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.ListTraverser.Find">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.ListTraverser.Next(System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastLinkedList`1.ListTraverser.Remove">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastMap`1">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.#ctor(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="minCapacity"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.IsEmpty">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.IsInvisibleEmpty">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.Values">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.Insert(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.Insert(System.Int32,`0)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="hash"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.InsertInvisible(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.MakeInvisible(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.Remove(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.GetHash(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.Clear">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.Find(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.Find(System.Int32,Microsoft.StreamProcessing.Internal.Collections.FastMap{`0}.FindTraverser@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="hash"></param>
            <param name="ft"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.Traverse">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.TraverseInvisible">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.FindTraverser">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.FindTraverser.#ctor(Microsoft.StreamProcessing.Internal.Collections.FastMap{`0})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.FindTraverser.Find(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.FindTraverser.Next(System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.FindTraverser.Remove">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.FindTraverser.InsertAt">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.VisibleTraverser">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.VisibleTraverser.currIndex">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.VisibleTraverser.#ctor(Microsoft.StreamProcessing.Internal.Collections.FastMap{`0})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.VisibleTraverser.Next(System.Int32@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.VisibleTraverser.Remove">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.VisibleTraverser.MakeInvisible">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.InvisibleTraverser">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.InvisibleTraverser.Next(System.Int32@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.InvisibleTraverser.Remove">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastMap`1.InvisibleTraverser.MakeVisible">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.FastStack`1">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastStack`1.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastStack`1.#ctor(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastStack`1.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.FastStack`1.Values">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastStack`1.Push">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.FastStack`1.Clear">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.Entry`2">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.Entry`2.key">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.Entry`2.value">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.Entry2`2">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.Entry2`2.key">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.Entry2`2.value">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.Entry3`2">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.Entry3`2.key">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.Entry3`2.value">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.Entry3`2.hash">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.IsEmpty">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.Capacity">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.Insert(System.Int64,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="time"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.TryPeekNext(System.Int64@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="time"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.TryGetNext(System.Int64@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="time"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.TryGetNextInclusive(System.Int64,System.Int64@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="maxTime"></param>
            <param name="time"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.TryGetNextExclusive(System.Int64,System.Int64@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="maxTime"></param>
            <param name="time"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.RemoveTop">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.IEndPointOrderer.Clear">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.IsColumnar">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.longPool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.keyPool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.payloadPool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.intPool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.shortPool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.bytePool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.stringPool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.bitvectorPool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.charArrayPool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.#ctor(System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="isColumnar"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.GetQueueReport(System.String)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="memoryPoolName"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.Get(Microsoft.StreamProcessing.StreamMessage{`0,`1}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.GetKey(Microsoft.StreamProcessing.Internal.ColumnBatch{`0}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.GetPayload(Microsoft.StreamProcessing.Internal.ColumnBatch{`1}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.Get(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.Get(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int32}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.Get(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Byte}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.Get(Microsoft.StreamProcessing.Internal.ColumnBatch{System.String}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.GetBV(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.Get(Microsoft.StreamProcessing.Internal.Collections.MultiString@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MemoryPool`2.Return(Microsoft.StreamProcessing.StreamMessage{`0,`1})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="streamMessage"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.MultiSet`1">
            <summary>
            Represents a mathematical "bag", where individual items can be stored more than once but order-independent.
            </summary>
            <typeparam name="T">The type of the underlying item collection</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiSet`1.#ctor">
            <summary>
            Creates a new instance of a multiset.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.MultiSet`1.IsEmpty">
            <summary>
            Declares whether the multiset is empty
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiSet`1.Add(`0)">
            <summary>
            Adds an item to the multiset
            </summary>
            <param name="key">The item to add to the multiset</param>
            <returns>A pointer to the current multiset to allow for functional composition</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiSet`1.Remove(`0)">
            <summary>
            Removes an item from the multiset
            </summary>
            <param name="key">The item to remove from the multiset</param>
            <returns>A pointer to the current multiset to allow for functional composition</returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.MultiSet`1.Count">
            <summary>
            Returns the number of elements (not distinct elements) in the multiset
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiSet`1.GetEnumerable">
            <summary>
            Returns an enumerable over the multiset objects
            </summary>
            <returns>An enumerable that enumerates over the values in the multiset</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.Enqueue(`0@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.Add(`0)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.Dequeue">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.TryDequeue(`0@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.PeekFirst">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.TryPeekFirst(`0@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.PeekLast">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.IsEmpty">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.GetEnumerator">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer`1.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.#ctor(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.IsEmpty">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.Capacity">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.Insert(System.Int64,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="time"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.TryPeekNext(System.Int64@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="time"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.TryGetNext(System.Int64@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="time"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.TryGetNextInclusive(System.Int64,System.Int64@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="maxTime"></param>
            <param name="time"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.TryGetNextExclusive(System.Int64,System.Int64@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="maxTime"></param>
            <param name="time"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.RemoveTop">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.Remove(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.RemovableEndPointHeap.Clear">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.SafeConcurrentDictionary`1">
            <summary>
            A dictionary that supports concurrency with similar interface to .NET's ConcurrentDictionary.
            However, this dictionary changes the implementation and GetOrAdd functions to
            guarantee atomicity per-key for factory lambdas.
            </summary>
            <typeparam name="TValue">Type of values in the dictionary</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.SafeConcurrentDictionary`1.GetOrAdd(Microsoft.StreamProcessing.Internal.Collections.CacheKey,System.Func{Microsoft.StreamProcessing.Internal.Collections.CacheKey,`0})">
            <summary>
            Adds a key/value pair to the dictionary if it does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.SafeConcurrentDictionary`1.GetEnumerator">
            <summary>
            Returns an enumerator of the elements in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.SafeConcurrentDictionary`1.GetLock(Microsoft.StreamProcessing.Internal.Collections.CacheKey)">
            <summary>
            Retrieves lock associated with a key (creating it if it does not exist).
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.StreamMessagePool`2">
            <summary>
            A pool for StreamMessages.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.MultiString">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MultiString.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringState">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringState.Unsealed">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringState.Sealed">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringState.Disposed">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.MultiString.State">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.GreaterThan(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int32},System.Int32,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},Microsoft.StreamProcessing.Internal.Collections.ColumnPool{System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="inBV"></param>
            <param name="pool"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Subtract(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int32},System.Int32,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},Microsoft.StreamProcessing.Internal.Collections.ColumnPool{System.Int32})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="inBV"></param>
            <param name="pool"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.InvertLeftThenOrWithRight(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},Microsoft.StreamProcessing.Internal.Collections.ColumnPool{System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="pool"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.AndEquals(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.CloneShell">
            <summary>
            Currently for internal use only - do not use directly.
            Clone the multi-string shell only
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Clone">
            <summary>
            Currently for internal use only - do not use directly.
            Clone the multi-string, refcounting the bulky contents
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.AddString(System.String)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Initialize(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.AddString(Microsoft.StreamProcessing.Internal.Collections.MultiString,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="other"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.ToColumnBatch(Microsoft.StreamProcessing.Internal.Collections.ColumnPool{System.String},Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="stringPool"></param>
            <param name="livenessBitVector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Seal">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.MultiString.Item(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.ApplyBoolean(System.Linq.Expressions.Expression{System.Func{System.String,System.Boolean}},Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            Apply a boolean expression, returns a bitvector (e.g., StartsWith)
            </summary>
            <param name="expression"></param>
            <param name="inBV"></param>
            <param name="inPlace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Apply``1(System.Linq.Expressions.Expression{System.Func{System.String,``0}},Microsoft.StreamProcessing.Internal.Collections.ColumnPool{``0},Microsoft.StreamProcessing.Internal.ColumnBatch{``0},Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            Apply an expression that returns non-string
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression"></param>
            <param name="tPool"></param>
            <param name="tBatch"></param>
            <param name="inBV"></param>
            <param name="inPlace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.ApplyString(System.Linq.Expressions.Expression{System.Func{System.String,System.String}},Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            Apply an expression that returns another single string (e.g., Substring) per input stream
            </summary>
            <param name="expression"></param>
            <param name="inBV"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Contains(System.String,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="str"></param>
            <param name="inBV"></param>
            <param name="inPlace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Contains2(System.String,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="str"></param>
            <param name="inBV"></param>
            <param name="inPlace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="comparisonType"></param>
            <param name="inBV"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.IndexOf(System.String,System.Int32,System.StringComparison,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <param name="comparisonType"></param>
            <param name="inBV"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="comparisonType"></param>
            <param name="inBV"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.LastIndexOf(System.String,System.Int32,System.StringComparison,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <param name="comparisonType"></param>
            <param name="inBV"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.LastIndexOf(System.String,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int32},System.StringComparison,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="str"></param>
            <param name="startIndices"></param>
            <param name="comparisonType"></param>
            <param name="inBV"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.IsMatch(System.String,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="regex"></param>
            <param name="inBV"></param>
            <param name="inPlace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.IsMatch(System.Text.RegularExpressions.Regex,System.Int32,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="regex"></param>
            <param name="startat"></param>
            <param name="inBV"></param>
            <param name="inPlace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.ToLower(System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="inPlace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.ToUpper(System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="inPlace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Split(System.Text.RegularExpressions.Regex,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int32}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="regex"></param>
            <param name="inBV"></param>
            <param name="multiplicity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Split(System.Char,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int32}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="separator"></param>
            <param name="inBV"></param>
            <param name="multiplicity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Split(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int32}@,System.Char[])">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="inBV"></param>
            <param name="multiplicity"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Substring(System.Int32,System.Int32,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="inBV"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Equals(System.String,Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="otherString"></param>
            <param name="inBV"></param>
            <param name="inPlace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.GetHashCode(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="inBV"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.Length(Microsoft.StreamProcessing.Internal.ColumnBatch{System.Int64},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="inBV"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.theActualMultiString">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.rowIndex">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.#ctor(Microsoft.StreamProcessing.Internal.Collections.MultiString)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.Length">
            <summary>
            Used internally, but also is the wrapper implementation for String.Length
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.IndexOf(System.Char)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.IndexOf(System.String)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.IndexOf(System.Char,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.IndexOf(System.String,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.IndexOf(System.String,System.StringComparison)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.IndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.LastIndexOf(System.Char)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.LastIndexOf(System.String)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.LastIndexOf(System.Char,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.LastIndexOf(System.String,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.LastIndexOf(System.String,System.StringComparison)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.LastIndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.LastIndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.Collections.MultiString.MultiStringWrapper.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.ColumnBatch`1">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.ColumnBatch`1.columnBatchLock">
            <summary>
            Used to make sure this class is thread-safe when it makes decisions
            about the reference count. (See <see cref="M:Microsoft.StreamProcessing.Internal.ColumnBatch`1.MakeWritable(Microsoft.StreamProcessing.Internal.Collections.ColumnPool{`0})"/>.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.ColumnBatch`1.col">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.ColumnBatch`1.UsedLength">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ColumnBatch`1.MakeWritable(Microsoft.StreamProcessing.Internal.Collections.ColumnPool{`0})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="pool"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.EgressBoundary`3">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.EgressBoundary`3.observer">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.EgressBoundary`3.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.EgressBoundary`3.#ctor(System.IObserver{`2},Microsoft.StreamProcessing.QueryContainer)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="observer"></param>
            <param name="container"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.EgressBoundary`3.CurrentlyBufferedOutputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.EgressBoundary`3.CurrentlyBufferedInputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.EgressBoundary`3.ProduceQueryPlan(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.EgressBoundary`3.OnNext(Microsoft.StreamProcessing.StreamMessage{`0,`1})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="batch"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.EgressBoundary`3.OnError(System.Exception)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.EgressBoundary`3.OnCompleted">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.EgressBoundary`3.OnFlush">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.EgressBoundary`3.AttachProcess(System.String,Microsoft.StreamProcessing.Process)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="identifier"></param>
            <param name="p"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.ImpatienceSorter`1">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ImpatienceSorter`1.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ImpatienceSorter`1.Enqueue(Microsoft.StreamProcessing.StreamEvent{`0}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="streamEvent"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ImpatienceSorter`1.DequeueUntil(System.Int64,System.Boolean@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="recheck"></param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ImpatienceSorter`1.Return(Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer{Microsoft.StreamProcessing.StreamEvent{`0}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="streamEvents"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ImpatienceSorter`1.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ImpatienceSorter`1.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.Enqueue(Microsoft.StreamProcessing.PartitionedStreamEvent{`0,`1}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="streamEvent"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.DequeueUntil(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.DequeueUntil(`0,System.Int64,System.Boolean@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="partitionKey"></param>
            <param name="recheck"></param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.Return(`0,Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer{Microsoft.StreamProcessing.PartitionedStreamEvent{`0,`1}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="partitionKey"></param>
            <param name="streamEvents"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.ImpatienceSorter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.ImpatienceSorter.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.ImpatienceSorter.Enqueue(Microsoft.StreamProcessing.PartitionedStreamEvent{`0,`1}@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="streamEvent"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.ImpatienceSorter.DequeueUntil(System.Int64,System.Boolean@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="recheck"></param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.ImpatienceSorter.Return(Microsoft.StreamProcessing.Internal.Collections.PooledElasticCircularBuffer{Microsoft.StreamProcessing.PartitionedStreamEvent{`0,`1}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="streamEvents"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.ImpatienceSorter.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedImpatienceSorter`2.ImpatienceSorter.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.DisorderedObserverSubscriptionBase`3">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TIngressStructure"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedObserverSubscriptionBase`3.primaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedObserverSubscriptionBase`3.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedObserverSubscriptionBase`3.#ctor(System.IObservable{`0},System.String,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,`2},Microsoft.StreamProcessing.IStreamObserver{Microsoft.StreamProcessing.Empty,`2},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.IObserver{Microsoft.StreamProcessing.OutOfOrderStreamEvent{`1}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="observable"></param>
            <param name="identifier"></param>
            <param name="streamable"></param>
            <param name="observer"></param>
            <param name="disorderPolicy"></param>
            <param name="punctuationPolicy"></param>
            <param name="onCompletedPolicy"></param>
            <param name="flushPolicy"></param>
            <param name="diagnosticOutput"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedObserverSubscriptionBase`3.PrimaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedObserverSubscriptionBase`3.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedObserverSubscriptionBase`3.OnNext(`0)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TIngressStructure"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.disorderPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.reorderLatency">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.flushPolicy">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.punctuationPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.punctuationGenerationPeriod">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.currentBatch">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.currentTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.startEventInformation">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.lastPunctuationTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.highWatermark">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.impatienceSorter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.priorityQueueSorter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.diagnosticOutput">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.subscription">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.#ctor(System.String,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,`2},Microsoft.StreamProcessing.IStreamObserver{Microsoft.StreamProcessing.Empty,`2},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.IObserver{Microsoft.StreamProcessing.OutOfOrderStreamEvent{`1}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="identifier"></param>
            <param name="streamable"></param>
            <param name="observer"></param>
            <param name="disorderPolicy"></param>
            <param name="flushPolicy"></param>
            <param name="punctuationPolicy"></param>
            <param name="onCompletedPolicy"></param>
            <param name="diagnosticOutput"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.FlushContents">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.OnPunctuation(Microsoft.StreamProcessing.StreamEvent{`2})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.OnCompleted">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.OnCompleted(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="punctuationTime"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.ProduceQueryPlan(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.IngressSiteIdentifier">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.DelayedDisposable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.DisposeState">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.Dispose(System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="managed"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.PrimaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.CurrentlyBufferedStartEdgeCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.CurrentlyBufferedOutputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.CurrentlyBufferedInputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.CurrentlyBufferedReorderCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.AdjustInfo">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.AdjustInfo.modifiedStartTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.AdjustInfo.numberOfOccurrences">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.AdjustInfo.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.AdjustInfo.#ctor(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.Restore(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.DelayedSubscription">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.DelayedSubscription.#ctor(System.Func{System.IDisposable})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.DelayedSubscription.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedSubscriptionBase`3.DelayedSubscription.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.ObserverSubscriptionBase`3">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TIngressStructure"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.ObserverSubscriptionBase`3.primaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ObserverSubscriptionBase`3.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ObserverSubscriptionBase`3.#ctor(System.IObservable{`0},System.String,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,`2},Microsoft.StreamProcessing.IStreamObserver{Microsoft.StreamProcessing.Empty,`2},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.IObserver{Microsoft.StreamProcessing.OutOfOrderStreamEvent{`1}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="observable"></param>
            <param name="identifier"></param>
            <param name="streamable"></param>
            <param name="observer"></param>
            <param name="disorderPolicy"></param>
            <param name="punctuationPolicy"></param>
            <param name="onCompletedPolicy"></param>
            <param name="flushPolicy"></param>
            <param name="diagnosticOutput"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ObserverSubscriptionBase`3.PrimaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ObserverSubscriptionBase`3.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.ObserverSubscriptionBase`3.OnNext(`0)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.SubscriptionBase`3">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TIngressStructure"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.disorderPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.reorderLatency">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.flushPolicy">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.punctuationPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.punctuationGenerationPeriod">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.currentBatch">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.currentTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.startEventInformation">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.lastPunctuationTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.highWatermark">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.impatienceSorter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.priorityQueueSorter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.diagnosticOutput">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.subscription">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.#ctor(System.String,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,`2},Microsoft.StreamProcessing.IStreamObserver{Microsoft.StreamProcessing.Empty,`2},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.IObserver{Microsoft.StreamProcessing.OutOfOrderStreamEvent{`1}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="identifier"></param>
            <param name="streamable"></param>
            <param name="observer"></param>
            <param name="disorderPolicy"></param>
            <param name="flushPolicy"></param>
            <param name="punctuationPolicy"></param>
            <param name="onCompletedPolicy"></param>
            <param name="diagnosticOutput"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.FlushContents">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.OnPunctuation(Microsoft.StreamProcessing.StreamEvent{`1})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.OnCompleted">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.OnCompleted(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="punctuationTime"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.ProduceQueryPlan(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.IngressSiteIdentifier">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.DelayedDisposable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.DisposeState">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.Dispose(System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="managed"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.PrimaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.CurrentlyBufferedStartEdgeCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.CurrentlyBufferedOutputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.CurrentlyBufferedInputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.CurrentlyBufferedReorderCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.AdjustInfo">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.AdjustInfo.modifiedStartTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.AdjustInfo.numberOfOccurrences">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.AdjustInfo.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.AdjustInfo.#ctor(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.Restore(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.DelayedSubscription">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.DelayedSubscription.#ctor(System.Func{System.IDisposable})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.DelayedSubscription.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.SubscriptionBase`3.DelayedSubscription.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.DisorderedPartitionedObserverSubscriptionBase`4">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TIngressStructure"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedObserverSubscriptionBase`4.primaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedObserverSubscriptionBase`4.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedObserverSubscriptionBase`4.#ctor(System.IObservable{`1},System.String,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{`0},`3},Microsoft.StreamProcessing.IStreamObserver{Microsoft.StreamProcessing.PartitionKey{`0},`3},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.IObserver{Microsoft.StreamProcessing.OutOfOrderPartitionedStreamEvent{`0,`2}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="observable"></param>
            <param name="identifier"></param>
            <param name="streamable"></param>
            <param name="observer"></param>
            <param name="disorderPolicy"></param>
            <param name="punctuationPolicy"></param>
            <param name="lowWatermarkPolicy"></param>
            <param name="onCompletedPolicy"></param>
            <param name="flushPolicy"></param>
            <param name="diagnosticOutput"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedObserverSubscriptionBase`4.PrimaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedObserverSubscriptionBase`4.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedObserverSubscriptionBase`4.OnNext(`1)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TIngressStructure"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.disorderPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.reorderLatency">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.flushPolicy">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.punctuationPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.punctuationGenerationPeriod">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.lowWatermarkPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.lowWatermarkGenerationPeriod">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.lowWatermarkTimestampLag">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.currentBatch">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.currentTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.startEventInformation">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.lastPunctuationTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.highWatermark">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.partitionHighWatermarks">
            <summary>
            Currently for internal use only - do not use directly.
            Tracks each partition's high watermark, which, unlike currentTime, does not include the reorderLatency.
            This is only used for partitioned streams with latency (i.e. nonzero reorderLatency)
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.highWatermarkToPartitionsMap">
            <summary>
            Currently for internal use only - do not use directly.
            Inverse of partitionHighWatermarks - maps highWatermark times to sets of partitions that have that value as their high watermark.
            This is only used for partitioned streams with latency (i.e. nonzero reorderLatency)
            NB: Do not mark as DataMember or as state managed: this is an inversion of existing data in field partitionHighWatermarks.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.lowWatermark">
            <summary>
            Currently for internal use only - do not use directly.
            Tracks the three possible low watermark values:
            1. rawValue - the raw low watermark value
            2. quantizedForLowWatermarkGeneration - raw low watermark value quantized for low watermark generation
            2. quanitzedForPunctuationGeneration - raw low watermark value quantized for punctuation generation
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.baselineLowWatermarkForPolicy">
            <summary>
            Currently for internal use only - do not use directly.
            Baseline low watermark value used for low watermark and punctuation generation policies. This value will be
            quantized to lowWatermarkGenerationPeriod boundaries.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.impatienceSorter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.priorityQueueSorter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.diagnosticOutput">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.subscription">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.#ctor(System.String,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{`0},`3},Microsoft.StreamProcessing.IStreamObserver{Microsoft.StreamProcessing.PartitionKey{`0},`3},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.IObserver{Microsoft.StreamProcessing.OutOfOrderPartitionedStreamEvent{`0,`2}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="identifier"></param>
            <param name="streamable"></param>
            <param name="observer"></param>
            <param name="disorderPolicy"></param>
            <param name="flushPolicy"></param>
            <param name="punctuationPolicy"></param>
            <param name="lowWatermarkPolicy"></param>
            <param name="onCompletedPolicy"></param>
            <param name="diagnosticOutput"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.FlushContents">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.OnPunctuation(Microsoft.StreamProcessing.PartitionedStreamEvent{`0,`3})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.UpdatePunctuation(`0,System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="partitionKey"></param>
            <param name="time"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.UpdatePunctuation(`0,System.Int64,System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="partitionKey"></param>
            <param name="time"></param>
            <param name="timeQuantized"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.UpdateLowWatermark(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.OnCompleted">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.OnCompleted(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="punctuationTime"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.ProduceQueryPlan(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.IngressSiteIdentifier">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.DelayedDisposable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.DisposeState">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.Dispose(System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="managed"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.PrimaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.CurrentlyBufferedStartEdgeCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.CurrentlyBufferedOutputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.CurrentlyBufferedInputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.CurrentlyBufferedReorderCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.AdjustInfo">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.AdjustInfo.modifiedStartTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.AdjustInfo.numberOfOccurrences">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.AdjustInfo.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.AdjustInfo.#ctor(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.Restore(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.DelayedSubscription">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.DelayedSubscription.#ctor(System.Func{System.IDisposable})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.DelayedSubscription.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.DisorderedPartitionedSubscriptionBase`4.DelayedSubscription.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.PartitionedObserverSubscriptionBase`4">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TIngressStructure"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedObserverSubscriptionBase`4.primaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedObserverSubscriptionBase`4.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedObserverSubscriptionBase`4.#ctor(System.IObservable{`1},System.String,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{`0},`3},Microsoft.StreamProcessing.IStreamObserver{Microsoft.StreamProcessing.PartitionKey{`0},`3},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.IObserver{Microsoft.StreamProcessing.OutOfOrderPartitionedStreamEvent{`0,`2}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="observable"></param>
            <param name="identifier"></param>
            <param name="streamable"></param>
            <param name="observer"></param>
            <param name="disorderPolicy"></param>
            <param name="punctuationPolicy"></param>
            <param name="lowWatermarkPolicy"></param>
            <param name="onCompletedPolicy"></param>
            <param name="flushPolicy"></param>
            <param name="diagnosticOutput"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedObserverSubscriptionBase`4.PrimaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedObserverSubscriptionBase`4.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedObserverSubscriptionBase`4.OnNext(`1)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TIngressStructure"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.disorderPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.reorderLatency">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.flushPolicy">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.punctuationPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.punctuationGenerationPeriod">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.lowWatermarkPolicyType">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.lowWatermarkGenerationPeriod">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.lowWatermarkTimestampLag">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.currentBatch">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.currentTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.startEventInformation">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.lastPunctuationTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.highWatermark">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.partitionHighWatermarks">
            <summary>
            Currently for internal use only - do not use directly.
            Tracks each partition's high watermark, which, unlike currentTime, does not include the reorderLatency.
            This is only used for partitioned streams with latency (i.e. nonzero reorderLatency)
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.highWatermarkToPartitionsMap">
            <summary>
            Currently for internal use only - do not use directly.
            Inverse of partitionHighWatermarks - maps highWatermark times to sets of partitions that have that value as their high watermark.
            This is only used for partitioned streams with latency (i.e. nonzero reorderLatency)
            NB: Do not mark as DataMember or as state managed: this is an inversion of existing data in field partitionHighWatermarks.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.lowWatermark">
            <summary>
            Currently for internal use only - do not use directly.
            Tracks the three possible low watermark values:
            1. rawValue - the raw low watermark value
            2. quantizedForLowWatermarkGeneration - raw low watermark value quantized for low watermark generation
            2. quanitzedForPunctuationGeneration - raw low watermark value quantized for punctuation generation
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.baselineLowWatermarkForPolicy">
            <summary>
            Currently for internal use only - do not use directly.
            Baseline low watermark value used for low watermark and punctuation generation policies. This value will be
            quantized to lowWatermarkGenerationPeriod boundaries.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.impatienceSorter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.priorityQueueSorter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.diagnosticOutput">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.subscription">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.#ctor(System.String,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{`0},`3},Microsoft.StreamProcessing.IStreamObserver{Microsoft.StreamProcessing.PartitionKey{`0},`3},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.IObserver{Microsoft.StreamProcessing.OutOfOrderPartitionedStreamEvent{`0,`2}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="identifier"></param>
            <param name="streamable"></param>
            <param name="observer"></param>
            <param name="disorderPolicy"></param>
            <param name="flushPolicy"></param>
            <param name="punctuationPolicy"></param>
            <param name="lowWatermarkPolicy"></param>
            <param name="onCompletedPolicy"></param>
            <param name="diagnosticOutput"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.FlushContents">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.OnPunctuation(Microsoft.StreamProcessing.PartitionedStreamEvent{`0,`2})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.UpdatePunctuation(`0,System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="partitionKey"></param>
            <param name="time"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.UpdatePunctuation(`0,System.Int64,System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="partitionKey"></param>
            <param name="time"></param>
            <param name="timeQuantized"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.UpdateLowWatermark(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.OnCompleted">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.OnCompleted(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="punctuationTime"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.ProduceQueryPlan(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.IngressSiteIdentifier">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.DelayedDisposable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.DisposeState">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.Dispose(System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="managed"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.PrimaryAction">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.CurrentlyBufferedStartEdgeCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.CurrentlyBufferedOutputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.CurrentlyBufferedInputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.CurrentlyBufferedReorderCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.AdjustInfo">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.AdjustInfo.modifiedStartTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.AdjustInfo.numberOfOccurrences">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.AdjustInfo.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.AdjustInfo.#ctor(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.Restore(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.DelayedSubscription">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.DelayedSubscription.#ctor(System.Func{System.IDisposable})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.DelayedSubscription.Enable">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.PartitionedSubscriptionBase`4.DelayedSubscription.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.isFinal">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.hasOutgoingArcs">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.singleEventStateMap">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.eventListStateMap">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.multiEventStateMap">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.epsilonStateMap">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.startStates">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.numStartStates">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.defaultRegister">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.AllowOverlappingInstances">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.IsDeterministic">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.MaxDuration">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.IsSyncTimeSimultaneityFree">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.IsGenerated">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.pool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.errorMessages">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.keyEqualityComparer">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.iter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.batch">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.#ctor(Microsoft.StreamProcessing.IStreamable{`0,`2},Microsoft.StreamProcessing.IStreamObserver{`0,`2},System.Object,System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="stream"></param>
            <param name="observer"></param>
            <param name="afa"></param>
            <param name="maxDuration"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.OnPunctuation(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="timestamp"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.OnLowWatermark(System.Int64)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="timestamp"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.DisposeState">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.FlushContents">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.CurrentlyBufferedOutputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.CompiledAfaPipeBase`4.ProduceQueryPlan(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.GeneratedFastDictionary">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.GeneratedFastDictionary.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.GeneratedSortedDictionary">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.GeneratedSortedDictionary.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`1">
            <summary>
            A simple structure representing a tuple of 1 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`1.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`1.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`1.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`2">
            <summary>
            A simple structure representing a tuple of 2 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`2.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`2.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`2.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`2.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`3">
            <summary>
            A simple structure representing a tuple of 3 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`3.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`3.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`3.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`3.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`3.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`4">
            <summary>
            A simple structure representing a tuple of 4 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`4.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`4.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`4.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`4.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`4.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`4.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`5">
            <summary>
            A simple structure representing a tuple of 5 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`5.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`5.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`5.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`5.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`5.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`5.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`5.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`6">
            <summary>
            A simple structure representing a tuple of 6 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`6.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`6.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`6.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`6.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`6.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`6.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`6.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`6.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`7">
            <summary>
            A simple structure representing a tuple of 7 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`7.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`7.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`7.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`7.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`7.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`7.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`7.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`7.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`7.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`8">
            <summary>
            A simple structure representing a tuple of 8 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
            <typeparam name="T8">Type of component 8 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`8.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`8.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`8.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`8.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`8.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`8.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`8.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`8.Item8">
            <summary>
            Item number 8 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`8.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`8.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`9">
            <summary>
            A simple structure representing a tuple of 9 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
            <typeparam name="T8">Type of component 8 of the tuple.</typeparam>
            <typeparam name="T9">Type of component 9 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`9.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`9.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`9.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`9.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`9.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`9.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`9.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`9.Item8">
            <summary>
            Item number 8 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`9.Item9">
            <summary>
            Item number 9 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`9.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`9.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`10">
            <summary>
            A simple structure representing a tuple of 10 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
            <typeparam name="T8">Type of component 8 of the tuple.</typeparam>
            <typeparam name="T9">Type of component 9 of the tuple.</typeparam>
            <typeparam name="T10">Type of component 10 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item8">
            <summary>
            Item number 8 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item9">
            <summary>
            Item number 9 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`10.Item10">
            <summary>
            Item number 10 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`10.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`10.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`11">
            <summary>
            A simple structure representing a tuple of 11 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
            <typeparam name="T8">Type of component 8 of the tuple.</typeparam>
            <typeparam name="T9">Type of component 9 of the tuple.</typeparam>
            <typeparam name="T10">Type of component 10 of the tuple.</typeparam>
            <typeparam name="T11">Type of component 11 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item8">
            <summary>
            Item number 8 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item9">
            <summary>
            Item number 9 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item10">
            <summary>
            Item number 10 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`11.Item11">
            <summary>
            Item number 11 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`11.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`11.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`12">
            <summary>
            A simple structure representing a tuple of 12 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
            <typeparam name="T8">Type of component 8 of the tuple.</typeparam>
            <typeparam name="T9">Type of component 9 of the tuple.</typeparam>
            <typeparam name="T10">Type of component 10 of the tuple.</typeparam>
            <typeparam name="T11">Type of component 11 of the tuple.</typeparam>
            <typeparam name="T12">Type of component 12 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item8">
            <summary>
            Item number 8 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item9">
            <summary>
            Item number 9 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item10">
            <summary>
            Item number 10 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item11">
            <summary>
            Item number 11 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`12.Item12">
            <summary>
            Item number 12 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`12.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`12.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`13">
            <summary>
            A simple structure representing a tuple of 13 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
            <typeparam name="T8">Type of component 8 of the tuple.</typeparam>
            <typeparam name="T9">Type of component 9 of the tuple.</typeparam>
            <typeparam name="T10">Type of component 10 of the tuple.</typeparam>
            <typeparam name="T11">Type of component 11 of the tuple.</typeparam>
            <typeparam name="T12">Type of component 12 of the tuple.</typeparam>
            <typeparam name="T13">Type of component 13 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item8">
            <summary>
            Item number 8 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item9">
            <summary>
            Item number 9 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item10">
            <summary>
            Item number 10 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item11">
            <summary>
            Item number 11 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item12">
            <summary>
            Item number 12 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`13.Item13">
            <summary>
            Item number 13 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`13.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`13.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`14">
            <summary>
            A simple structure representing a tuple of 14 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
            <typeparam name="T8">Type of component 8 of the tuple.</typeparam>
            <typeparam name="T9">Type of component 9 of the tuple.</typeparam>
            <typeparam name="T10">Type of component 10 of the tuple.</typeparam>
            <typeparam name="T11">Type of component 11 of the tuple.</typeparam>
            <typeparam name="T12">Type of component 12 of the tuple.</typeparam>
            <typeparam name="T13">Type of component 13 of the tuple.</typeparam>
            <typeparam name="T14">Type of component 14 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item8">
            <summary>
            Item number 8 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item9">
            <summary>
            Item number 9 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item10">
            <summary>
            Item number 10 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item11">
            <summary>
            Item number 11 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item12">
            <summary>
            Item number 12 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item13">
            <summary>
            Item number 13 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`14.Item14">
            <summary>
            Item number 14 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`14.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`14.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`15">
            <summary>
            A simple structure representing a tuple of 15 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
            <typeparam name="T8">Type of component 8 of the tuple.</typeparam>
            <typeparam name="T9">Type of component 9 of the tuple.</typeparam>
            <typeparam name="T10">Type of component 10 of the tuple.</typeparam>
            <typeparam name="T11">Type of component 11 of the tuple.</typeparam>
            <typeparam name="T12">Type of component 12 of the tuple.</typeparam>
            <typeparam name="T13">Type of component 13 of the tuple.</typeparam>
            <typeparam name="T14">Type of component 14 of the tuple.</typeparam>
            <typeparam name="T15">Type of component 15 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item8">
            <summary>
            Item number 8 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item9">
            <summary>
            Item number 9 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item10">
            <summary>
            Item number 10 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item11">
            <summary>
            Item number 11 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item12">
            <summary>
            Item number 12 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item13">
            <summary>
            Item number 13 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item14">
            <summary>
            Item number 14 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`15.Item15">
            <summary>
            Item number 15 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`15.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`15.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Internal.StructTuple`16">
            <summary>
            A simple structure representing a tuple of 16 items.
            </summary>
            <typeparam name="T1">Type of component 1 of the tuple.</typeparam>
            <typeparam name="T2">Type of component 2 of the tuple.</typeparam>
            <typeparam name="T3">Type of component 3 of the tuple.</typeparam>
            <typeparam name="T4">Type of component 4 of the tuple.</typeparam>
            <typeparam name="T5">Type of component 5 of the tuple.</typeparam>
            <typeparam name="T6">Type of component 6 of the tuple.</typeparam>
            <typeparam name="T7">Type of component 7 of the tuple.</typeparam>
            <typeparam name="T8">Type of component 8 of the tuple.</typeparam>
            <typeparam name="T9">Type of component 9 of the tuple.</typeparam>
            <typeparam name="T10">Type of component 10 of the tuple.</typeparam>
            <typeparam name="T11">Type of component 11 of the tuple.</typeparam>
            <typeparam name="T12">Type of component 12 of the tuple.</typeparam>
            <typeparam name="T13">Type of component 13 of the tuple.</typeparam>
            <typeparam name="T14">Type of component 14 of the tuple.</typeparam>
            <typeparam name="T15">Type of component 15 of the tuple.</typeparam>
            <typeparam name="T16">Type of component 16 of the tuple.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item1">
            <summary>
            Item number 1 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item2">
            <summary>
            Item number 2 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item3">
            <summary>
            Item number 3 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item4">
            <summary>
            Item number 4 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item5">
            <summary>
            Item number 5 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item6">
            <summary>
            Item number 6 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item7">
            <summary>
            Item number 7 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item8">
            <summary>
            Item number 8 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item9">
            <summary>
            Item number 9 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item10">
            <summary>
            Item number 10 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item11">
            <summary>
            Item number 11 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item12">
            <summary>
            Item number 12 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item13">
            <summary>
            Item number 13 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item14">
            <summary>
            Item number 14 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item15">
            <summary>
            Item number 15 of the tuple object.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Internal.StructTuple`16.Item16">
            <summary>
            Item number 16 of the tuple object.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`16.ToString">
            <summary>
            Prints a string representation of the StructTuple.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Internal.StructTuple`16.Dispose">
            <summary>
            Disposes the struct by testing each constituent component for disposability.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Streamable">
            <summary>
            Streamable extension methods.
            </summary>
            <summary>
            Streamable extension methods.
            </summary>
            <summary>
            Streamable extension methods.
            </summary>
            <summary>
            Streamable extension methods.
            </summary>
            <summary>
            Static class for transformations to Streamables
            </summary>
            <summary>
            This static class contains helper macros to make Trill query authoring easier.
            </summary>
            <summary>
            Extensions to support streaming pattern detection
            </summary>
            <summary>
            Static class for transformations to Streamables
            </summary>
            <summary>
            Static class for transformations to Streamables
            </summary>
            <summary>
            Static class for transformations to Streamables
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Cache``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Caches the complete results computed by the streamable upon an immediate call to subscribe. This
            call will block until the underlying query has fully executed and the result cached.
            </summary>
            <typeparam name="TKey">Type of key for stream</typeparam>
            <typeparam name="TPayload">Type of payload for stream</typeparam>
            <param name="stream">Instance of the stream to be cached</param>
            <param name="limit">Limit on number of events to store in the cached stream</param>
            <param name="inferProperties">Specifies whether each stream event in the incoming stream should be checked to
            infer the properties of no intervals and constant duration
            </param>
            <returns>A streamable cache instance</returns>
            <param name="coalesceEndEdges">Whether or not we coalesce end edges with their starts into interval events</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToAtemporalArrayObservable``1(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0})">
            <summary>
            Exports a streamable as an observable of change list events. Produces events that represent either insertions or deletions.
            </summary>
            <typeparam name="TPayload">The type of object being streamed</typeparam>
            <param name="stream">An IStreamable object that is intended to be an output to the query.</param>
            <returns>An IObservable object of events for output data from the query.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToAtemporalArrayObservable``1(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Func{``0[]})">
            <summary>
            Exports a streamable as an observable of change list events. Produces events that represent either insertions or deletions.
            </summary>
            <typeparam name="TPayload">The type of object being streamed</typeparam>
            <param name="stream">An IStreamable object that is intended to be an output to the query.</param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <returns>An IObservable object of events for output data from the query.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterAtemporalArrayOutput``1(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.String)">
            <summary>
            Registers an IStreamable object as an output of a query, with output as a list of change events.
            </summary>
            <typeparam name="TPayload">The type of object being streamed</typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream">An IStreamable object that is intended to be an output to the query.</param>
            <returns>An IObservable object of events for output data from the query.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterAtemporalArrayOutput``1(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Func{``0[]},System.String)">
            <summary>
            Registers an IStreamable object as an output of a query, with output as a list of change events.
            </summary>
            <typeparam name="TPayload">The type of object being streamed</typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream">An IStreamable object that is intended to be an output to the query.</param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <returns>An IObservable object of events for output data from the query.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToEnumerable``1(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0})">
            <summary>
            Exports a streamable as an enumerable that can be queried at any time for its current state.
            </summary>
            <typeparam name="TPayload">The type of object being streamed and output</typeparam>
            <param name="stream">The stream to convert into an enumerable</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterOutputAsEnumerable``1(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.String)">
            <summary>
            Registers an IStreamable object as an output of a query, with output as a progressively changing enumerable.
            </summary>
            <typeparam name="TPayload">The type of the payload of the data source.</typeparam>
            <param name="container">A query container to which this egress point can be attached.</param>
            <param name="stream">An IStreamable object that is intended to be an output to the query.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <returns>An IObservable object of change list events for output data from the query.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToAtemporalObservable``1(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0})">
            <summary>
            Exports a streamable as an observable of change list events. Produces events that represent either insertions or deletions.
            </summary>
            <typeparam name="TPayload">The type of object being streamed</typeparam>
            <param name="stream">An IStreamable object that is intended to be an output to the query.</param>
            <returns>An IObservable object of events for output data from the query.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterAtemporalOutput``1(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.String)">
            <summary>
            Registers an IStreamable object as an output of a query, with output as a list of change events.
            </summary>
            <typeparam name="TPayload">The type of object being streamed</typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream">An IStreamable object that is intended to be an output to the query.</param>
            <returns>An IObservable object of events for output data from the query.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToBinaryStream``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.IO.Stream,System.Boolean)">
            <summary>
            Serialize streamable into a binary stream
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="input"></param>
            <param name="binaryStream"></param>
            <param name="writePropertiesToStream"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToBinaryStream``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.String)">
            <summary>
            Serialize streamble into a binary file
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="input"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{``0,``1},System.IO.Stream,System.Boolean,System.String)">
            <summary>
            Serialize streamable into a binary stream
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="input"></param>
            <param name="binaryStream"></param>
            <param name="writePropertiesToStream"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{``0,``1},System.String,System.String)">
            <summary>
            Serialize streamble into a binary file
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="input"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamEventArrayObservable``1(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},Microsoft.StreamProcessing.ReshapingPolicy)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="stream"></param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamEventArrayObservable``1(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Func{Microsoft.StreamProcessing.StreamEvent{``0}[]},Microsoft.StreamProcessing.ReshapingPolicy)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterArrayOutput``1(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},Microsoft.StreamProcessing.ReshapingPolicy,System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterArrayOutput``1(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Func{Microsoft.StreamProcessing.StreamEvent{``0}[]},Microsoft.StreamProcessing.ReshapingPolicy,System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayObservable``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayObservable``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Func{``1[]},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Func{``1[]},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayObservable``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64,``0,``1}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayObservable``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Func{``1[]},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64,``0,``1}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64,``0,``1}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Func{``1[]},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64,``0,``1}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamEventArrayObservable``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},Microsoft.StreamProcessing.ReshapingPolicy)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="stream"></param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamEventArrayObservable``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Func{Microsoft.StreamProcessing.PartitionedStreamEvent{``0,``1}[]},Microsoft.StreamProcessing.ReshapingPolicy)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterArrayOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},Microsoft.StreamProcessing.ReshapingPolicy,System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterArrayOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Func{Microsoft.StreamProcessing.PartitionedStreamEvent{``0,``1}[]},Microsoft.StreamProcessing.ReshapingPolicy,System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayObservable``3(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,``1,``2}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayObservable``3(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Func{``2[]},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,``1,``2}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayOutput``3(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,``1,``2}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayOutput``3(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Func{``2[]},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,``1,``2}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayObservable``3(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,System.Int64,``1,``2}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayObservable``3(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Func{``2[]},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,System.Int64,``1,``2}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayOutput``3(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,System.Int64,``1,``2}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayOutput``3(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Func{``2[]},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,System.Int64,``1,``2}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="generator">A function that returns an array that will be populated with stream results.</param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamEventObservable``1(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},Microsoft.StreamProcessing.ReshapingPolicy)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="stream"></param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterOutput``1(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},Microsoft.StreamProcessing.ReshapingPolicy,System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalObservable``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalObservable``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64,``0,``1}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64,``0,``1}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamEventObservable``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},Microsoft.StreamProcessing.ReshapingPolicy)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="stream"></param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterOutput``2(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},Microsoft.StreamProcessing.ReshapingPolicy,System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="reshapingPolicy">Policy that specifies whether and how events are reshaped at egress. Default passes events through unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalObservable``3(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,``1,``2}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalOutput``3(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,``1,``2}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalObservable``3(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,System.Int64,``1,``2}})">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalOutput``3(Microsoft.StreamProcessing.QueryContainer,Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,System.Int64,``1,``2}},System.String)">
            <summary>
            Exports a streamable as an observable of events. Produces events that are sync time ordered.
            Expects only start-edge and interval events in the stream, and constructs user-defined payloads as a result.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="container">The query container to which an egress point is being added.</param>
            <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
            <param name="stream"></param>
            <param name="constructor">Method description that constructs result data from the start time, end time, and the payload of each event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToAtemporalArrayStreamable``1(System.IObservable{System.ArraySegment{``0}},Microsoft.StreamProcessing.TimelinePolicy,Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Registers a data source to be used as input with the query container.
            </summary>
            <typeparam name="TPayload">The type of the payload of the data source.</typeparam>
            <param name="data">A sequence of data elements created by the client.</param>
            <param name="timelinePolicy">Describes how to simulate a progression of time with the data.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterAtemporalArrayInput``1(Microsoft.StreamProcessing.QueryContainer,System.IObservable{System.ArraySegment{``0}},Microsoft.StreamProcessing.TimelinePolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Registers a data source to be used as input with the query container.
            </summary>
            <typeparam name="TPayload">The type of the payload of the data source.</typeparam>
            <param name="data">A sequence of data elements created by the client.</param>
            <param name="timelinePolicy">Describes how to simulate a progression of time with the data.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="container">A query containter to which this ingress point can be attached.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToAtemporalStreamable``1(System.IObservable{``0},Microsoft.StreamProcessing.TimelinePolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Registers a data source to be used as input with the query container.
            </summary>
            <typeparam name="TPayload">The type of the payload of the data source.</typeparam>
            <param name="data">A sequence of data elements created by the client.</param>
            <param name="timelinePolicy">Describes how to simulate a progression of time with the data.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterAtemporalInput``1(Microsoft.StreamProcessing.QueryContainer,System.IObservable{``0},Microsoft.StreamProcessing.TimelinePolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Registers a data source to be used as input with the query container.
            </summary>
            <typeparam name="TPayload">The type of the payload of the data source.</typeparam>
            <param name="data">A sequence of data elements created by the client.</param>
            <param name="timelinePolicy">Describes how to simulate a progression of time with the data.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="container">A query containter to which this ingress point can be attached.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamable``1(System.IO.Stream,Microsoft.StreamProcessing.Serializer.IIngressScheduler,System.Boolean,Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0})">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="binaryStream"></param>
            <param name="scheduler"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamableFromFile``1(System.String,System.Int32,Microsoft.StreamProcessing.Serializer.IIngressScheduler,System.Boolean,Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0})">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="fileName"></param>
            <param name="numMessages"></param>
            <param name="scheduler"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamable``2(System.IO.Stream,Microsoft.StreamProcessing.Serializer.IIngressScheduler,System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1})">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="binaryStream"></param>
            <param name="scheduler"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamableFromFile``2(System.String,System.Int32,Microsoft.StreamProcessing.Serializer.IIngressScheduler,System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1})">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="fileName"></param>
            <param name="numMessages"></param>
            <param name="scheduler"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryInput``1(Microsoft.StreamProcessing.QueryContainer,System.IO.Stream,Microsoft.StreamProcessing.Serializer.IIngressScheduler,System.Boolean,Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0},System.String)">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="binaryStream"></param>
            <param name="scheduler"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <param name="container"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryInputFromFile``1(Microsoft.StreamProcessing.QueryContainer,System.String,System.Int32,Microsoft.StreamProcessing.Serializer.IIngressScheduler,System.Boolean,Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0},System.String)">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="fileName"></param>
            <param name="numMessages"></param>
            <param name="scheduler"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <param name="container"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryInput``2(Microsoft.StreamProcessing.QueryContainer,System.IO.Stream,Microsoft.StreamProcessing.Serializer.IIngressScheduler,System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1},System.String)">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="binaryStream"></param>
            <param name="scheduler"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <param name="container"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryInputFromFile``2(Microsoft.StreamProcessing.QueryContainer,System.String,System.Int32,Microsoft.StreamProcessing.Serializer.IIngressScheduler,System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1},System.String)">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="fileName"></param>
            <param name="numMessages"></param>
            <param name="scheduler"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <param name="container"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamablePassive``1(System.IO.Stream,System.Boolean,Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0})">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="binaryStream"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamablePassiveFromFile``1(System.String,System.Boolean,Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0})">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="fileName"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamablePassive``2(System.IO.Stream,System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1})">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="binaryStream"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamablePassiveFromFile``2(System.String,System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1})">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="fileName"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryInputPassive``1(Microsoft.StreamProcessing.QueryContainer,System.IO.Stream,System.Boolean,Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0},System.String)">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="binaryStream"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <param name="container"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryInputPassiveFromFile``1(Microsoft.StreamProcessing.QueryContainer,System.String,System.Boolean,Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0},System.String)">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TPayload"></typeparam>
            <param name="fileName"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <param name="container"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryInputPassive``2(Microsoft.StreamProcessing.QueryContainer,System.IO.Stream,System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1},System.String)">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="binaryStream"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <param name="container"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterBinaryInputPassiveFromFile``2(Microsoft.StreamProcessing.QueryContainer,System.String,System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1},System.String)">
            <summary>
            Deserialize from binary stream to streamable
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="fileName"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <param name="container"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.CreateStreamable``1(System.IObservable{Microsoft.StreamProcessing.StreamMessage{Microsoft.StreamProcessing.Empty,``0}})">
            <summary>
            Imports an observable of grouped batch data and produces an IStreamable source. Assumes that the data within and between batches
            is sync time ordered.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterInput``1(Microsoft.StreamProcessing.QueryContainer,System.IObservable{Microsoft.StreamProcessing.StreamMessage{Microsoft.StreamProcessing.Empty,``0}},System.String)">
            <summary>
            Imports an observable of grouped batch data and produces an IStreamable source. Assumes that the data within and between batches
            is sync time ordered.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamable``1(System.IObservable{System.ArraySegment{Microsoft.StreamProcessing.StreamEvent{``0}}},Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of StreamEvents to an IStreamable.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterInput``1(Microsoft.StreamProcessing.QueryContainer,System.IObservable{System.ArraySegment{Microsoft.StreamProcessing.StreamEvent{``0}}},Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of StreamEvents to an IStreamable.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayStreamable``1(System.IObservable{System.ArraySegment{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of data elements to an IStreamable, start-edge only.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayInput``1(Microsoft.StreamProcessing.QueryContainer,System.IObservable{System.ArraySegment{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of data elements to an IStreamable, start-edge only.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalArrayStreamable``1(System.IObservable{System.ArraySegment{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of data elements to an IStreamable, intervals and start-edges only.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="endEdgeExtractor">An expresion that describes how to interpret the end time for each data value.  Return StreamEvent.InfinitySyncTime to indicate an event with no end time.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalArrayInput``1(Microsoft.StreamProcessing.QueryContainer,System.IObservable{System.ArraySegment{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of data elements to an IStreamable, intervals and start-edges only.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="endEdgeExtractor">An expresion that describes how to interpret the end time for each data value.  Return StreamEvent.InfinitySyncTime to indicate an event with no end time.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamable``2(System.IObservable{System.ArraySegment{Microsoft.StreamProcessing.PartitionedStreamEvent{``0,``1}}},Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of PartitionedStreamEvents to an IStreamable.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterInput``2(Microsoft.StreamProcessing.QueryContainer,System.IObservable{System.ArraySegment{Microsoft.StreamProcessing.PartitionedStreamEvent{``0,``1}}},Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of PartitionedStreamEvents to an IStreamable.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToPartitionedArrayStreamable``2(System.IObservable{System.ArraySegment{``1}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of data elements to an IStreamable, start-edge only, with a partition key.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="partitionExtractor">An expresion that describes how to interpret the partition identifier for each data value.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterPartitionedArrayInput``2(Microsoft.StreamProcessing.QueryContainer,System.IObservable{System.ArraySegment{``1}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of data elements to an IStreamable, start-edge only, with a partition key.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="partitionExtractor">An expresion that describes how to interpret the partition identifier for each data value.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToPartitionedArrayStreamable``2(System.IObservable{System.ArraySegment{``1}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of data elements to an IStreamable, intervals and start-edges only, with a partition key.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="partitionExtractor">An expresion that describes how to interpret the partition identifier for each data value.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="endEdgeExtractor">An expresion that describes how to interpret the end time for each data value.  Return StreamEvent.InfinitySyncTime to indicate an event with no end time.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterPartitionedArrayInput``2(Microsoft.StreamProcessing.QueryContainer,System.IObservable{System.ArraySegment{``1}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of data elements to an IStreamable, intervals and start-edges only, with a partition key.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="partitionExtractor">An expresion that describes how to interpret the partition identifier for each data value.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="endEdgeExtractor">An expresion that describes how to interpret the end time for each data value.  Return StreamEvent.InfinitySyncTime to indicate an event with no end time.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamable``1(System.IObservable{Microsoft.StreamProcessing.StreamEvent{``0}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of StreamEvents to an IStreamable.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterInput``1(Microsoft.StreamProcessing.QueryContainer,System.IObservable{Microsoft.StreamProcessing.StreamEvent{``0}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of StreamEvents to an IStreamable.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalStreamable``1(System.IObservable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of data elements to an IStreamable, start-edge only.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalInput``1(Microsoft.StreamProcessing.QueryContainer,System.IObservable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of data elements to an IStreamable, start-edge only.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToTemporalStreamable``1(System.IObservable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of data elements to an IStreamable, intervals and start-edges only.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="endEdgeExtractor">An expresion that describes how to interpret the end time for each data value.  Return StreamEvent.InfinitySyncTime to indicate an event with no end time.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterTemporalInput``1(Microsoft.StreamProcessing.QueryContainer,System.IObservable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.FlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of data elements to an IStreamable, intervals and start-edges only.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="endEdgeExtractor">An expresion that describes how to interpret the end time for each data value.  Return StreamEvent.InfinitySyncTime to indicate an event with no end time.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToStreamable``2(System.IObservable{Microsoft.StreamProcessing.PartitionedStreamEvent{``0,``1}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of PartitionedStreamEvents to an IStreamable.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="periodicLowWatermarkPolicy">Whether to add periodic low watermarks to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterInput``2(Microsoft.StreamProcessing.QueryContainer,System.IObservable{Microsoft.StreamProcessing.PartitionedStreamEvent{``0,``1}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of PartitionedStreamEvents to an IStreamable.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="periodicLowWatermarkPolicy">Whether to add periodic low watermarks to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToPartitionedStreamable``2(System.IObservable{``1},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of data elements to an IStreamable, start-edge only, with a partition key.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="partitionExtractor">An expresion that describes how to interpret the partition identifier for each data value.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="periodicLowWatermarkPolicy">Whether to add periodic low watermarks to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterPartitionedInput``2(Microsoft.StreamProcessing.QueryContainer,System.IObservable{``1},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of data elements to an IStreamable, start-edge only, with a partition key.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="partitionExtractor">An expresion that describes how to interpret the partition identifier for each data value.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="periodicLowWatermarkPolicy">Whether to add periodic low watermarks to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToPartitionedStreamable``2(System.IObservable{``1},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy)">
            <summary>
            Converts a sequence of data elements to an IStreamable, intervals and start-edges only, with a partition key.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="partitionExtractor">An expresion that describes how to interpret the partition identifier for each data value.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="endEdgeExtractor">An expresion that describes how to interpret the end time for each data value.  Return StreamEvent.InfinitySyncTime to indicate an event with no end time.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="periodicLowWatermarkPolicy">Whether to add periodic low watermarks to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RegisterPartitionedInput``2(Microsoft.StreamProcessing.QueryContainer,System.IObservable{``1},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}},Microsoft.StreamProcessing.DisorderPolicy,Microsoft.StreamProcessing.PartitionedFlushPolicy,Microsoft.StreamProcessing.PeriodicPunctuationPolicy,Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy,Microsoft.StreamProcessing.OnCompletedPolicy,System.String)">
            <summary>
            Converts a sequence of data elements to an IStreamable, intervals and start-edges only, with a partition key.
            The completion policy specifies what to do when the resulting stream completes.
            The disorder policy specifies what to do with out of order events.
            The punctuation policy specifies whether and how punctuations are created and injected
            into the resulting stream. Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
            <param name="container">The query container to which to register the ingress point.</param>
            <typeparam name="TPartitionKey">The type of partition key for the stream.</typeparam>
            <typeparam name="TPayload">The type of data for the stream.</typeparam>
            <param name="streamEvents">A sequence of stream events created by the client.</param>
            <param name="partitionExtractor">An expresion that describes how to interpret the partition identifier for each data value.</param>
            <param name="startEdgeExtractor">An expresion that describes how to interpret the start time for each data value.</param>
            <param name="endEdgeExtractor">An expresion that describes how to interpret the end time for each data value.  Return StreamEvent.InfinitySyncTime to indicate an event with no end time.</param>
            <param name="disorderPolicy">How to handle events that are not in time order.</param>
            <param name="flushPolicy">When to flush batched output events.</param>
            <param name="periodicPunctuationPolicy">Whether to add periodic punctuations to the resulting stream.</param>
            <param name="periodicLowWatermarkPolicy">Whether to add periodic low watermarks to the resulting stream.</param>
            <param name="onCompletedPolicy">How to handle the completion of a stream.</param>
            <param name="identifier">If provided, a unique name to identify to point of ingress in the query.</param>
            <returns>An IStreamable that can be used in queries.</returns>
            <exception cref="T:Microsoft.StreamProcessing.IngressException">
            Throws an exception if the <paramref name="disorderPolicy"/> is to throw and
            an out-of-order stream event is encountered.
            Also, an exception is thrown if any payload is null.
            </exception>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Detect``4(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Afa{``1,``2,``3},System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Detect a pattern over the incoming stream. Takes augmented finite automaton (AFA) as input. Create AFA using the Regex.* API or direct AFA specification.
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TRegister">Result type (output of matcher is the register at an accepting state of the AFA)</typeparam>
            <typeparam name="TAccumulator">Accumulator type</typeparam>
            <param name="source">Source stream</param>
            <param name="afa">AFA specification</param>
            <param name="maxDuration">Maximum duration (window) for the pattern</param>
            <param name="allowOverlappingInstances">States whether to allow more than one state machine instance to be in effect at a time</param>
            <param name="isDeterministic">States whether to consider the AFA as deterministic</param>
            <returns>A stream of the matched results</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Detect``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{``0,``1,Microsoft.StreamProcessing.Empty,System.Boolean},Microsoft.StreamProcessing.IPattern{``0,``1,Microsoft.StreamProcessing.Empty,System.Boolean}},System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Detect a pattern over the incoming stream. Takes augmented regular expression as input. Create AFA using the Regex.* API or direct AFA specification.
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <param name="source">Source stream</param>
            <param name="pattern">Regular expression pattern specification</param>
            <param name="maxDuration">Maximum duration (window) for the pattern</param>
            <param name="allowOverlappingInstances">States whether to allow more than one state machine instance to be in effect at a time</param>
            <param name="isDeterministic">States whether to consider the AFA as deterministic</param>
            <returns>A stream of the matched results</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Detect``3(Microsoft.StreamProcessing.IStreamable{``0,``1},``2,System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{``0,``1,``2,System.Boolean},Microsoft.StreamProcessing.IPattern{``0,``1,``2,System.Boolean}},System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Detect a pattern over the incoming stream. Takes augmented regular expression as input. Create AFA using the Regex.* API or direct AFA specification.
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TRegister">Result type (output of matcher is the register at an accepting state of the AFA)</typeparam>
            <param name="source">Source stream</param>
            <param name="defaultRegister">Default register value for the automata</param>
            <param name="pattern">Regular expression pattern specification</param>
            <param name="maxDuration">Maximum duration (window) for the pattern</param>
            <param name="allowOverlappingInstances">States whether to allow more than one state machine instance to be in effect at a time</param>
            <param name="isDeterministic">States whether to consider the AFA as deterministic</param>
            <returns>A stream of the matched results</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Detect``4(Microsoft.StreamProcessing.IStreamable{``0,``1},``2,``3,System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{``0,``1,``2,``3},Microsoft.StreamProcessing.IPattern{``0,``1,``2,``3}},System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Detect a pattern over the incoming stream. Takes augmented regular expression as input. Create AFA using the Regex.* API or direct AFA specification.
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TRegister">Result type (output of matcher is the register at an accepting state of the AFA)</typeparam>
            <typeparam name="TAccumulator">Accumulator type</typeparam>
            <param name="source">Source stream</param>
            <param name="defaultRegister">Default register value for the automata</param>
            <param name="defaultAccumulator">Default accumulator value for the automata</param>
            <param name="pattern">Regular expression pattern specification</param>
            <param name="maxDuration">Maximum duration (window) for the pattern</param>
            <param name="allowOverlappingInstances">States whether to allow more than one state machine instance to be in effect at a time</param>
            <param name="isDeterministic">States whether to consider the AFA as deterministic</param>
            <returns>A stream of the matched results</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.DefinePattern``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Define a pattern against which data in the input stream may be matched
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <param name="source">Input stream over which to define a pattern</param>
            <returns>The beginning of a builder from which a pattern may be defined</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.DefinePattern``3(Microsoft.StreamProcessing.IStreamable{``0,``1},``2)">
            <summary>
            Define a pattern against which data in the input stream may be matched
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TRegister">Result type (output of matcher is the register at an accepting state of the AFA)</typeparam>
            <param name="source">Source stream</param>
            <param name="defaultRegister">Default register value for the automata</param>
            <returns>The beginning of a builder from which a pattern may be defined</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.DefinePattern``4(Microsoft.StreamProcessing.IStreamable{``0,``1},``2,``3)">
            <summary>
            Define a pattern against which data in the input stream may be matched
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TRegister">Result type (output of matcher is the register at an accepting state of the AFA)</typeparam>
            <typeparam name="TAccumulator">Accumulator type</typeparam>
            <param name="source">Source stream</param>
            <param name="defaultRegister">Default register value for the automata</param>
            <param name="defaultAccumulator">Default accumulator value for the automata</param>
            <returns>The beginning of a builder from which a pattern may be defined</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AnyElement``3(Microsoft.StreamProcessing.IAbstractPatternRoot{``0,``1,``2,System.Boolean},System.Linq.Expressions.Expression{System.Func{System.Int64,``1,``2,System.Boolean}})">
            <summary>
            Add to the current pattern a new pattern symbol that matches any element
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TRegister">Result type (output of matcher is the register at an accepting state of the AFA)</typeparam>
            <param name="source">Input pattern</param>
            <param name="fence">Condition that must be true for the transition to occur</param>
            <returns>The newly constructed pattern</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AnyElement``4(Microsoft.StreamProcessing.IAbstractPatternRoot{``0,``1,``2,``3},System.Linq.Expressions.Expression{System.Func{``3}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,``1,``2,System.Boolean}})">
            <summary>
            Add to the current pattern a new pattern symbol that matches any element
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TRegister">Result type (output of matcher is the register at an accepting state of the AFA)</typeparam>
            <typeparam name="TAccumulator">Accumulator type</typeparam>
            <param name="source">Input pattern</param>
            <param name="accumulatorInitialization">Initializer function for the accumulator</param>
            <param name="accumulatorBoolField"></param>
            <param name="fence">Condition that must be true for the transition to occur</param>
            <returns>The newly constructed pattern</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AllElement``3(Microsoft.StreamProcessing.IAbstractPatternRoot{``0,``1,``2,System.Boolean},System.Linq.Expressions.Expression{System.Func{System.Int64,``1,``2,System.Boolean}})">
            <summary>
            Add to the current pattern a new pattern symbol that matches all elements
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TRegister">Result type (output of matcher is the register at an accepting state of the AFA)</typeparam>
            <param name="source">Input pattern</param>
            <param name="fence">Condition that must be true for the transition to occur</param>
            <returns>The newly constructed pattern</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AllElement``4(Microsoft.StreamProcessing.IAbstractPatternRoot{``0,``1,``2,``3},System.Linq.Expressions.Expression{System.Func{``3}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,``1,``2,System.Boolean}})">
            <summary>
            Add to the current pattern a new pattern symbol that matches all elements
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TRegister">Result type (output of matcher is the register at an accepting state of the AFA)</typeparam>
            <typeparam name="TAccumulator">Accumulator type</typeparam>
            <param name="source">Input pattern</param>
            <param name="accumulatorInitialization">Initializer function for the accumulator</param>
            <param name="accumulatorBoolField"></param>
            <param name="fence">Condition that must be true for the transition to occur</param>
            <returns>The newly constructed pattern</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``6(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``5}})">
            <summary>
            Groups input events by a key selector and applies an aggregate on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``6(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``5}})">
            <summary>
            Groups input events by a key selector and applies an aggregate on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``8(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``7}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``8(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``7}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``10(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``9}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``10(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``9}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``12(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``11}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``12(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``11}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``14(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``13}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``14(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``13}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``16(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``15}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``16(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``15}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``18(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``17}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``18(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``17}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="aggregate7">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``20(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``19}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``20(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``19}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="aggregate7">A concrete reference to an aggregate operator.</param>
            <param name="aggregate8">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``22(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``21}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``22(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``21}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="aggregate7">A concrete reference to an aggregate operator.</param>
            <param name="aggregate8">A concrete reference to an aggregate operator.</param>
            <param name="aggregate9">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``24(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``23}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``24(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``23}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="aggregate7">A concrete reference to an aggregate operator.</param>
            <param name="aggregate8">A concrete reference to an aggregate operator.</param>
            <param name="aggregate9">A concrete reference to an aggregate operator.</param>
            <param name="aggregate10">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``26(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``25}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``26(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``25}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="aggregate7">A concrete reference to an aggregate operator.</param>
            <param name="aggregate8">A concrete reference to an aggregate operator.</param>
            <param name="aggregate9">A concrete reference to an aggregate operator.</param>
            <param name="aggregate10">A concrete reference to an aggregate operator.</param>
            <param name="aggregate11">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``28(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``25,``26}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``27}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate12">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``28(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``25,``26},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``27}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="aggregate7">A concrete reference to an aggregate operator.</param>
            <param name="aggregate8">A concrete reference to an aggregate operator.</param>
            <param name="aggregate9">A concrete reference to an aggregate operator.</param>
            <param name="aggregate10">A concrete reference to an aggregate operator.</param>
            <param name="aggregate11">A concrete reference to an aggregate operator.</param>
            <param name="aggregate12">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``30(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``25,``26}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``27,``28}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``28,``29}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TState13">The type of the state object maintained by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput13">The type of the results generated by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate12">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate13">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``30(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``25,``26},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``27,``28},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``28,``29}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TState13">The type of the state object maintained by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput13">The type of the results generated by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="aggregate7">A concrete reference to an aggregate operator.</param>
            <param name="aggregate8">A concrete reference to an aggregate operator.</param>
            <param name="aggregate9">A concrete reference to an aggregate operator.</param>
            <param name="aggregate10">A concrete reference to an aggregate operator.</param>
            <param name="aggregate11">A concrete reference to an aggregate operator.</param>
            <param name="aggregate12">A concrete reference to an aggregate operator.</param>
            <param name="aggregate13">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``32(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``25,``26}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``27,``28}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``29,``30}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``28,``30,``31}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TState13">The type of the state object maintained by the aggregate operation in position 13.</typeparam>
            <typeparam name="TState14">The type of the state object maintained by the aggregate operation in position 14.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput13">The type of the results generated by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput14">The type of the results generated by the aggregate operation in position 14.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate12">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate13">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate14">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``32(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``25,``26},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``27,``28},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``29,``30},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``28,``30,``31}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TState13">The type of the state object maintained by the aggregate operation in position 13.</typeparam>
            <typeparam name="TState14">The type of the state object maintained by the aggregate operation in position 14.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput13">The type of the results generated by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput14">The type of the results generated by the aggregate operation in position 14.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="aggregate7">A concrete reference to an aggregate operator.</param>
            <param name="aggregate8">A concrete reference to an aggregate operator.</param>
            <param name="aggregate9">A concrete reference to an aggregate operator.</param>
            <param name="aggregate10">A concrete reference to an aggregate operator.</param>
            <param name="aggregate11">A concrete reference to an aggregate operator.</param>
            <param name="aggregate12">A concrete reference to an aggregate operator.</param>
            <param name="aggregate13">A concrete reference to an aggregate operator.</param>
            <param name="aggregate14">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``34(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``25,``26}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``27,``28}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``29,``30}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``31,``32}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``28,``30,``32,``33}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TState13">The type of the state object maintained by the aggregate operation in position 13.</typeparam>
            <typeparam name="TState14">The type of the state object maintained by the aggregate operation in position 14.</typeparam>
            <typeparam name="TState15">The type of the state object maintained by the aggregate operation in position 15.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput13">The type of the results generated by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput14">The type of the results generated by the aggregate operation in position 14.</typeparam>
            <typeparam name="TOutput15">The type of the results generated by the aggregate operation in position 15.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate12">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate13">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate14">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate15">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupAggregate``34(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``3,``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``5,``6},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``7,``8},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``9,``10},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``11,``12},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``13,``14},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``15,``16},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``17,``18},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``19,``20},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``21,``22},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``23,``24},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``25,``26},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``27,``28},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``29,``30},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``31,``32},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``4,``6,``8,``10,``12,``14,``16,``18,``20,``22,``24,``26,``28,``30,``32,``33}})">
            <summary>
            Groups input events by a key selector and applies multiple aggregates on each group.
            </summary>
            <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
            <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TState13">The type of the state object maintained by the aggregate operation in position 13.</typeparam>
            <typeparam name="TState14">The type of the state object maintained by the aggregate operation in position 14.</typeparam>
            <typeparam name="TState15">The type of the state object maintained by the aggregate operation in position 15.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput13">The type of the results generated by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput14">The type of the results generated by the aggregate operation in position 14.</typeparam>
            <typeparam name="TOutput15">The type of the results generated by the aggregate operation in position 15.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
            <param name="aggregate1">A concrete reference to an aggregate operator.</param>
            <param name="aggregate2">A concrete reference to an aggregate operator.</param>
            <param name="aggregate3">A concrete reference to an aggregate operator.</param>
            <param name="aggregate4">A concrete reference to an aggregate operator.</param>
            <param name="aggregate5">A concrete reference to an aggregate operator.</param>
            <param name="aggregate6">A concrete reference to an aggregate operator.</param>
            <param name="aggregate7">A concrete reference to an aggregate operator.</param>
            <param name="aggregate8">A concrete reference to an aggregate operator.</param>
            <param name="aggregate9">A concrete reference to an aggregate operator.</param>
            <param name="aggregate10">A concrete reference to an aggregate operator.</param>
            <param name="aggregate11">A concrete reference to an aggregate operator.</param>
            <param name="aggregate12">A concrete reference to an aggregate operator.</param>
            <param name="aggregate13">A concrete reference to an aggregate operator.</param>
            <param name="aggregate14">A concrete reference to an aggregate operator.</param>
            <param name="aggregate15">A concrete reference to an aggregate operator.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.TumblingWindowLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64,System.Int64)">
            <summary>
            Adjusts the lifetime of incoming events to implement, when used in combination with aggregates, tumbling windows. In this implementation each incoming
            event results in a single outgoing event, which means that subsequent aggregates only produce output when the input changes. For instance, if a single
            point event is received and the tumbleDuration and offset are 100 and 0 respectively, a single aggregate output is produced with a lifetime of
            100 ticks.
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TPayload">Type of payload in the stream</typeparam>
            <param name="source">Input stream</param>
            <param name="tumbleDuration">Duration of the tumble</param>
            <param name="offset">Offset from the start of time</param>
            <returns>Result (output) stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.HoppingWindowLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64,System.Int64,System.Int64)">
            <summary>
            Adjusts the lifetime of incoming events to implement, when used in combination with aggregates, hopping windows. In this implementation each incoming
            event results in a single outgoing event, which means that subsequent aggregates only produce output when the input changes. For instance, if a single
            point event is received and the windowSize, period, and offset are 100, 2, and 0 respectively, a single aggregate output is produced with a lifetime of
            100 ticks.
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TPayload">Type of payload in the stream</typeparam>
            <param name="source">Input stream</param>
            <param name="windowSize">Window size</param>
            <param name="period">Period (or hop size)</param>
            <param name="offset">Offset from the start of time</param>
            <returns>Result (output) stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.QuantizeLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64,System.Int64,System.Int64)">
            <summary>
            Adjusts the lifetime of incoming events to snap the start and end time of each event to quantized boundaries.
            The function is similar to a hopping lifetime expression, except that all start edges are either moved
            earlier or stay the same, and all end edges either move later or stay the same.
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TPayload">Type of payload in the stream</typeparam>
            <param name="source">Input stream</param>
            <param name="windowSize">Window size</param>
            <param name="period">Period (or hop size)</param>
            <param name="offset">Offset from the start of time</param>
            <returns>Result (output) stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ProgressiveQuantizeLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Adjusts the lifetime of incoming events to snap the start and end time of each event to quantized boundaries,
            except that the start times are progressively spaced through the window.
            The function is similar to a hopping lifetime expression, except that all start edges are either moved
            earlier or stay the same, and all end edges either move later or stay the same.
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TPayload">Type of payload in the stream</typeparam>
            <param name="source">Input stream</param>
            <param name="windowSize">Window size</param>
            <param name="period">Period (or hop size)</param>
            <param name="progress">Interval at which progressive results within a window are requested</param>
            <param name="offset">Offset from the start of time</param>
            <returns>Result (output) stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RepetitiveHoppingWindowLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64,System.Int64,System.Int64)">
            <summary>
            Adjusts the lifetime of incoming events to implement, when used in combination with aggregates, repetitive hopping windows. In this implementation each
            incoming event results in an arbitrary number of outgoing events. For instance, if a single point event is received and the windowSize, period, and
            offset are 100, 2, and 0 respectively, 50 identical aggregate outputs are produced, each with a lifetime of 2 ticks.
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TPayload">Type of payload in the stream</typeparam>
            <param name="source">Input stream</param>
            <param name="windowSize">Window size</param>
            <param name="period">Period (or hop size)</param>
            <param name="offset">Offset from the start of time</param>
            <returns>The result (output) stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SessionTimeoutWindow``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64,System.Int64)">
            <summary>
            The window type implements sessions with timeout in Trill. The current window is extended as long as new events
            arrive within a specified timeout period. Once a timeout period elapses with no data (for a given grouping key),
            the window is closed.
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TPayload">Type of payload in the stream</typeparam>
            <param name="source">Input stream</param>
            <param name="timeout">Timeout for closing the current session</param>
            <param name="maxDuration">The max duration of a session timeout window</param>
            <returns>Result (output) stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AlterEventDuration``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64}})">
            <summary>
            Changes the Ve of each event according to the durationSelector, which is a function of start time
            </summary>
            <param name="source">Source stream</param>
            <param name="durationSelector">Function which recomputes the event duration</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AlterEventDuration``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64,System.Int64}})">
            <summary>
            Changes the Ve of each event according to the durationSelector, which is a function of start and end times
            </summary>
            <param name="source">Source stream</param>
            <param name="durationSelector">Function which recomputes the event duration</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AlterEventDuration``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64)">
            <summary>
            Changes the Ve of each event according to the duration provided
            </summary>
            <param name="source">Source stream</param>
            <param name="duration"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ShiftEventLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64}})">
            <summary>
            Shifts the lifetime by the shiftSelector, which is a function of the event start time
            </summary>
            <param name="source">Source stream</param>
            <param name="shiftSelector">Function which computes the amount to shift the Vs by</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ShiftEventLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64)">
            <summary>
            Shifts the lifetime by the specified amount of time
            </summary>
            <param name="source">Source stream</param>
            <param name="shiftAmount">The amount to shift the Vs by</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AlterEventLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64}},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64}})">
            <summary>
            Changes the Vs and Ve of each event according to the startTimeSelector, and the durationSelector, which is a function of start time
            </summary>
            <param name="source">Source stream</param>
            <param name="startTimeSelector">Function which recomputes the event start time</param>
            <param name="durationSelector">Function which recomputes the event duration</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AlterEventLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64}},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64,System.Int64}})">
            <summary>
            Changes the Vs and Ve of each event according to the startTimeSelector, and the durationSelector, which is a function of start and end times
            </summary>
            <param name="source">Source stream</param>
            <param name="startTimeSelector">Function which recomputes the event start time</param>
            <param name="durationSelector">Function which recomputes the event duration</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AlterEventLifetime``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,System.Int64}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64,System.Int64,System.Int64}})">
            <summary>
            Changes the Vs and Ve of each event according to the startTimeSelector, and the durationSelector, which is a function of start and end times as well as the partition key
            Note: This overload is primarily for power users and should be used exceedingly sparingly
            </summary>
            <param name="source">Source stream</param>
            <param name="startTimeSelector">Function which recomputes the event start time</param>
            <param name="durationSelector">Function which recomputes the event duration</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AlterEventLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Int64}},System.Int64)">
            <summary>
            Changes the Vs and Ve of each event.
            </summary>
            <typeparam name="TKey">Key type of the stream</typeparam>
            <typeparam name="TPayload">Data type of the stream</typeparam>
            <param name="source">source stream</param>
            <param name="startTimeSelector">Function which recomputes the event start time</param>
            <param name="duration">Amount to alter the durations by</param>
            <returns>The altered stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ClipEventDuration``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64)">
            <summary>
            Passes a truncated version of each event, where the event is truncated by a maximum event length.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.FollowedByImmediate``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,``1,``2}},System.Int64)">
            <summary>
            Finds patterns of A followed immediately by B (with no other intermediate events), occurring within (strictly less than) a given time duration
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TResult">Result type</typeparam>
            <param name="stream">Input stream</param>
            <param name="firstMatch">First element in pattern</param>
            <param name="secondMatch">Second element in pattern</param>
            <param name="resultSelector">Compose result tuple using matching input events</param>
            <param name="withinDuration">Pattern occurs within (strictly less than) given time duration</param>
            <returns>Pattern result stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ConsecutivePairs``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``1,``2}})">
            <summary>
            Finds patterns of events that are repeated consecutively
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type</typeparam>
            <typeparam name="TResult">Result type</typeparam>
            <param name="stream">Input stream</param>
            <param name="resultSelector">Compose result tuple using matching input events</param>
            <returns>Pattern result stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.FollowedByImmediate``4(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,``2,``3}},System.Int64)">
            <summary>
            Finds patterns of A on the left followed immediately by B on the right (with no other intermediate events), occurring within (strictly less than) a given time duration
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TPayload">Payload type for left input</typeparam>
            <typeparam name="TPayload2">Payload type for right input</typeparam>
            <typeparam name="TResult">Result type</typeparam>
            <param name="stream">Left input stream</param>
            <param name="stream2">Right input stream</param>
            <param name="firstMatch">First element in pattern</param>
            <param name="secondMatch">Second element in pattern</param>
            <param name="resultSelector">Compose result tuple using matching input events</param>
            <param name="withinDuration">Pattern occurs within (strictly less than) given time duration</param>
            <returns>Pattern result stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Pivot``7(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``1,System.String}},System.Linq.Expressions.Expression{System.Func{``1,``4}},System.Func{Microsoft.StreamProcessing.Window{Microsoft.StreamProcessing.CompoundGroupKey{``0,``3},``4},Microsoft.StreamProcessing.Aggregates.IAggregate{``4,``6,``5}})">
             <summary>
            
             </summary>
             <typeparam name="TKey"></typeparam>
             <typeparam name="TInput"></typeparam>
             <typeparam name="TOutput"></typeparam>
             <typeparam name="TGroupKey"></typeparam>
             <typeparam name="TValue"></typeparam>
             <typeparam name="TAggValue"></typeparam>
             <typeparam name="TState"></typeparam>
             <param name="inputStreamable"></param>
             <param name="initializer"></param>
             <param name="keySelector"></param>
             <param name="attributeSelector"></param>
             <param name="valueSelector"></param>
             <param name="aggregate"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Unpivot``5(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``4}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``4,System.String}},System.Linq.Expressions.Expression{System.Func{``4,``3}})">
            <summary>
            Rotates a stream of payload objects into a stream of key-attribute-value triples corresponding to the data from the input payloads.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the input streamable.</typeparam>
            <typeparam name="TInput">The type of the payload of the input streamable.</typeparam>
            <typeparam name="TPivotKey">The type of the unpivot key.</typeparam>
            <typeparam name="TValue">The type of the value component of the unpivot operation.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="inputStreamable">The source streamable to unpivot.</param>
            <param name="initializer">A constructor describing how to create output values.</param>
            <param name="keySelector">A selector function returning the unpivot key.</param>
            <param name="attributeSelector">A selector function stating what field in the return type holds desired unpivoted attributes.</param>
            <param name="valueSelector">A selector function stating what field in the return type holds desired unpivoted values.</param>
            <returns>A stream of key-attribute-value triples corresponding to the original data stream.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Select``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Performs a project over a streamable.
            </summary>
            <param name="source">Source streamable for the operation.</param>
            <param name="selector">Expression over Payload that returns the new Payload.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Select``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,``1,``2}})">
            <summary>
            Performs a project over a streamable.
            </summary>
            <param name="source">Source streamable for the operation.</param>
            <param name="selector">Expression over StartTime and Payload that returns the new Payload.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SelectByKey``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Performs a project over a streamable, relative to the grouping key.
            </summary>
            <param name="source">Source streamable for the operation.</param>
            <param name="selector">Expression over Key and Payload, that returns the new Payload.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SelectByKey``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1,``2}})">
            <summary>
            Performs a project over a streamable, relative to the grouping key.
            </summary>
            <param name="source">Source streamable for the operation.</param>
            <param name="selector">Expression over StartTime, Key, and Payload, that returns the new Payload.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Select``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``2}},System.Collections.Generic.IDictionary{System.String,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}})">
             <summary>
            
             </summary>
             <typeparam name="TKey"></typeparam>
             <typeparam name="TOld"></typeparam>
             <typeparam name="TNew"></typeparam>
             <param name="source"></param>
             <param name="initializer"></param>
             <param name="newColumnFormulas"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Select``4(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Linq.Expressions.Expression{System.Func{``1,``3}})">
             <summary>
            
             </summary>
             <typeparam name="TKey"></typeparam>
             <typeparam name="TOld"></typeparam>
             <typeparam name="TNew"></typeparam>
             <typeparam name="TField1"></typeparam>
             <param name="source"></param>
             <param name="initializer"></param>
             <param name="fieldSelector1"></param>
             <param name="fieldInitializer1"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Select``5(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``4}},System.Linq.Expressions.Expression{System.Func{``1,``4}})">
             <summary>
            
             </summary>
             <typeparam name="TKey"></typeparam>
             <typeparam name="TOld"></typeparam>
             <typeparam name="TNew"></typeparam>
             <typeparam name="TField1"></typeparam>
             <typeparam name="TField2"></typeparam>
             <param name="source"></param>
             <param name="initializer"></param>
             <param name="fieldSelector1"></param>
             <param name="fieldInitializer1"></param>
             <param name="fieldSelector2"></param>
             <param name="fieldInitializer2"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ToEndEdgeFreeStream``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Converts a stream into an interval-only stream (devoid of end edges).
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.PointAtEnd``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Create a stream that reports all deaccumulations as an insert-only point stream (converts all events into point events at end).
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ExtendLifetime``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64)">
            <summary>
            Create a stream that extends all event lifetimes by a fixed amount.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Publish``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Performs dynamic version of multicast over a streamable. This allows query writers to execute
            multiple subqueries over the same physical input stream - streams can be added or removed. It is
            up to the user to ensure that the stream has no end edges, otherwise a dynamically subscribed subscriber may
            receive a malformed stream (end edge without corresponding start edge).
            Usage: stream.Publish(); stream.Subscribe(...); stream.Connect(); stream.Subscribe(...);
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Multicast``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2}})">
            <summary>
            Performs multicast over a streamable. This allows query writers to execute multiple subqueries over the same physical input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Multicast``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int32)">
            <summary>
            Performs multicast over a streamable. This allows query writers to execute multiple subqueries over the same physical input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Multicast``4(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Func{Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},Microsoft.StreamProcessing.IStreamable{``0,``3}})">
            <summary>
            Performs multicast over a streamable. This allows query writers to execute multiple subqueries over the same physical input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ColumnToRow``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Converts a stream of columnar batches into a stream of row oriented batches.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.RowToColumn``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Converts a stream of row oriented batches into a stream of columnar batches
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Where``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            Performs a filter over a streamable, excluding rows for which the predicate evaluates to false.
            </summary>
            <param name="source">The input stream to filter</param>
            <param name="predicate">The predicate to apply to all data in the stream</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Chop``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int64,System.Int64)">
            <summary>
            Performs the 'Chop' operator to chop (partition) long-lasting intervals and edges across beat boundaries.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SelectMany``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2}}})">
            <summary>
            This select many is used for generating many payloads out of one
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SelectMany``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,``1,System.Collections.Generic.IEnumerable{``2}}})">
            <summary>
            This select many is used for generating many payloads out of one
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SelectManyByKey``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}}})">
            <summary>
            This select many is used for generating many payloads out of one
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SelectManyByKey``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1,System.Collections.Generic.IEnumerable{``2}}})">
            <summary>
            This select many is used for generating many payloads out of one
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SelectMany``4(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Empty,Microsoft.StreamProcessing.IStreamable{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2,``3}})">
            <summary>
            This select many is used for joins derived from the comprehension syntax as well as non-empty reducers in Group and Apply
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Stitch``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Stitch is the reverse of the 'Chop' operator: when it finds an END payload and a BEGIN payload at the same
            time, it removes both from the stream. The net effect is that if a value in a signal doesn't change, then the
            stream won't have new events. This is mostly useful for human eyes; mathemtically, the two should be identical
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Union``2(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Union is a temporal union that combines two streams of like schema
            </summary>
            <param name="left">Left source streamable for the operation.</param>
            <param name="right">Right source streamable for the operation.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Join``5(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Linq.Expressions.Expression{System.Func{``1,``2,``4}})">
            <summary>
            Performs an equijoin between 2 streams where the join key is of type TJoinKey and selectors are passed to extract
            join keys from payloads
            </summary>
            <typeparam name="TKey">The key type for the inputs.</typeparam>
            <typeparam name="TLeft">The type of the left input.</typeparam>
            <typeparam name="TRight">The type of the right input.</typeparam>
            <typeparam name="TJoinKey">The type of the join condition.</typeparam>
            <typeparam name="TResult">The type of the output of the join.</typeparam>
            <param name="left">The left input to the join operation.</param>
            <param name="right">The right input to the join operation.</param>
            <param name="leftKeySelector">An expression that specifies the left half of the join condition.</param>
            <param name="rightKeySelector">An expression that specifies the right half of the join condition.</param>
            <param name="resultSelector">An expression that describes how to create result instances.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Join``5(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Linq.Expressions.Expression{System.Func{``1,``2,``4}},Microsoft.StreamProcessing.OperationalHint)">
            <summary>
            Performs an equijoin between 2 streams where the join key is of type TJoinKey and selectors are passed to extract
            join keys from payloads
            </summary>
            <typeparam name="TKey">The key type for the inputs.</typeparam>
            <typeparam name="TLeft">The type of the left input.</typeparam>
            <typeparam name="TRight">The type of the right input.</typeparam>
            <typeparam name="TJoinKey">The type of the join condition.</typeparam>
            <typeparam name="TResult">The type of the output of the join.</typeparam>
            <param name="left">The left input to the join operation.</param>
            <param name="right">The right input to the join operation.</param>
            <param name="leftKeySelector">An expression that specifies the left half of the join condition.</param>
            <param name="rightKeySelector">An expression that specifies the right half of the join condition.</param>
            <param name="resultSelector">An expression that describes how to create result instances.</param>
            <param name="joinOptions">Additional parameter that specifies more information about the join.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Join``4(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``2,``3}})">
            <summary>
            Performs a cross-product between 2 streams
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.WhereNotExists``4(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``3}})">
            <summary>
            Performs a left anti-semi join using the passed in predicate as the join condition.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.WhereNotExists``3(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2})">
            <summary>
            Performs a left anti-semi join without any join condition (join condition is true).
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ClipEventDuration``3(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2})">
            <summary>
            Passes a truncated version of each event on the left, where the left event is truncated by the first event on the right
            whose Vs occurs after the event on the left. There is no restriction on join condition.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ClipEventDuration``4(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``3}})">
            <summary>
            Passes a truncated version of each event on the left, where the left event is truncated by the first event on the right
            whose Vs occurs after the event on the left, whose join condition is met, and where the keys for both streams match. A
            fast join key comparer is passed in for efficiency.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupApply``5(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``3}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``2},``3,``4}})">
            <summary>
            Performs a group and apply operation on the stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupApply``4(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``1},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``2},``3}})">
            <summary>
            Performs a group and apply operation on the stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.GroupBy``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Needed to make the comprehension syntax happy. Consider using GroupApply instead.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SelectMany``6(Microsoft.StreamProcessing.IMapDefinition{``0,``2,``2,``1,``3},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``1},``3},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``1},``4}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``1},``4,``5}})">
            <summary>
            This is here to make the comprehension syntax happy. Consider using GroupApply instead.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Partition``2(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``1},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Int64)">
            <summary>
            Takes a single stream and breaks it into a partitioned stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Map``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2}})">
            <summary>
            The Map phase of a single input map-only operation. Allows the specification of streaming logic on the mapper.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Map``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            The Map phase of a single input map operation.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Map``4(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``3}},System.Linq.Expressions.Expression{System.Func{``3,``2}})">
            <summary>
            The Map phase of a single input map/reduce operation. Allows the specification of streaming logic on the mapper,
            and a key selector for the next (reduce) stage.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Reduce``5(Microsoft.StreamProcessing.IMapDefinition{``0,``1,``2,``3,``4})">
            <summary>
            Empty reducer. Follows a map operator in situations where the mapper is being used to parallelize a stateless query. It simply unmaps the input
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Reduce``7(Microsoft.StreamProcessing.IMapDefinition{``0,``1,``2,``3,``4},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``3},``4},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``3},``5}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``3},``5,``6}})">
            <summary>
            Single-input reducer. Takes a mapped stream and applies a stream valued function (reducer) to each of the partitions. The result selector allows the
            reintroduction of the grouping key to the output in case it has been lost in the apply function.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Reduce``10(Microsoft.StreamProcessing.IMapDefinition{``0,``1,``2,``5,``6},Microsoft.StreamProcessing.IMapDefinition{``0,``3,``4,``5,``7},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``5},``6},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``5},``7},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``5},``8}},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.GroupSelectorInput{``5},``8,``9}},Microsoft.StreamProcessing.OperationalHint)">
            <summary>
            Two-input reducer. This reducer takes the result of 2 map operators (one can be implicit by using . ) and applies a 2 input stream valued function (reducer) to each
            partitioned stream pair. Note that the two mapped input stream must have the same mapping type. The result selector allows the
            reintroduction of the grouping key to the output in case it has been lost in the apply function.
            Additional parameter allows specifying whether reduce is asymmetric (multicast left side, spray right side)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Count``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Computes a time-sensitive count aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.CountNotNull``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Computes a time-sensitive count aggregate of the non-null values using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Min``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Computes a time-sensitive minimum aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Min``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Computes a time-sensitive minimum aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Min``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Comparison{``1}})">
            <summary>
            Computes a time-sensitive minimum aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Min``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Comparison{``2}})">
            <summary>
            Computes a time-sensitive minimum aggregate using snapshot semantics with the provided ordering comparer.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Max``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Computes a time-sensitive maximum aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Max``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Computes a time-sensitive maximum aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Max``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Comparison{``1}})">
            <summary>
            Computes a time-sensitive maximum aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Max``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Comparison{``2}})">
            <summary>
            Computes a time-sensitive maximum aggregate using snapshot semantics with the provided ordering comparer.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.TopK``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Int32)">
            <summary>
            Computes a time-sensitive top-k aggregate using snapshot semantics based on a key selector.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.TopK``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Int32)">
            <summary>
            Computes a time-sensitive top-k aggregate using snapshot semantics based on a key selector.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.TopK``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Comparison{``1}},System.Int32)">
            <summary>
            Computes a time-sensitive top-k aggregate using snapshot semantics based on a key selector.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.TopK``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Comparison{``2}},System.Int32)">
            <summary>
            Computes a time-sensitive top-k aggregate using snapshot semantics based on a key selector with the provided ordering comparer.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``4(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}})">
            <summary>
            Applies an aggregate to snapshot windows on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``5(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Window{``0,``2},Microsoft.StreamProcessing.Aggregates.IBinaryAggregate{``1,``2,``3,``4}})">
            <summary>
            Applies an aggregate to snapshot windows on the two merged input streams.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``4(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3})">
            <summary>
            Applies an aggregate to snapshot windows on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``5(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},Microsoft.StreamProcessing.Aggregates.IBinaryAggregate{``1,``2,``3,``4})">
            <summary>
            Applies an aggregate to snapshot windows on the two merged input streams.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.LeftOuterJoin``5(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Linq.Expressions.Expression{System.Func{``1,``4}},System.Linq.Expressions.Expression{System.Func{``1,``2,``4}})">
            <summary>
            Macro to perform a left-outer-join operation.
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TLeft">Type of left input payload in the stream</typeparam>
            <typeparam name="TRight">Type of right input payload in the stream</typeparam>
            <typeparam name="TJoinKey">Type of join key for the join</typeparam>
            <typeparam name="TResult">Type of result payload in the stream</typeparam>
            <param name="left">Left input stream</param>
            <param name="right">Right input stream</param>
            <param name="leftKeySelector">Selector for the left-side join key</param>
            <param name="rightKeySelector">Selector for the right-side join key</param>
            <param name="outerResultSelector">Selector for the result for non-joining tuples</param>
            <param name="innerResultSelector">Selector for the result for joining tuples</param>
            <returns>Result (output) stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.FullOuterJoin``5(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Linq.Expressions.Expression{System.Func{``1,``4}},System.Linq.Expressions.Expression{System.Func{``2,``4}},System.Linq.Expressions.Expression{System.Func{``1,``2,``4}})">
            <summary>
            Macro to perform a full-outer-join operation.
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TLeft">Type of left input payload in the stream</typeparam>
            <typeparam name="TRight">Type of right input payload in the stream</typeparam>
            <typeparam name="TJoinKey">Type of join key for the join</typeparam>
            <typeparam name="TResult">Type of result payload in the stream</typeparam>
            <param name="left">Left input stream</param>
            <param name="right">Right input stream</param>
            <param name="leftKeySelector">Selector for the left-side join key</param>
            <param name="rightKeySelector">Selector for the right-side join key</param>
            <param name="leftResultSelector">Selector for the result for the left non-joining tuples</param>
            <param name="rightResultSelector">Selector for the result for the right non-joining tuples</param>
            <param name="innerResultSelector">Selector for the result for joining tuples</param>
            <returns>Result (output) stream</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.WhereNotExists``4(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Linq.Expressions.Expression{System.Func{``1,``2,System.Boolean}})">
             <summary>
            
             </summary>
             <typeparam name="TKey"></typeparam>
             <typeparam name="TLeft"></typeparam>
             <typeparam name="TRight"></typeparam>
             <typeparam name="TJoinKey"></typeparam>
             <param name="left"></param>
             <param name="right"></param>
             <param name="leftKeySelector"></param>
             <param name="rightKeySelector"></param>
             <param name="postPredicate"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.LeftOuterJoin``5(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Linq.Expressions.Expression{System.Func{``1,``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,``4}},System.Linq.Expressions.Expression{System.Func{``1,``2,``4}})">
             <summary>
            
             </summary>
             <typeparam name="TKey"></typeparam>
             <typeparam name="TLeft"></typeparam>
             <typeparam name="TRight"></typeparam>
             <typeparam name="TJoinKey"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="left"></param>
             <param name="right"></param>
             <param name="leftKeySelector"></param>
             <param name="rightKeySelector"></param>
             <param name="postPredicate"></param>
             <param name="outerResultSelector"></param>
             <param name="innerResultSelector"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sessionize``4(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``1,``3}})">
            <summary>
            Convert a stream of start and end sessions to a single per-session stream, where we care about the data in
            the end session. Sessions are output as point events at the timestamp of the end session.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TSessionKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="sessionStream"></param>
            <param name="sessionStartSelector"></param>
            <param name="sessionEndSelector"></param>
            <param name="sessionKey"></param>
            <param name="sessionResultSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Distinct``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Filter out any duplicate entries at each snapshot
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TPayload">Type of result stream</typeparam>
            <param name="source"></param>
            <returns>A stream where all elements within each timestamp have only distinct payloads returned</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Distinct``3(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Removes partial duplicates per timestamp.
            If two events match by the given expression and their timestamps, they are considered duplicates.
            </summary>
            <typeparam name="TKey">Type of (mapping) key in the stream</typeparam>
            <typeparam name="TInput">Type of input stream</typeparam>
            <typeparam name="TResult">Type of result stream</typeparam>
            <param name="source">Input stream.</param>
            <param name="selector">Expression that defines when two events are considered duplicates.
            If the expression evaluates to different values for two events, they are considered to be distinct.</param>
            <returns>For each distinct input timestamp, one result event with a payload based on the given expression.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.ScaledOutCount``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            following are internal for now *
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.SByte}})">
            <summary>
            Computes a time-sensitive sum aggregate over sbytes using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Byte}})">
            <summary>
            Computes a time-sensitive sum aggregate over bytes using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int16}})">
            <summary>
            Computes a time-sensitive sum aggregate over shorts using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt16}})">
            <summary>
            Computes a time-sensitive sum aggregate over ushorts using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int32}})">
            <summary>
            Computes a time-sensitive sum aggregate over ints using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt32}})">
            <summary>
            Computes a time-sensitive sum aggregate over uints using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}})">
            <summary>
            Computes a time-sensitive sum aggregate over longs using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt64}})">
            <summary>
            Computes a time-sensitive sum aggregate over ulongs using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Single}})">
            <summary>
            Computes a time-sensitive sum aggregate over floats using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Double}})">
            <summary>
            Computes a time-sensitive sum aggregate over doubles using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Decimal}})">
            <summary>
            Computes a time-sensitive sum aggregate over decimals using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive sum aggregate over BigIntegers using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive sum aggregate over Complexs using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable sbytes using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable bytes using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable shorts using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable ushorts using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable ints using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable uints using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable longs using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable ulongs using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable floats using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable doubles using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable decimals using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable BigIntegers using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Sum``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable Complexs using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.SByte}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over sbytes using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Byte}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over bytes using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int16}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over shorts using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt16}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over ushorts using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int32}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over ints using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt32}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over uints using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over longs using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt64}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over ulongs using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Single}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over floats using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Double}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over doubles using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Decimal}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over decimals using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over BigIntegers using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over Complexs using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable sbytes using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable bytes using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable shorts using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable ushorts using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable ints using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable uints using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable longs using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable ulongs using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable floats using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable doubles using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable decimals using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable BigIntegers using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.SumSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive sum of squares aggregate over nullable Complexs using snapshot semantics.
            Note that nulls have no affect on the sum.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a sum of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares summed acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.SByte}})">
            <summary>
            Computes a time-sensitive product aggregate over sbytes using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Byte}})">
            <summary>
            Computes a time-sensitive product aggregate over bytes using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int16}})">
            <summary>
            Computes a time-sensitive product aggregate over shorts using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt16}})">
            <summary>
            Computes a time-sensitive product aggregate over ushorts using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int32}})">
            <summary>
            Computes a time-sensitive product aggregate over ints using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt32}})">
            <summary>
            Computes a time-sensitive product aggregate over uints using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}})">
            <summary>
            Computes a time-sensitive product aggregate over longs using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt64}})">
            <summary>
            Computes a time-sensitive product aggregate over ulongs using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Single}})">
            <summary>
            Computes a time-sensitive product aggregate over floats using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Double}})">
            <summary>
            Computes a time-sensitive product aggregate over doubles using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Decimal}})">
            <summary>
            Computes a time-sensitive product aggregate over decimals using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive product aggregate over BigIntegers using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive product aggregate over Complexs using snapshot semantics.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable sbytes using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable bytes using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable shorts using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable ushorts using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable ints using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable uints using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable longs using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable ulongs using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable floats using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable doubles using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable decimals using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable BigIntegers using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Product``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive product aggregate over nullable Complexs using snapshot semantics.
            Note that nulls have no affect on the product.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute a product to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been multiplied acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.SByte}})">
            <summary>
            Computes a time-sensitive average aggregate over sbytes using snapshot semantics.
            Note that the accumulator internally is a long datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int16}})">
            <summary>
            Computes a time-sensitive average aggregate over shorts using snapshot semantics.
            Note that the accumulator internally is a long datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int32}})">
            <summary>
            Computes a time-sensitive average aggregate over ints using snapshot semantics.
            Note that the accumulator internally is a long datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}})">
            <summary>
            Computes a time-sensitive average aggregate over longs using snapshot semantics.
            Note that the accumulator internally is a long datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Byte}})">
            <summary>
            Computes a time-sensitive average aggregate over bytes using snapshot semantics.
            Note that the accumulator internally is a ulong datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt16}})">
            <summary>
            Computes a time-sensitive average aggregate over ushorts using snapshot semantics.
            Note that the accumulator internally is a ulong datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt32}})">
            <summary>
            Computes a time-sensitive average aggregate over uints using snapshot semantics.
            Note that the accumulator internally is a ulong datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt64}})">
            <summary>
            Computes a time-sensitive average aggregate over ulongs using snapshot semantics.
            Note that the accumulator internally is a ulong datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Single}})">
            <summary>
            Computes a time-sensitive average aggregate over floats using snapshot semantics.
            Note that the accumulator internally is a float datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Double}})">
            <summary>
            Computes a time-sensitive average aggregate over doubles using snapshot semantics.
            Note that the accumulator internally is a double datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Decimal}})">
            <summary>
            Computes a time-sensitive average aggregate over decimals using snapshot semantics.
            Note that the accumulator internally is a decimal datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive average aggregate over BigIntegers using snapshot semantics.
            Note that the accumulator internally is a BigInteger datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive average aggregate over Complexs using snapshot semantics.
            Note that the accumulator internally is a Complex datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable sbytes using snapshot semantics.
            Note that the accumulator internally is a long datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable shorts using snapshot semantics.
            Note that the accumulator internally is a long datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable ints using snapshot semantics.
            Note that the accumulator internally is a long datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable longs using snapshot semantics.
            Note that the accumulator internally is a long datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable bytes using snapshot semantics.
            Note that the accumulator internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable ushorts using snapshot semantics.
            Note that the accumulator internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable uints using snapshot semantics.
            Note that the accumulator internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable ulongs using snapshot semantics.
            Note that the accumulator internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable floats using snapshot semantics.
            Note that the accumulator internally is a float datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable doubles using snapshot semantics.
            Note that the accumulator internally is a double datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable decimals using snapshot semantics.
            Note that the accumulator internally is a decimal datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable BigIntegers using snapshot semantics.
            Note that the accumulator internally is a BigInteger datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Average``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable Complexs using snapshot semantics.
            Note that the accumulator internally is a Complex datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have been averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.SByte}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over sbytes using snapshot semantics.
            Note that the accumulator internally is a long datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int16}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over shorts using snapshot semantics.
            Note that the accumulator internally is a long datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int32}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over ints using snapshot semantics.
            Note that the accumulator internally is a long datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Int64}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over longs using snapshot semantics.
            Note that the accumulator internally is a long datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Byte}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over bytes using snapshot semantics.
            Note that the accumulator internally is a ulong datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt16}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over ushorts using snapshot semantics.
            Note that the accumulator internally is a ulong datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt32}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over uints using snapshot semantics.
            Note that the accumulator internally is a ulong datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.UInt64}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over ulongs using snapshot semantics.
            Note that the accumulator internally is a ulong datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Single}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over floats using snapshot semantics.
            Note that the accumulator internally is a float datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Double}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over doubles using snapshot semantics.
            Note that the accumulator internally is a double datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Decimal}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over decimals using snapshot semantics.
            Note that the accumulator internally is a decimal datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over BigIntegers using snapshot semantics.
            Note that the accumulator internally is a BigInteger datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over Complexs using snapshot semantics.
            Note that the accumulator internally is a Complex datatype.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable sbytes using snapshot semantics.
            Note that the accumulator internally is a long datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable shorts using snapshot semantics.
            Note that the accumulator internally is a long datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable ints using snapshot semantics.
            Note that the accumulator internally is a long datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable longs using snapshot semantics.
            Note that the accumulator internally is a long datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable bytes using snapshot semantics.
            Note that the accumulator internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable ushorts using snapshot semantics.
            Note that the accumulator internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable uints using snapshot semantics.
            Note that the accumulator internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable ulongs using snapshot semantics.
            Note that the accumulator internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable floats using snapshot semantics.
            Note that the accumulator internally is a float datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable doubles using snapshot semantics.
            Note that the accumulator internally is a double datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable decimals using snapshot semantics.
            Note that the accumulator internally is a decimal datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable BigIntegers using snapshot semantics.
            Note that the accumulator internally is a BigInteger datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.AverageSquares``2(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive average of squares aggregate over nullable Complexs using snapshot semantics.
            Note that the accumulator internally is a Complex datatype and that nulls have no affect on the average.
            </summary>
            <typeparam name="TKey">The grouping key type of the incoming stream of data.</typeparam>
            <typeparam name="TPayload">The payload type of the incoming stream of data.</typeparam>
            <param name="source">The stream over which to compute an average of squares according to snapshot semantics.</param>
            <param name="selector">A selector expression describing what part of the incoming data is to be aggregated.</param>
            <returns>A stream of data whose payloads have had its squares averaged acccording to snapshot semanics.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``7(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Linq.Expressions.Expression{System.Func{``3,``5,``6}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``7(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},System.Linq.Expressions.Expression{System.Func{``3,``5,``6}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``9(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``8}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``9(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``8}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``11(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``10}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``11(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``10}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``13(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``12}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``13(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``12}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``15(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``14}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``15(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``14}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``17(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``16}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``17(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``16}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``19(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``18}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``19(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``18}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``21(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``20}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``21(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``20}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``23(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``22}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``23(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``22}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``25(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``24}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``25(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``24}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``27(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``24,``25}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``25,``26}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate12">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``27(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``24,``25},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``25,``26}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``29(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``24,``25}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``26,``27}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``25,``27,``28}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TState13">The type of the state object maintained by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput13">The type of the results generated by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate12">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate13">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``29(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``24,``25},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``26,``27},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``25,``27,``28}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``31(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``24,``25}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``26,``27}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``28,``29}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``25,``27,``29,``30}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TState13">The type of the state object maintained by the aggregate operation in position 13.</typeparam>
            <typeparam name="TState14">The type of the state object maintained by the aggregate operation in position 14.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput13">The type of the results generated by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput14">The type of the results generated by the aggregate operation in position 14.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate12">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate13">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate14">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``31(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``24,``25},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``26,``27},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``28,``29},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``25,``27,``29,``30}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``33(Microsoft.StreamProcessing.IStreamable{``0,``1},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``24,``25}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``26,``27}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``28,``29}},System.Func{Microsoft.StreamProcessing.Window{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``30,``31}},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``25,``27,``29,``31,``32}})">
            <summary>
            Applies multiple aggregates to snapshot windows on the input stream.
            </summary>
            <typeparam name="TKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
            <typeparam name="TInput">The type of the data payload in the input stream.</typeparam>
            <typeparam name="TState1">The type of the state object maintained by the aggregate operation in position 1.</typeparam>
            <typeparam name="TState2">The type of the state object maintained by the aggregate operation in position 2.</typeparam>
            <typeparam name="TState3">The type of the state object maintained by the aggregate operation in position 3.</typeparam>
            <typeparam name="TState4">The type of the state object maintained by the aggregate operation in position 4.</typeparam>
            <typeparam name="TState5">The type of the state object maintained by the aggregate operation in position 5.</typeparam>
            <typeparam name="TState6">The type of the state object maintained by the aggregate operation in position 6.</typeparam>
            <typeparam name="TState7">The type of the state object maintained by the aggregate operation in position 7.</typeparam>
            <typeparam name="TState8">The type of the state object maintained by the aggregate operation in position 8.</typeparam>
            <typeparam name="TState9">The type of the state object maintained by the aggregate operation in position 9.</typeparam>
            <typeparam name="TState10">The type of the state object maintained by the aggregate operation in position 10.</typeparam>
            <typeparam name="TState11">The type of the state object maintained by the aggregate operation in position 11.</typeparam>
            <typeparam name="TState12">The type of the state object maintained by the aggregate operation in position 12.</typeparam>
            <typeparam name="TState13">The type of the state object maintained by the aggregate operation in position 13.</typeparam>
            <typeparam name="TState14">The type of the state object maintained by the aggregate operation in position 14.</typeparam>
            <typeparam name="TState15">The type of the state object maintained by the aggregate operation in position 15.</typeparam>
            <typeparam name="TOutput1">The type of the results generated by the aggregate operation in position 1.</typeparam>
            <typeparam name="TOutput2">The type of the results generated by the aggregate operation in position 2.</typeparam>
            <typeparam name="TOutput3">The type of the results generated by the aggregate operation in position 3.</typeparam>
            <typeparam name="TOutput4">The type of the results generated by the aggregate operation in position 4.</typeparam>
            <typeparam name="TOutput5">The type of the results generated by the aggregate operation in position 5.</typeparam>
            <typeparam name="TOutput6">The type of the results generated by the aggregate operation in position 6.</typeparam>
            <typeparam name="TOutput7">The type of the results generated by the aggregate operation in position 7.</typeparam>
            <typeparam name="TOutput8">The type of the results generated by the aggregate operation in position 8.</typeparam>
            <typeparam name="TOutput9">The type of the results generated by the aggregate operation in position 9.</typeparam>
            <typeparam name="TOutput10">The type of the results generated by the aggregate operation in position 10.</typeparam>
            <typeparam name="TOutput11">The type of the results generated by the aggregate operation in position 11.</typeparam>
            <typeparam name="TOutput12">The type of the results generated by the aggregate operation in position 12.</typeparam>
            <typeparam name="TOutput13">The type of the results generated by the aggregate operation in position 13.</typeparam>
            <typeparam name="TOutput14">The type of the results generated by the aggregate operation in position 14.</typeparam>
            <typeparam name="TOutput15">The type of the results generated by the aggregate operation in position 15.</typeparam>
            <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
            <param name="source">The stream over which to aggregate data.</param>
            <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate2">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate3">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate4">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate5">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate6">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate7">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate8">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate9">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate10">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate11">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate12">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate13">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate14">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="aggregate15">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
            <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
            <returns>A stream of data with result payload type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable.Aggregate``33(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``2,``3},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``4,``5},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``6,``7},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``8,``9},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``10,``11},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``12,``13},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``14,``15},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``16,``17},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``18,``19},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``20,``21},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``22,``23},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``24,``25},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``26,``27},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``28,``29},Microsoft.StreamProcessing.Aggregates.IAggregate{``1,``30,``31},System.Linq.Expressions.Expression{System.Func{``3,``5,``7,``9,``11,``13,``15,``17,``19,``21,``23,``25,``27,``29,``31,``32}})">
            <summary>
            Applies multiple aggregates to snapshot semantics on the input stream.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamCache`2">
            <summary>
            Stores a complete stream in a highly efficient, stream friendly manner for subsequent iteration over
            the data.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamCache`2.ComputeSize">
            <summary>
            Returns the number of elements of type T contained in this cache.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamCache`2.Subscribe(Microsoft.StreamProcessing.IStreamObserver{`0,`1})">
            <summary>
            Callback method for downstream operators to register subscription to the output of the current operator
            </summary>
            <param name="observer">Pointer to the next operator downstream</param>
            <returns>Disposable object to clean up resources after stream is taken down</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamCache`2.Dispose">
            <summary>
            Frees up all of the elements in the cache.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.CircularBuffer`1">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.CircularBuffer`1.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.CircularBuffer`1.PeekFirst">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CircularBuffer`1.PeekLast">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CircularBuffer`1.Enqueue(`0@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.CircularBuffer`1.Dequeue">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CircularBuffer`1.IsFull">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CircularBuffer`1.IsEmpty">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CircularBuffer`1.Iterate">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.CircularBuffer`1.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ElasticCircularBuffer`1">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.ElasticCircularBuffer`1.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ElasticCircularBuffer`1.Enqueue(`0@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.ElasticCircularBuffer`1.Add(`0)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.ElasticCircularBuffer`1.Dequeue">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ElasticCircularBuffer`1.PeekFirst">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ElasticCircularBuffer`1.PeekLast">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ElasticCircularBuffer`1.IsEmpty">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.ElasticCircularBuffer`1.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ElasticCircularBuffer`1.GetEnumerator">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.MemoryManager">
            <summary>
            Memory manager for Stream Processing.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MemoryManager.cachedMemoryPools">
            <summary>
            Maps pairs TKey, TPayload to the generated memory pool type
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.MemoryManager.GetColumnPool``1(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.MemoryManager.GetMemoryPool``2(System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="isColumnar"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.MemoryManager.Free(System.Boolean)">
            <summary>
            Free pooled memory resources (use in case of memory pressure).
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.MemoryManager.GetStatusReport">
            <summary>
            Provide a human readable report of the status of all pools.
            </summary>
            <returns>A string reporting the status</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.MemoryManager.MsgStats">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MemoryManager.MsgStats.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MemoryManager.MsgStats.RealCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MemoryManager.MsgStats.DataMsgs">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MemoryManager.MsgStats.MinTicks">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MemoryManager.MsgStats.MaxTicks">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MemoryManager.MsgStats.MinTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MemoryManager.MsgStats.MaxTime">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.MemoryManager.GetMsgStats``2(System.Collections.Generic.IEnumerable{Microsoft.StreamProcessing.StreamMessage{``0,``1}})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="msgs"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.MemoryManager.Leaked">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.PriorityQueue`1">
            <summary>
            A priority queue structure for sorting mostly in-order data.
            </summary>
            <typeparam name="T">The element type of the priority queue.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.PriorityQueue`1.#ctor">
            <summary>
            Create an instance of a priority queue with the default comparer for the underlying item type.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create an instance of a priority queue with the specified comparer for the underlying item type.
            </summary>
            <param name="comp">The comparer to be used on elements added to the queue.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Add a new item to the priority queue.
            </summary>
            <param name="item">The item to add to the priority queue.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.PriorityQueue`1.IsEmpty">
            <summary>
            Determines whether the priority queue is empty.
            </summary>
            <returns>True if the priority queue is empty.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PriorityQueue`1.Dequeue">
            <summary>
            Dequeue an element from the priority queue.
            </summary>
            <returns>The element removed from the queue.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PriorityQueue`1.Peek">
            <summary>
            Looks at the next item that would be dequeued.
            </summary>
            <returns>The item next to be dequeued.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PriorityQueue`1.Count">
            <summary>
            Returns the number of elements in the priority queue.
            </summary>
            <returns>The number of elements in the priority queue.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PriorityQueue`1.ToString">
            <summary>
            Provides a textual representation of the priority queue.
            </summary>
            <returns>A textual representation of the priority queue.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PriorityQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that loops over the items in the priority queue.
            </summary>
            <returns>Enumerator that loops over the items in the priority queue.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamEventPriorityQueue`1">
            <summary>
            A priority queue structure for sorting mostly in-order data, where each item in the queue is a stream event.
            </summary>
            <typeparam name="T">The element type of the stream events of the priority queue.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamEventPriorityQueue`1.#ctor">
            <summary>
            Create an instance of a priority queue with the default comparer for stream events.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedStreamEventPriorityQueue`2">
            <summary>
            A priority queue structure for sorting mostly in-order data, where each item in the queue is a partitioned stream event.
            </summary>
            <typeparam name="K">The key type of the stream events of the priority queue.</typeparam>
            <typeparam name="P">The element type of the stream events of the priority queue.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEventPriorityQueue`2.#ctor">
            <summary>
            Create an instance of a priority queue with the default comparer for partitioned stream events.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SortedMultiSet`1">
            <summary>
            Represents an ordered mathematical bag, where elements can be added more than once and returned in sort order.
            </summary>
            <typeparam name="T">The type of the underlying elements.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.#ctor">
            <summary>
            Creates a new instance of a Sorted Multiset.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.#ctor(System.Func{System.Collections.Generic.SortedDictionary{`0,System.Int64}})">
            <summary>
            Creates a new instance of a Sorted Multiset where the underlying dictionary is generated.
            </summary>
            <param name="generator">The generator function for creating the underlying storage of the object.</param>
        </member>
        <member name="P:Microsoft.StreamProcessing.SortedMultiSet`1.IsEmpty">
            <summary>
            States whether the given instance of a Sorted Multiset is empty.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SortedMultiSet`1.TotalCount">
            <summary>
            Returns the number of elements contained in the Sorted Multiset, including multiplicity.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SortedMultiSet`1.UniqueCount">
            <summary>
            Returns the number of unique elements contained in the Sorted Multiset.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SortedMultiSet`1.Item(`0)">
            <summary>
            Returns the element count of the given lookup key.
            </summary>
            <param name="key">The element to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.Contains(`0)">
            <summary>
            Determines whether the Sorted Multiset contains at least one instance of the given element.
            </summary>
            <param name="key">The element to search for.</param>
            <returns>Whether the element was found at least once in the Sorted Multiset.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.Add(`0)">
            <summary>
            Add the given element once to the current Sorted Multiset.
            </summary>
            <param name="key">The element that should be added to the current object.</param>
            <returns>A reference to the current Sorted Multiset to allow for functional composition.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.Add(`0,System.Int64)">
            <summary>
            Add the given element to the current Sorted Multiset the given number of times.
            </summary>
            <param name="key">The element to add to the Sorted Multiset.</param>
            <param name="increment">The number of times to add the element.</param>
            <returns>A reference to the current Sorted Multiset to allow for functional composition.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.AddAll(Microsoft.StreamProcessing.SortedMultiSet{`0})">
            <summary>
            Add all of the elements in the given set to the current Sorted Multiset, inluding multiplicity.
            </summary>
            <param name="set">The Sorted Multiset containing the elements that should be added to the current object.</param>
            <returns>A reference to the current Sorted Multiset to allow for functional composition.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.Remove(`0)">
            <summary>
            Remove the given element once from the current Sorted Multiset.
            </summary>
            <param name="key">The element that should be removed from the current object.</param>
            <returns>A reference to the current Sorted Multiset to allow for functional composition.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.Remove(`0,System.Int64)">
            <summary>
            Remove the given element from the current Sorted Multiset the given number of times.
            </summary>
            <param name="key">The element to remove from the Sorted Multiset.</param>
            <param name="decrement">The number of times to remove the element.</param>
            <returns>A reference to the current Sorted Multiset to allow for functional composition.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.RemoveAll(Microsoft.StreamProcessing.SortedMultiSet{`0})">
            <summary>
            Remove all of the elements in the given set from the current Sorted Multiset, inluding multiplicity.
            </summary>
            <param name="set">The Sorted Multiset containing the elements that should be removed from the current object.</param>
            <returns>A reference to the current Sorted Multiset to allow for functional composition.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.Clear">
            <summary>
            Clear the contents of the Sorted Multiset.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.First">
            <summary>
            Gets the first element in the Sorted Multiset.
            </summary>
            <returns>The first element in the Sorted Multiset.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.Last">
            <summary>
            Gets the last element in the Sorted Multiset.
            </summary>
            <returns>The last element in the Sorted Multiset.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SortedMultiSet`1.GetEnumerable">
            <summary>
            Get all elements, including multiplicity, of the Sorted Multiset in sort order.
            </summary>
            <returns>An object that enumerates all of the elements in the Sorted Multiset, including multiplicity.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamMessage">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamMessage.MaxTimestamp">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamMessage.MinTimestamp">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage.Free">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage.RefreshCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage.EnsureConsistency">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage.Inflate">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage.Deflate">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamMessage`2">
            <summary>
            Represents an insert, retract or CTI event.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.PreCalculateHammingWeights">
            <summary>
            A one time pre-computation of the hamming weights for 16 bit fields, since we aren't exactly short of
            memory we can use this to vastly speed up our calculations of hamming weights on the 64
            bit vector fields at a miniscule cost in memory.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.HashCode">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.IsPartitioned">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.vsync">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.vother">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.key">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.hash">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.bitvector">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.payload">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.memPool">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.Count">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessage`2.iter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.#ctor">
            <summary>
            This constructor is meant to be used only for serialization/deserialization.
            Do not call it directly!
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Allocate">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.AssignPool(Microsoft.StreamProcessing.Internal.Collections.MemoryPool{`0,`1})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="memPool"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Add(System.Int64,System.Int64,`0,`1)">
            <summary>
            Adds a single row to the StreamMessage.
            </summary>
            <param name="vsync">The start time for the row.</param>
            <param name="vother">The other time for the row.</param>
            <param name="key">The grouping key for the row.</param>
            <param name="payload">The actual data of the row.</param>
            <returns>True iff the StreamMessage is full (after adding the row).</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Add(System.ArraySegment{Microsoft.StreamProcessing.StreamEvent{`1}},System.Int64@,System.Int32@,System.Boolean@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="largeBatch"></param>
            <param name="currentTime"></param>
            <param name="offset"></param>
            <param name="encounteredPunctuation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Add(System.ArraySegment{`1},System.Int64@,System.Int32@,System.Func{`1,System.Int64},System.Func{`1,System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="largeBatch"></param>
            <param name="currentTime"></param>
            <param name="offset"></param>
            <param name="startEdgeExtractor"></param>
            <param name="endEdgeExtractor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Add``1(System.ArraySegment{Microsoft.StreamProcessing.PartitionedStreamEvent{``0,`1}},System.Func{``0,`0},System.Collections.Generic.Dictionary{``0,System.Int64},System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="largeBatch"></param>
            <param name="partitionConstructor"></param>
            <param name="currentTime"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Add``1(System.ArraySegment{`1},System.Func{`1,``0},System.Func{``0,`0},System.Collections.Generic.Dictionary{``0,System.Int64},System.Int32@,System.Func{`1,System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="largeBatch"></param>
            <param name="partitionExtractor"></param>
            <param name="partitionConstructor"></param>
            <param name="currentTime"></param>
            <param name="offset"></param>
            <param name="startEdgeExtractor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Add``1(System.ArraySegment{`1},System.Func{`1,``0},System.Func{``0,`0},System.Collections.Generic.Dictionary{``0,System.Int64},System.Int32@,System.Func{`1,System.Int64},System.Func{`1,System.Int64})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="largeBatch"></param>
            <param name="partitionExtractor"></param>
            <param name="partitionConstructor"></param>
            <param name="currentTime"></param>
            <param name="offset"></param>
            <param name="startEdgeExtractor"></param>
            <param name="endEdgeExtractor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Add(System.ArraySegment{`1},System.Int64@,System.Int32@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="largeBatch"></param>
            <param name="currentTime"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Add(System.ArraySegment{`1},System.Int64@,System.Int32@,System.Int32,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="largeBatch"></param>
            <param name="currentTime"></param>
            <param name="offset"></param>
            <param name="eventsPerSample"></param>
            <param name="currentSync"></param>
            <param name="eventCount"></param>
            <param name="encounteredPunctuation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.AddLowWatermark(System.Int64)">
            <summary>
            Adds a single row containing a LowWatermark to the StreamMessage. Only applicable to partitioned streams.
            </summary>
            <param name="vsync">The start time for the row.</param>
            <returns>True iff the StreamMessage is full (after adding the row).</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.AddPunctuation(System.Int64)">
            <summary>
            Adds a single row containing a punctuation to the StreamMessage.
            </summary>
            <param name="vsync">The start time for the row.</param>
            <returns>True iff the StreamMessage is full (after adding the row).</returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamMessage`2.IsSealed">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Seal">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.EnsureConsistency">
            <summary>
            Currently for internal use only - do not use directly.
            This method is used in checkpoint creation and restoration.
            It delegates the current row count in the message to the individual columns for better local understanding in serialization.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Deflate">
            <summary>
            Currently for internal use only - do not use directly.
            Apply optimizations that reduce the size of the message for serialization purposes.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Inflate">
            <summary>
            Currently for internal use only - do not use directly.
            Reverses the optimizations applied using the Deflate method.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Free">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamMessage`2.Item(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.ToString">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Print">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.#ctor(Microsoft.StreamProcessing.Internal.Collections.MemoryPool{`0,`1})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="pool"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.AllocatePayload">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.AssignPayloadPool(Microsoft.StreamProcessing.Internal.Collections.MemoryPool{`0,`1})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="memPool"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.CloneFrom(Microsoft.StreamProcessing.StreamMessage{`0,`1},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="value"></param>
            <param name="swing"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.CloneFromNoPayload``1(Microsoft.StreamProcessing.StreamMessage{`0,``0},System.Boolean)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <typeparam name="TForeignPayload"></typeparam>
            <param name="value"></param>
            <param name="swing"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.ComputeCount">
            <summary>
            Returns a count of the number of rows in the message that are present (e.g. count - number of filtered out rows)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.ComputeCount(System.Int32,System.Int32)">
            <summary>
            Return a count of the number of rows in the message that are present starting at startIndex and going to (and including) endIndex. Both startIndex and endIndex must be less than
            or equal to Count and Count must be greater than 0.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.IsFiltered(System.Int32)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="rowNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Release">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.ReleaseKey">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.ReleasePayload">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.Return">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessage`2.RefreshCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamMessage`2.MinTimestamp">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamMessage`2.MaxTimestamp">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.CompoundGroupKey`2">
            <summary>
            Represents key value for a nested group apply branch.
            </summary>
            <typeparam name="TOuterKey">Key type for outer branch. Where there is no containing
            branch, this is Empty.</typeparam>
            <typeparam name="TInnerKey">Key type for nested branch.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.CompoundGroupKey`2.innerGroup">
            <summary>
            The value of the inner grouping key.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.CompoundGroupKey`2.outerGroup">
            <summary>
            The value of the outer grouping key.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.CompoundGroupKey`2.hashCode">
            <summary>
            A hash code incorporating both key elements.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.CompoundGroupKey`2.InnerGroup">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.CompoundGroupKey`2.OuterGroup">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CompoundGroupKey`2.ToString">
            <summary>
            Provides a string representation of the compound grouping key.
            </summary>
            <returns>A string representation of the compound grouping key.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.CompoundGroupKey`2.GetHashCode">
            <summary>
            Provides a hashcode of the compound grouping key.
            </summary>
            <returns>A hashcode of the compound grouping key.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupSelectorInput`1">
            <summary>
            The type that is used to hold the key introduced by a grouping operator.
            </summary>
            <typeparam name="T">The type of the key.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupSelectorInput`1.Key">
            <summary>
            The key value for the grouping
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.GroupSelectorInput`1.#ctor(`0)">
            <summary>
            Create a new group selector
            </summary>
            <param name="key">The value of the key associated with the group</param>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionKey`1">
            <summary>
            The type that is used to hold the key introduced by a partitioned input.
            </summary>
            <typeparam name="T">The type of the key.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionKey`1.Key">
            <summary>
            The value associated with the given partition.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionKey`1.#ctor(`0)">
            <summary>
            Used to construct a new partition key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionKey`1.GetHashCode">
            <summary>
            Provides a hash code for the given partition key.
            </summary>
            <returns>A hash code for the given partition key.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.RankedEvent`1">
            <summary>
            An event, coupled with a relative ranking within a group
            </summary>
            <typeparam name="T">The type of the event</typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.RankedEvent`1.Rank">
            <summary>
            The rank of the event within the current grouping
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.RankedEvent`1.Payload">
            <summary>
            The actual event associated with the ranking
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.RankedEvent`1.ToString">
            <summary>
            Provides a string representation of the ranked event.
            </summary>
            <returns>A string representation of the ranked event.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.ChangeListEvent`1">
            <summary>
            Represents a single insertion or deletion of a value from a logical data set
            </summary>
            <typeparam name="TPayload">The type of the data being inserted or deleted</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.ChangeListEvent`1.EventKind">
            <summary>
            Flag stating whether the event is a value insertion or deletion
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.ChangeListEvent`1.Payload">
            <summary>
            Payload of the event
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ChangeListEventKind">
            <summary>
            Event kinds for insertions or deletions from a change list ingress or egress
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.ChangeListEventKind.Insert">
            <summary>
            Insert event kind
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.ChangeListEventKind.Delete">
            <summary>
            Delete event kind
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ChangeListEvent">
            <summary>
            Represents either a positive or negative tuple in an ordered stream of atemporal events.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ChangeListEvent.CreateInsertion``1(``0)">
            <summary>
            Creates an event from a payload, corresponding to an insertion into a dataset
            </summary>
            <param name="payload">The payload value to be inserted</param>
            <returns>Returns a change list insertion event</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ChangeListEvent.CreateDeletion``1(``0)">
            <summary>
            Creates an event from a payload, corresponding to an deletion from a dataset
            </summary>
            <param name="payload">The payload value to be deleted</param>
            <returns>Returns a change list deletion event</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.EvolvingStateEnumerable`1">
            <summary>
            An enumerable object whose contents are subject to changes as additional data becomes available from a stream.
            </summary>
            <typeparam name="TPayload">The type of the streamable payload</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.EvolvingStateEnumerable`1.#ctor(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,`0},Microsoft.StreamProcessing.QueryContainer,System.String)">
            <summary>
            Constructor for this enumerable class, associating this enumerable with a data source from which the enumerable's contents are to be populated or retracted.
            </summary>
            <param name="source">The stream from which this enumerable will gather its state deltas.</param>
            <param name="container">The query container to which this enumerable will be registered as an egress point.</param>
            <param name="identifier">A string that uniquely identifies this enumerable among the egress points in the query container.</param>
        </member>
        <member name="P:Microsoft.StreamProcessing.EvolvingStateEnumerable`1.Completed">
            <summary>
            A flag stating whether the input to this enumerable has ceased producing updates and thus the enumerable is in its final state.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.EvolvingStateEnumerable`1.Dispose">
            <summary>
            Dispose the enumerable object by disposing its underlying state.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.EgressPlanNode">
            <summary>
            A node in the query plan representing a data source in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.EgressPlanNode.Kind">
            <summary>
            Returns the kind of plan node, which can then be used for type casting.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.EgressPlanNode.PreviousPlanNode">
            <summary>
            The query plan node that provides the input to this operator.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.EgressPlanNode.Accept(Microsoft.StreamProcessing.IPlanNodeVisitor)">
            <summary>
            Visitor pattern acceptor method.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.ReshapingPolicy">
            <summary>
            Policy that specifies whether and how events are reshaped at egress
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.ReshapingPolicy.None">
            <summary>
            No action taken to reshape output (this is the default)
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.ReshapingPolicy.CoalesceEndEdges">
            <summary>
            Coalesce end edges with their starts into interval events (WARNING: may cause delay of output until the end of stream)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamMessageEgress.ToStreamMessageObservable``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Exports a streamable as a grouped observable of batches. Produces data within and between batches which is sync time ordered.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.TemporalArrayEgressTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TemporalArrayEgressTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.TemporalEgressTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TemporalEgressTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamEvent`1">
            <summary>
            Represents an unpartitioned Stream event
            </summary>
            <typeparam name="TPayload">Type of payload for the event</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEvent`1.SyncTime">
            <summary>
            Start-time for the event
            For a start edge, sync-time is the start time of the event (other-time is set to StreamEvent.InfinitySyncTime)
            For an end edge, sync-time is the end-time and other-time is the original start time for the event
            For an interval event, sync-time and other-time refer to the start and end times for the event
            For a punctuation, sync-time is set to the timetamp of the punctuation, while other-time is set to a negative value
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEvent`1.OtherTime">
            <summary>
            End-time for the event
            For a start edge, sync-time is the start time of the event (other-time is set to StreamEvent.InfinitySyncTime)
            For an end edge, sync-time is the end-time and other-time is the original start time for the event
            For an interval event, sync-time and other-time refer to the start and end times for the event
            For a punctuation, sync-time is set to the timetamp of the punctuation, while other-time is set to a negative value
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEvent`1.Payload">
            <summary>
            Payload of the event
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamEvent`1.Kind">
            <summary>
            Kind of the event
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamEvent`1.IsPunctuation">
            <summary>
            Check if the event is a punctuation
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamEvent`1.IsData">
            <summary>
            Check if the event is data (start edge, end edge, or interval)
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamEvent`1.IsStart">
            <summary>
            Check is the event is a start edge
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamEvent`1.IsEnd">
            <summary>
            Check if the event is an end-edge
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamEvent`1.IsInterval">
            <summary>
            Check if the event is an interval event
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamEvent`1.IsPoint">
            <summary>
            Check if the event is a point event (an interval event of length one)
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamEvent`1.StartTime">
            <summary>
            Get the start time of the logical event interval for this event
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamEvent`1.EndTime">
            <summary>
            Get the end time of the logical event interval for this event
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamEvent`1.#ctor(System.Int64,System.Int64,`0)">
            <summary>
            Creates a new stream event with the given temporal parameters.
            </summary>
            <param name="syncTime">The sync time for this event. This value corresponds to the start time for a start edge or interval and the end time for an end edge.</param>
            <param name="otherTime">The other associated time for this events. For intervals, this value is the end time. For an end edge, this value identifies when the value started.</param>
            <param name="payload">The actual event associated with these temporal parameters.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamEvent`1.ToString">
            <summary>
            Return a string version of the event
            </summary>
            <returns>A string representing the event for display</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedStreamEvent`2">
            <summary>
            Represents a partitioned Stream event
            </summary>
            <typeparam name="TKey">Type of payload for the event</typeparam>
            <typeparam name="TPayload">Type of payload for the event</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStreamEvent`2.PartitionKey">
            <summary>
            Partition key for the event
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStreamEvent`2.SyncTime">
            <summary>
            Start-time for the event
            For a start edge, sync-time is the start time of the event (other-time is set to StreamEvent.InfinitySyncTime)
            For an end edge, sync-time is the end-time and other-time is the original start time for the event
            For an interval event, sync-time and other-time refer to the start and end times for the event
            For a punctuation, sync-time is set to the timetamp of the punctuation, while other-time is set to a negative value
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStreamEvent`2.OtherTime">
            <summary>
            End-time for the event
            For a start edge, sync-time is the start time of the event (other-time is set to StreamEvent.InfinitySyncTime)
            For an end edge, sync-time is the end-time and other-time is the original start time for the event
            For an interval event, sync-time and other-time refer to the start and end times for the event
            For a punctuation, sync-time is set to the timetamp of the punctuation, while other-time is set to a negative value
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStreamEvent`2.Payload">
            <summary>
            Payload of the event
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.Kind">
            <summary>
            Kind of the event
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.IsPunctuation">
            <summary>
            Check if the event is a punctuation
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.IsLowWatermark">
            <summary>
            Check if the event is a punctuation
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.IsData">
            <summary>
            Check if the event is data (start edge, end edge, or interval)
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.IsStart">
            <summary>
            Check is the event is a start edge
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.IsEnd">
            <summary>
            Check if the event is an end-edge
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.IsInterval">
            <summary>
            Check if the event is an interval event
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.IsPoint">
            <summary>
            Check if the event is a point event (an interval event of length one)
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.StartTime">
            <summary>
            Get the start time of the logical event interval for this event
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionedStreamEvent`2.EndTime">
            <summary>
            Get the end time of the logical event interval for this event
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent`2.#ctor(`0,System.Int64,System.Int64,`1)">
            <summary>
            Creates a new stream event with the given temporal parameters.
            </summary>
            <param name="key">The partition key value to which this event belongs.</param>
            <param name="syncTime">The sync time for this event. This value corresponds to the start time for a start edge or interval and the end time for an end edge.</param>
            <param name="otherTime">The other associated time for this events. For intervals, this value is the end time. For an end edge, this value identifies when the value started.</param>
            <param name="payload">The actual event associated with these temporal parameters.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent`2.ToString">
            <summary>
            Return a string version of the event
            </summary>
            <returns>A string representing the event for display</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamEventKind">
            <summary>
            Event kinds for row-wise StreamEvents
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEventKind.Punctuation">
            <summary>
            Punctuation event kind
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEventKind.Start">
            <summary>
            Start edge event kind
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEventKind.End">
            <summary>
            End edge event kind
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEventKind.Interval">
            <summary>
            Interval event kind
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEventKind.LowWatermark">
            <summary>
            Low watermark event kind
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamEvent">
            <summary>
            Stream event helpers that do not depend on generic arguments.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEvent.PunctuationOtherTime">
            <summary>
            Sentinel value for punctuation other time
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEvent.InfinitySyncTime">
            <summary>
            The time value associated with infinity, or a value beyond all other possible concrete time values.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEvent.MinSyncTime">
            <summary>
            The minimum possible time value processed by the system.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamEvent.MaxSyncTime">
            <summary>
            The maximum possible time value processed by the system.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamEvent.CreatePunctuation``1(System.Int64)">
            <summary>
            Create a punctuation.
            </summary>
            <param name="punctuationTime">Timestamp of punctuation</param>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamEvent.CreateStart``1(System.Int64,``0)">
            <summary>
            Create a start-edge event.
            </summary>
            <param name="startTime">Timestamp of the event</param>
            <param name="payload">Payload of the event</param>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamEvent.CreateEnd``1(System.Int64,System.Int64,``0)">
            <summary>
            Create an end-edge event.
            </summary>
            <param name="endTime">End timestamp of the event</param>
            <param name="originalStartTime">Original start timestamp of the event</param>
            <param name="payload">Payload of the event</param>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamEvent.CreateInterval``1(System.Int64,System.Int64,``0)">
            <summary>
            Create an interval event.
            </summary>
            <param name="startTime">Start timestamp of the event</param>
            <param name="endTime">End timestamp of the event</param>
            <param name="payload">Payload of the event</param>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamEvent.CreatePoint``1(System.Int64,``0)">
            <summary>
            Create a point event (an interval event of length one).
            </summary>
            <param name="startTime">Timestamp of the point event</param>
            <param name="payload">Payload of the event</param>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamEvent.CreatePunctuation``1(Microsoft.StreamProcessing.StreamEvent{``0},System.Int64)">
            <summary>
            Create a punctuation, given an existing stream event as a template for the type of the event payload.
            </summary>
            <param name="existingEvent">An existing event from which to draw the type information for a new punctuation.</param>
            <param name="punctuationTime">Timestamp of punctuation</param>
            <returns>An event instance</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedStreamEvent">
            <summary>
            Partitioned stream event helpers that do not depend on generic arguments.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStreamEvent.PunctuationOtherTime">
            <summary>
            Sentinel value for punctuation other time
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStreamEvent.LowWatermarkOtherTime">
            <summary>
            Sentinel value for low watermark other time
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStreamEvent.InfinitySyncTime">
            <summary>
            The time value associated with infinity, or a value beyond all other possible concrete time values.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStreamEvent.MinSyncTime">
            <summary>
            The minimum possible time value processed by the system.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStreamEvent.MaxSyncTime">
            <summary>
            The maximum possible time value processed by the system.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent.CreatePunctuation``2(``0,System.Int64)">
            <summary>
            Create a punctuation.
            </summary>
            <param name="key">The partition to which the event belongs</param>
            <param name="punctuationTime">Timestamp of punctuation</param>
            <typeparam name="TKey">The type of the partition key for this event.</typeparam>
            <typeparam name="TPayload">The type of the underlying event.</typeparam>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent.CreateLowWatermark``2(System.Int64)">
            <summary>
            Create a low watermark.
            </summary>
            <param name="lowWatermarkTime">Timestamp of low watermark</param>
            <typeparam name="TKey">The type of the partition key for this stream.</typeparam>
            <typeparam name="TPayload">The type of the stream payload.</typeparam>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent.CreateStart``2(``0,System.Int64,``1)">
            <summary>
            Create a start-edge event.
            </summary>
            <param name="key">The partition to which the event belongs</param>
            <param name="startTime">Timestamp of the event</param>
            <param name="payload">Payload of the event</param>
            <typeparam name="TKey">The type of the partition key for this event.</typeparam>
            <typeparam name="TPayload">The type of the underlying event.</typeparam>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent.CreateEnd``2(``0,System.Int64,System.Int64,``1)">
            <summary>
            Create an end-edge event.
            </summary>
            <param name="key">The partition to which the event belongs</param>
            <param name="endTime">End timestamp of the event</param>
            <param name="originalStartTime">Original start timestamp of the event</param>
            <param name="payload">Payload of the event</param>
            <typeparam name="TKey">The type of the partition key for this event.</typeparam>
            <typeparam name="TPayload">The type of the underlying event.</typeparam>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent.CreateInterval``2(``0,System.Int64,System.Int64,``1)">
            <summary>
            Create an interval event.
            </summary>
            <param name="key">The partition to which the event belongs</param>
            <param name="startTime">Start timestamp of the event</param>
            <param name="endTime">End timestamp of the event</param>
            <param name="payload">Payload of the event</param>
            <typeparam name="TKey">The type of the partition key for this event.</typeparam>
            <typeparam name="TPayload">The type of the underlying event.</typeparam>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent.CreatePoint``2(``0,System.Int64,``1)">
            <summary>
            Create a point event (an interval event of length one).
            </summary>
            <param name="key">The partition to which the event belongs</param>
            <param name="startTime">Timestamp of the point event</param>
            <param name="payload">Payload of the event</param>
            <typeparam name="TKey">The type of the partition key for this event.</typeparam>
            <typeparam name="TPayload">The type of the underlying event.</typeparam>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent.CreatePunctuation``2(Microsoft.StreamProcessing.PartitionedStreamEvent{``0,``1},System.Int64)">
            <summary>
            Create a punctuation, given an existing stream event as a template for the type of the event payload and the value of the partition key.
            </summary>
            <param name="existingEvent">An existing event from which to draw the type information for a new punctuation.</param>
            <param name="punctuationTime">Timestamp of punctuation</param>
            <typeparam name="TKey">The type of the partition key for this event.</typeparam>
            <typeparam name="TPayload">The type of the underlying event.</typeparam>
            <returns>An event instance</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionedStreamEvent.CreateLowWatermark``2(Microsoft.StreamProcessing.PartitionedStreamEvent{``0,``1},System.Int64)">
            <summary>
            Create a low watermark, given an existing stream event as a template for the types of the event payload and partition key.
            </summary>
            <param name="existingEvent">An existing event from which to draw the type information for a new low watermark.</param>
            <param name="lowWatermarkTime">Timestamp of low watermark</param>
            <typeparam name="TKey">The type of the partition key for this event.</typeparam>
            <typeparam name="TPayload">The type of the underlying event.</typeparam>
            <returns>An event instance</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.IngressException">
            <summary>
            Exception specific to an error occurring during data ingress.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.IngressException.#ctor">
            <summary>
            Create an Ingress exception with no underlying message.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.IngressException.#ctor(System.String)">
            <summary>
            Create an Ingress exception with the given message.
            </summary>
            <param name="message">The error message associated with the exception.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.IngressException.#ctor(System.String,System.Exception)">
            <summary>
            Create an Ingress exception with the given message.
            </summary>
            <param name="message">The error message associated with the exception.</param>
            <param name="innerException">The additional exception being bundled with this exception.</param>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamProcessingException">
            <summary>
            Represents a user exception somewhere within the
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProcessingException.#ctor">
            <summary>
            Create a Stream Processing exception with no underlying message.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProcessingException.#ctor(System.String)">
            <summary>
            Create a Stream Processing exception with the given message.
            </summary>
            <param name="message">The error message associated with the exception.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Create a Stream Processing exception with the given message and given inner exception.
            </summary>
            <param name="message">The error message associated with the exception.</param>
            <param name="innerException">The additional exception being bundled with this exception.</param>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamProcessingOutOfOrderException">
            <summary>
            Exception when Trill detects an out of order event outside of ingress
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProcessingOutOfOrderException.#ctor">
            <summary>
            Create ann out-of-order exception with no underlying message.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProcessingOutOfOrderException.#ctor(System.String)">
            <summary>
            Create an out-of-order exception with the given message.
            </summary>
            <param name="message">The error message associated with the exception.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProcessingOutOfOrderException.#ctor(System.String,System.Exception)">
            <summary>
            Create an out-of-order exception with the given message and given inner exception.
            </summary>
            <param name="message">The error message associated with the exception.</param>
            <param name="innerException">The additional exception being bundled with this exception.</param>
        </member>
        <member name="T:Microsoft.StreamProcessing.FusedPlanNode">
            <summary>
            A node in the query plan representing a data source in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.FusedPlanNode.Kind">
            <summary>
            Returns the kind of plan node, which can then be used for type casting.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FusedPlanNode.Accept(Microsoft.StreamProcessing.IPlanNodeVisitor)">
            <summary>
            Visitor pattern acceptor method.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Serializer.IIngressScheduler">
            <summary>
            Interface wrapping a scheduler
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.IIngressScheduler.Schedule(System.Action)">
            <summary>
            Schedule an action to be handled according to the scheduler
            </summary>
            <param name="action">The action to be scheduled</param>
            <returns>An object that, when disposed, shuts down the action scheduling</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Serializer.ISurrogate">
            <summary>
                Provides the methods needed to substitute one type for another by the ISerializer
                during serialization and deserialization of C# types.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.ISurrogate.IsSupportedType(System.Type,System.Reflection.MethodInfo@,System.Reflection.MethodInfo@)">
            <summary>
            Returns whether type is supported by surrogate
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Serializer.SerializerSettings">
            <summary>
                Specifies serializer settings.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.SerializerSettings.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.StreamProcessing.Serializer.SerializerSettings" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Serializer.SerializerSettings.Surrogate">
            <summary>
            Gets or sets a serialization surrogate.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Serializer.SerializerSettings.MaxItemsInSchemaTree">
            <summary>
                Gets or sets the maximum number of items in the schema tree.
            </summary>
            <value>
                The maximum number of items in the schema tree.
            </value>
        </member>
        <member name="P:Microsoft.StreamProcessing.Serializer.SerializerSettings.KnownTypes">
            <summary>
                Gets or sets the known types.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Serializer.SerializerSettings.UseCache">
            <summary>
            Gets or sets a value indicating whether to use a cache of precompiled serializers.
            </summary>
            <value>
              <c>True</c> if to use the cache; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.SerializerSettings.Equals(Microsoft.StreamProcessing.Serializer.SerializerSettings)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                True if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.SerializerSettings.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">
                The <see cref="T:System.Object" /> to compare with this instance.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.SerializerSettings.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.Serializers.EnumerableSerializer`2.BuildSerializerSafe(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Builds the serialization expression for enumerables.
            Serialization happens in chunks of 1024 elements and uses a buffer to avoid memory allocations.
            </summary>
            <param name="encoder">The encoder.</param>
            <param name="value">The value.</param>
            <returns>Expression, serializing an enumerable.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Serializer.Serializers.MultidimensionalArraySerializer">
            <summary>
            Serialization of C# multidimensional array as array of arrays.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Serializer.Serializers.UnionSerializer">
            <summary>
            Serializer of Union, used for reference types and interfaces/abstract classes.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Serializer.StateSerializer`1">
            <summary>
            State serializer
            </summary>
            <typeparam name="T">Serialization object type</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.StateSerializer`1.Serialize(System.IO.Stream,`0)">
            <summary>
            Serialize object to stream
            </summary>
            <param name="stream">Stream to serialize to</param>
            <param name="obj">Object to serialize</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.StateSerializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize object from stream
            </summary>
            <param name="stream">Stream to deserialize from</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Serializer.StreamSerializer">
            <summary>
            Serializer to read/write objects from/to streams
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.StreamSerializer.Create``1">
            <summary>
            Create instance of serializer for given object type
            </summary>
            <typeparam name="T">Type of object</typeparam>
            <returns>StateSerializer</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Serializer.StreamSerializer.Create``1(Microsoft.StreamProcessing.Serializer.SerializerSettings)">
            <summary>
            Creates a serializer that allows serializing types attributed with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
            <typeparam name="T">The type of objects to serialize.</typeparam>
            <param name="settings">The serialization settings.</param>
            <returns> A serializer. </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="settings"/> is null.</exception>
            <remarks>
            This function can cause in-memory runtime code generation if the type <typeparamref name="T"/> has not used seen before.
            Otherwise, a cached version of the serializer is given to the user.
            </remarks>
        </member>
        <member name="T:Microsoft.StreamProcessing.OutOfOrderStreamEvent`1">
            <summary>
            A structure for representing when a tuple had to be adjusted or dropped from a source of data ingress.
            </summary>
            <typeparam name="TPayload">The type of the stream event payload.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.OutOfOrderStreamEvent`1.Event">
            <summary>
            The event that was adjusted or dropped in its original version.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.OutOfOrderStreamEvent`1.TimeAdjustment">
            <summary>
            The amount of time that the event was adjusted, or null if the event was dropped.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.OutOfOrderStreamEvent">
            <summary>
            Static class containing generator methods for OutOfOrderStreamEvent objects.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.OutOfOrderStreamEvent.Create``1(Microsoft.StreamProcessing.StreamEvent{``0},System.Nullable{System.Int64})">
            <summary>
            Create an OutOfOrderStreamEvent object from its constituent parts.
            </summary>
            <typeparam name="TPayload">The type of the underlying event.</typeparam>
            <param name="e">The event that has arrived in the stream out of order.</param>
            <param name="delta">The amount of time that the event was out of order.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.OutOfOrderPartitionedStreamEvent`2">
            <summary>
            A structure for representing when a tuple had to be adjusted or dropped from a source of data ingress.
            </summary>
            <typeparam name="TKey">The partition key type.</typeparam>
            <typeparam name="TPayload">The type of the stream event payload.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.OutOfOrderPartitionedStreamEvent`2.Event">
            <summary>
            The event that was adjusted or dropped in its original version.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.OutOfOrderPartitionedStreamEvent`2.TimeAdjustment">
            <summary>
            The amount of time that the event was adjusted, or null if the event was dropped.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.OutOfOrderPartitionedStreamEvent">
            <summary>
            Static class containing generator methods for OutOfOrderPartitionedStreamEvent objects.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.OutOfOrderPartitionedStreamEvent.Create``2(Microsoft.StreamProcessing.PartitionedStreamEvent{``0,``1},System.Nullable{System.Int64})">
            <summary>
            Create an OutOfOrderPartitionedStreamEvent object from its constituent parts.
            </summary>
            <typeparam name="TKey">The partition key type.</typeparam>
            <typeparam name="TPayload">The type of the underlying event.</typeparam>
            <param name="e">The event that has arrived in the stream out of order.</param>
            <param name="delta">The amount of time that the event was out of order.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.IIngressStreamable`2">
            <summary>
            An interface corresponding to a streamable at an ingress point to a query.
            </summary>
            <typeparam name="TKey">The type of the key in the stream.</typeparam>
            <typeparam name="TPayload">The type of the payload objects of the input source.</typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.IIngressStreamable`2.IngressSiteIdentifier">
            <summary>
            An identifier that uniquely identifies the ingress site relative to a running query.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IPassiveIngressStreamable`2">
            <summary>
            Interface for a passive ingress site that can be externally triggered to read available data.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.IPassiveIngressStreamable`2.Trigger">
            <summary>
            Trigger the stream to read (pull) data and push to the downstream pipeline
            </summary>
            <returns>False if reached end of stream (completed), true otherwise</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.IObservableIngressStreamable`1">
            <summary>
            An interface corresponding to a streamable at an ingress point to a query where input may be out of order.
            </summary>
            <typeparam name="TPayload">The type of the payload objects of the input source.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.IObservableIngressStreamable`1.GetDroppedAdjustedEventsDiagnostic">
            <summary>
            Returns a diagnostic observable of stream events that had to be dropped or adjusted due to out-of-order arrival.
            </summary>
            <returns>An observable that one can subscribe to for the stream events that arrive out of order.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.IPartitionedIngressStreamable`2">
            <summary>
            An interface corresponding to a streamable at an ingress point to a query where input may be out of order.
            </summary>
            <typeparam name="TPartitionKey">The type of the partition key of the stream.</typeparam>
            <typeparam name="TPayload">The type of the payload objects of the input source.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.IPartitionedIngressStreamable`2.GetDroppedAdjustedEventsDiagnostic">
            <summary>
            Returns a diagnostic observable of stream events that had to be dropped or adjusted due to out-of-order arrival.
            </summary>
            <returns>An observable that one can subscribe to for the stream events that arrive out of order.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.DisorderPolicy">
            <summary>
            Specifies how to handle out-of-order events
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.#ctor">
            <summary>
            Empty constructor required for Data Contract serializability.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.Throw">
            <summary>
            Throw if you see disordered events. Use this when you know that your input
            events are well-ordered.
            </summary>
            <returns>An instance of the disorder policy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.Throw(System.Int64)">
            <summary>
            Throw if you see disordered events. Use this when you know that your input
            events are well-ordered.
            </summary>
            <param name="reorderLatency">Tolerable latency bound (in application time) for reordering data at ingress</param>
            <returns>An instance of the disorder policy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.Adjust">
            <summary>
            When an out-of-order event appears in the stream, adjust its
            start time to be the start time of immediately previous event.
            </summary>
            <returns>An instance of the disorder policy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.Adjust(System.Int64)">
            <summary>
            When an out-of-order event appears in the stream, adjust its
            start time to be the start time of immediately previous event.
            </summary>
            <param name="reorderLatency">Tolerable latency bound (in application time) for reordering data at ingress</param>
            <returns>An instance of the disorder policy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.Drop">
            <summary>
            When an out-of-order event appears in the stream,
            drop it and don't include it in the output.
            </summary>
            <returns>An instance of the disorder policy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.Drop(System.Int64)">
            <summary>
            When an out-of-order event appears in the stream,
            drop it and don't include it in the output.
            </summary>
            <param name="reorderLatency">Tolerable latency bound (in application time) for reordering data at ingress</param>
            <returns>An instance of the disorder policy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.Equals(System.Object)">
            <summary>
            Determines whether two Disorder Policies have the same constituent parts.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.GetHashCode">
            <summary>
            Provides a hash code for the Disorder Policy object.
            </summary>
            <returns>A hash code for the Disorder Policy object.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisorderPolicy.ToString">
            <summary>
            Do *not* include the value for the reorder latency so that the string can be used as a key for the
            dictionary containing the generated pipes.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.FlushPolicy">
            <summary>
            Specifies when to flush batched output events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.FlushPolicy.None">
            <summary>
            Do not flush. Output events will be batched and egressed normally.
            </summary>
            <returns>An instance of the flush policy</returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.FlushPolicy.FlushOnPunctuation">
            <summary>
            When a punctuation is ingressed or generated, a flush will also be propagated through the query.
            This is the default policy.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.FlushPolicy.FlushOnBatchBoundary">
            <summary>
            When a batch is filled on ingress, a flush will be propagated through the query.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedFlushPolicy">
            <summary>
            Specifies when to flush batched output events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedFlushPolicy.None">
            <summary>
            Do not flush. Output events will be batched and egressed normally.
            </summary>
            <returns>An instance of the flush policy</returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedFlushPolicy.FlushOnLowWatermark">
            <summary>
            When a low watermark is ingressed, a flush will also be propagated through the query.
            This is the default policy.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedFlushPolicy.FlushOnBatchBoundary">
            <summary>
            When a batch is filled on ingress, a flush will be propagated through the query.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.OnCompletedPolicy">
            <summary>
            Specifies how to handle query completion (on receiving an OnCompleted call).
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.OnCompletedPolicy.None">
            <summary>
            Halt the query immediately - do not flush partial output or move time forward.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.OnCompletedPolicy.Flush">
            <summary>
            Flush partial output (in batches within the system) before completion. Do not move time forward.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.OnCompletedPolicy.EndOfStream">
            <summary>
            This is the end of stream. Move time to infinity and flush all output before completion.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy">
            <summary>
            Specifies how to generate low watermarks into the partitioned stream.
            Low watermarks set a lower bound on all partitions in the stream, and any event ingressed
            before that lower bound will be considered out of order.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy.#ctor">
            <summary>
            Empty constructor for serialization purposes.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy.None">
            <summary>
            Don't inject any low watermarks. This is the default policy.
            </summary>
            <returns>An instance of PeriodicLowWatermarkPolicy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy.Time(System.UInt64,System.UInt64)">
            <summary>
            Inject low watermarks every <paramref name="generationPeriod"/> time ticks, rounded down to the previous
            <paramref name="generationPeriod"/> multiple, based on the highest event time ingressed into the stream.
            Low watermark timestamp is calculated as (highest event time - <paramref name="lowWatermarkTimestampLag"/>).
            Highest ingressed event time is calculated before any buffering such as specified in other policies, <see cref="T:Microsoft.StreamProcessing.DisorderPolicy"/>.
            </summary>
            <param name="generationPeriod">Period of time ticks that must lapse since last low watermark timestamp before
            generating a new low watermark</param>
            <param name="lowWatermarkTimestampLag">The amount of time that the generated low watermarks will lag behind
            the highest event time in the stream.
            Low watermark timestamp = (highest event time - <paramref name="lowWatermarkTimestampLag"/>), rounded down
            to the previous <paramref name="generationPeriod"/> multiple</param>
            <returns>An instance of PeriodicLowWatermarkPolicy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy.GetHashCode">
            <summary>
            Provides a hash code for the PeriodicLowWatermarkPolicy object.
            </summary>
            <returns>A hash code for the PeriodicLowWatermarkPolicy object.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicLowWatermarkPolicy.ToString">
            <summary>
            Provides a string representation for the PeriodicLowWatermarkPolicy object.
            </summary>
            <returns>A string representation for the PeriodicLowWatermarkPolicy object.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.PeriodicPunctuationPolicy">
            <summary>
            Specifies how to inject punctuations into the resulting stream.
            Since punctuations force output, this exposes a throughput/latency tradeoff.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicPunctuationPolicy.#ctor">
            <summary>
            Empty constructor for serialization purposes.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicPunctuationPolicy.None">
            <summary>
            Don't inject any punctuations.
            This is the default policy.
            </summary>
            <returns>An instance of the punctuation policy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicPunctuationPolicy.Time(System.UInt64)">
            <summary>
            Inject punctuations every <paramref name="generationPeriod"/> time ticks, rounded down to the previous
            <paramref name="generationPeriod"/> multiple.
            </summary>
            <param name="generationPeriod">Frequency of punctuations in time ticks (n)</param>
            <returns>An instance of the punctuation policy</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicPunctuationPolicy.GetHashCode">
            <summary>
            Provides a hash code for the PeriodicPunctuationPolicy object.
            </summary>
            <returns>A hash code for the PeriodicPunctuationPolicy object.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PeriodicPunctuationPolicy.ToString">
            <summary>
            Provides a string representation for the PeriodicPunctuationPolicy object.
            </summary>
            <returns>A string representation for the PeriodicPunctuationPolicy object.</returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.TimelineEnum.WallClock">
            <summary>
            Indicates that the assigned timeline should be derived from the CPU's notion of time
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.TimelineEnum.Sequence">
            <summary>
            Indicates that the assigned timeline should be derived by a monotonically increasing counter
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.TimelinePolicy">
            <summary>
            Specifies how to assign a monotonically increasing temporal component to intrinsically atemporal data.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TimelinePolicy.#ctor">
            <summary>
            Empty constructor for serialization purposes.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TimelinePolicy.WallClock(System.TimeSpan)">
            <summary>
            Create a new Timeline Policy based on assigning temporal values to events based on the time in the system clock.
            </summary>
            <param name="punctuationInterval">Describes how much time should progress before creating a punctuation event and flushing contents.</param>
            <returns>A policy object to be used in ingress methods.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.TimelinePolicy.Sequence(System.Int32)">
            <summary>
            Create a new Timeline Policy based on assigning temporal values to events based on a monotonically increasing counter.
            </summary>
            <param name="sampleSize">Describes how many events will be given the same sequence value before incrementing it.</param>
            <returns>A policy object to be used in ingress methods.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.TemporalIngressTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TemporalIngressTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IQueryObject">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IQueryObject.CurrentlyBufferedOutputCount">
            <summary>
            Property to report how many events are currently buffered in the output batch.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IQueryObject.CurrentlyBufferedInputCount">
            <summary>
            Property to report how many events are currently buffered from inputs and are awaiting computation.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.IQueryObject.ProduceQueryPlan(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Method to call to trigger the production of a query plan from the set of running operations.
            </summary>
            <param name="previous">The previous node in the query plan.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.IQueryObject.OnFlush">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.IQueryObject.Checkpoint(System.IO.Stream)">
            <summary>
            Method to call when checkpointing the state of this observer.
            </summary>
            <param name="stream">The stream to which to write the checkpoint state.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.IQueryObject.Restore(System.IO.Stream)">
            <summary>
            Method to call when restoring the state of this observer.
            </summary>
            <param name="stream">The stream from which to retrieve the restoration state.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.IQueryObject.Reset">
            <summary>
            In case of an exception, use this method to reset any internal state that needs to be reset.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IBinaryObserver">
            <summary>
            Represents an observer with two inputs, each of which may have state that is accumulating while waiting for the other input.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IBinaryObserver.LeftInputHasState">
            <summary>
            Returns whether the left input has any associated built-up state.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IBinaryObserver.RightInputHasState">
            <summary>
            Returns whether the right input has any associated built-up state.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IBinaryObserver.CurrentlyBufferedLeftKeyCount">
            <summary>
            Property to report how many keys have events currently buffered from the left input and are awaiting computation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IBinaryObserver.CurrentlyBufferedRightKeyCount">
            <summary>
            Property to report how many keys have events currently buffered from the right input and are awaiting computation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IBinaryObserver.CurrentlyBufferedLeftInputCount">
            <summary>
            Property to report how many events are currently buffered from the left input and are awaiting computation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IBinaryObserver.CurrentlyBufferedRightInputCount">
            <summary>
            Property to report how many events are currently buffered from the right input and are awaiting computation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IStreamObserver`2">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IStreamObserver`2.ClassId">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Afa">
            <summary>
            Extension methods for creating an AFA object
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa.Create``3(``1,``2)">
             <summary>
            
             </summary>
             <typeparam name="TInput"></typeparam>
             <typeparam name="TRegister"></typeparam>
             <typeparam name="TAccumulator"></typeparam>
             <param name="defaultRegister"></param>
             <param name="defaultAccumulator"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa.Create``2(``1)">
             <summary>
            
             </summary>
             <typeparam name="TInput"></typeparam>
             <typeparam name="TRegister"></typeparam>
             <param name="defaultRegister"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa.Create``1">
             <summary>
            
             </summary>
             <typeparam name="TInput"></typeparam>
             <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Afa`3">
            <summary>
            Class that describes an AFA completely, along with its properties.
            </summary>
            <typeparam name="TInput">The event type.</typeparam>
            <typeparam name="TRegister">The register type.</typeparam>
            <typeparam name="TAccumulator">The accumulator type.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.#ctor(`1,`2)">
            <summary>
            Create a new instance of an AFA object.
            </summary>
            <param name="defaultRegister">The default register for new instances of the AFA.</param>
            <param name="defaultAccumulator">The default accumulator for new instances of the AFA.</param>
        </member>
        <member name="F:Microsoft.StreamProcessing.Afa`3.isSealed">
            <summary>
            AFA is sealed or not.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Afa`3.finalStates">
            <summary>
            The set of final states in the AFA.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Afa`3.transitionInfo">
            <summary>
            The arcs present in the AFA.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Afa`3.StartState">
            <summary>
            Start state of the AFA.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Afa`3.DefaultRegister">
            <summary>
            The default value of the register.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Afa`3.DefaultAccumulator">
            <summary>
            The default value of the accumulator.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Afa`3.AllowOverlappingInstances">
            <summary>
            This property specifies whether, on a new incoming event, we allow new
            matches to be initiated (from AFA start state) while an existing pattern is still
            being matched by the AFA. If set to false, we do not start matching an incoming event from
            the start state of the AFA unless all currently active states have expired or retired.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Afa`3.IsDeterministic">
            <summary>
            This property is used to assert whether or not the automaton is deterministic
            (i.e., an active state may transition to more than one new state on an incoming event)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.AddSingleElementArc(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{System.Int64,`0,`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,`0,`1,`1}})">
            <summary>
            Adds a transition to the AFA triggered by a single element
            </summary>
            <param name="fromState">Starting state of the transition</param>
            <param name="toState">Ending state of the transition</param>
            <param name="fence">An added condition that must be met for the transition to occur</param>
            <param name="transfer">An expression to mutate the register value when the transition occurs</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.AddListElementArc(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{`0},`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{`0},`1,`1}})">
            <summary>
            Adds a transition to the AFA triggered by a list of concurrent elements
            </summary>
            <param name="fromState">Starting state of the transition</param>
            <param name="toState">Ending state of the transition</param>
            <param name="fence">An added condition that must be met for the transition to occur</param>
            <param name="transfer">An expression to mutate the register value when the transition occurs</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.AddEpsilonElementArc(System.Int32,System.Int32)">
            <summary>
            Adds an epsilon (no action) arc to the AFA
            </summary>
            <param name="fromState">Starting state of the transition</param>
            <param name="toState">Ending state of the transition</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.AddMultiElementArc(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{System.Int64,`1,`2}},System.Linq.Expressions.Expression{System.Func{System.Int64,`0,`1,`2,`2}},System.Linq.Expressions.Expression{System.Func{System.Int64,`0,`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,`2,`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,`2,`1,`1}},System.Linq.Expressions.Expression{System.Action{`2}})">
            <summary>
            Adds a transition that handles multiple elements (events) at a given timestamp
            </summary>
            <param name="fromState">Starting state of the transition</param>
            <param name="toState">Ending state of the transition</param>
            <param name="initialize">An initializer statement for the accumulator</param>
            <param name="accumulate">A description of how to update the accumulator on transition</param>
            <param name="skipToEnd">A description of when to skip to the end as a part of the transition</param>
            <param name="fence">An added condition that must be met for the transition to occur</param>
            <param name="transfer">An expression to mutate the register value when the transition occurs</param>
            <param name="dispose">Dispose action on the accumulator</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.AddArc(System.Int32,System.Int32,Microsoft.StreamProcessing.Arc{`0,`1})">
            <summary>
            Adds an arc to the AFA.
            </summary>
            <param name="fromState">The state from which the arc begins.</param>
            <param name="toState">The state at which the arc ends.</param>
            <param name="arc">The arc, defined as a method.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.Clone">
            <summary>
            Takes the current AFA object and performs a deep copy
            </summary>
            <returns>A deep copy of the current AFA</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.IsSealed">
            <summary>
            Whether or not the AFA is sealed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.AddFinalState(System.Int32)">
            <summary>
            Add a final state to the AFA.
            </summary>
            <param name="state">The state being added as a final state.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.RemoveFinalState(System.Int32)">
            <summary>
            Remove a final state from the AFA.
            </summary>
            <param name="state">The state being added as a final state.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.SetDefaultRegister(`1)">
            <summary>
            Set default value of register.
            </summary>
            <param name="register"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Afa`3.ToString">
            <summary>
            Returns a string representation of the AFA
            </summary>
            <returns>A string representation of the AFA</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.IAbstractPatternRoot`4">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TRegister"></typeparam>
            <typeparam name="TAccumulator"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.Concat(System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}},System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}}[])">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="pattern"></param>
            <param name="patterns"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.Edit(System.Action{Microsoft.StreamProcessing.Afa{`1,`2,`3}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="edit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.Epsilon">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.KleenePlus(System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.KleeneStar(System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.MultiElement(System.Linq.Expressions.Expression{System.Func{System.Int64,`2,`3}},System.Linq.Expressions.Expression{System.Func{System.Int64,`1,`2,`3,`3}},System.Linq.Expressions.Expression{System.Func{System.Int64,`1,`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,`3,`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,`3,`2,`2}},System.Linq.Expressions.Expression{System.Action{`3}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="initialize"></param>
            <param name="accumulate"></param>
            <param name="skipToEnd"></param>
            <param name="fence"></param>
            <param name="transfer"></param>
            <param name="dispose"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.Or(System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}},System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}},System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}}[])">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="pattern1"></param>
            <param name="pattern2"></param>
            <param name="patterns"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.OrConcat(System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}},System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}},System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}}[])">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="pattern1"></param>
            <param name="pattern2"></param>
            <param name="patterns"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.SingleElement(System.Linq.Expressions.Expression{System.Func{System.Int64,`1,`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,`1,`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.SingleElement(System.Linq.Expressions.Expression{System.Func{System.Int64,`1,`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.SingleElement(System.Linq.Expressions.Expression{System.Func{System.Int64,`1,`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.SingleElement(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,`1,`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.SingleElement(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.SingleElement(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.SingleElement(System.Linq.Expressions.Expression{System.Func{`1,`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,`1,`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.SingleElement(System.Linq.Expressions.Expression{System.Func{`1,`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.SingleElement(System.Linq.Expressions.Expression{System.Func{`1,`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.ListElement(System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{`1},`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{`1},`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.ListElement(System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{`1},`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.ListElement(System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{`1},`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.ListElement(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{`1},`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.ListElement(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.ListElement(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.ListElement(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{`1},`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.ListElement(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},`2,`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPatternRoot`4.ListElement(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{`1},`2}})">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="condition"></param>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.IAbstractPattern`4">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TRegister"></typeparam>
            <typeparam name="TAccumulator"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPattern`4.SetAccumulator``1(``0)">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <typeparam name="TAccumulatorNew"></typeparam>
            <param name="defaultAccumulator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPattern`4.SetRegister``1(``0)">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <typeparam name="TRegisterNew"></typeparam>
            <param name="defaultRegister"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IAbstractPattern`4.Detect(System.Func{Microsoft.StreamProcessing.IAbstractPatternRoot{`0,`1,`2,`3},Microsoft.StreamProcessing.IPattern{`0,`1,`2,`3}},System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="pattern"></param>
            <param name="maxDuration"></param>
            <param name="allowOverlappingInstances"></param>
            <param name="isDeterministic"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.IPattern`4">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TRegister"></typeparam>
            <typeparam name="TAccumulator"></typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.IPattern`4.AFA">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.IPattern`4.Detect(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Interface is only public to serve CLR strong typing - instances should only be created internally. Do not use directly.
            </summary>
            <param name="maxDuration"></param>
            <param name="allowOverlappingInstances"></param>
            <param name="isDeterministic"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.AfaMultiEventListTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.AfaMultiEventListTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.AfaPlanNode">
            <summary>
            A node in the query plan representing function application to all input rows.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.AfaPlanNode.Kind">
            <summary>
            Indicates that the current node is an abstract automaton operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.AfaTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.AfaTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SingleEventArcInfo`2">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TRegister"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.SingleEventArcInfo`2.toState">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SingleEventArcInfo`2.Fence">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SingleEventArcInfo`2.Transfer">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.EventListArcInfo`2">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TRegister"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.EventListArcInfo`2.toState">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.EventListArcInfo`2.Fence">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.EventListArcInfo`2.Transfer">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.MultiEventArcInfo`3">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TRegister"></typeparam>
            <typeparam name="TAccumulator"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.MultiEventArcInfo`3.fromStartState">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MultiEventArcInfo`3.toState">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MultiEventArcInfo`3.Initialize">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MultiEventArcInfo`3.Accumulate">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MultiEventArcInfo`3.SkipToEnd">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MultiEventArcInfo`3.Fence">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MultiEventArcInfo`3.Transfer">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MultiEventArcInfo`3.Dispose">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupedActiveState`2">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TRegister"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveState`2.key">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveState`2.state">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveState`2.register">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveState`2.PatternStartTimestamp">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupedActiveStateAccumulator`4">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <typeparam name="TRegister"></typeparam>
            <typeparam name="TAccumulator"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveStateAccumulator`4.key">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveStateAccumulator`4.fromState">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveStateAccumulator`4.toState">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveStateAccumulator`4.register">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveStateAccumulator`4.accumulator">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveStateAccumulator`4.arcinfo">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.GroupedActiveStateAccumulator`4.PatternStartTimestamp">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.OutputEvent`2">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.OutputEvent`2.other">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.OutputEvent`2.key">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.OutputEvent`2.payload">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SavedEventList`2">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.SavedEventList`2.key">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SavedEventList`2.payloads">
            <summary>
            Currently for internal use only - do not use directly
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Arc`2">
            <summary>
            Abstract type for all AFA arcs.
            </summary>
            <typeparam name="TInput">The type of the input data.</typeparam>
            <typeparam name="TRegister">The type of the state register.</typeparam>
        </member>
        <member name="T:Microsoft.StreamProcessing.SingleElementArc`2">
            <summary>
            Arc that handles exactly one element (event) at a given timestamp
            </summary>
            <typeparam name="TInput">The type of the input data.</typeparam>
            <typeparam name="TRegister">The type of the state register.</typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.SingleElementArc`2.ArcType">
            <summary>
            Indicates that the current arc is triggered by a single event.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.MultiElementArc`3">
            <summary>
            Arc that handles multiple elements (events) at a given timestamp
            </summary>
            <typeparam name="TInput">The type of the input data.</typeparam>
            <typeparam name="TRegister">The type of the state register.</typeparam>
            <typeparam name="TAccumulator"></typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.MultiElementArc`3.ArcType">
            <summary>
            Indicates that the current arc is triggered by multiple elements at a given timestamp.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ListElementArc`2">
            <summary>
            Arc that handles a list of one or more elements (events) at a given timestamp
            </summary>
            <typeparam name="TInput">The type of the input data.</typeparam>
            <typeparam name="TRegister">The type of the state register.</typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.ListElementArc`2.ArcType">
            <summary>
            Indicates that the current arc is a transformation triggered by a collection of elements.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.EpsilonArc`2">
            <summary>
            Epsilon arc - an arc that is a free transformation in an AFA.
            </summary>
            <typeparam name="TInput">The type of the input data.</typeparam>
            <typeparam name="TRegister">The type of the state register.</typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.EpsilonArc`2.ArcType">
            <summary>
            Indicates that the current arc is an epsilon transformation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupedAfaEventListTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.GroupedAfaEventListTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupedAfaMultiEventTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.GroupedAfaMultiEventTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupedAfaTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.GroupedAfaTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ARegex">
            <summary>
            Builder class for creating patterns against which to match stream data using a regular expression interface
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``1">
            <summary>
            Creates a new pattern without a register and adds a single-element transition that succeeds on every stream element seen
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a new pattern without a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on every stream element seen
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on every stream element seen
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator that sets the initial value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">A time-sensitive aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The register-value sensitive condition that must be met to consider the transition satisfied</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator initializing value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">A time-sensitive aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1,System.Boolean}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The time-sensitive, register-value sensitive condition that must be met to consider the transition satisfied</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The time-sensitive, register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator initializing value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The time-sensitive, register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.SingleElement``2(System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,``0,``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a single-element transition that succeeds on stream elements that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The time-sensitive, register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">A time-sensitive aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``1">
            <summary>
            Creates a new pattern without a register and adds a time-synchronous list transition that succeeds on every list of events seen
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},System.Boolean}})">
            <summary>
            Creates a new pattern without a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on every list of events seen
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},System.Boolean}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator that sets the initial value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{``0},``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">A time-sensitive aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1,System.Boolean}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The register-value sensitive condition that must be met to consider the transition satisfied</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator initializing value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{``0},``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">A time-sensitive aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{``0},``1,System.Boolean}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The time-sensitive, register-value sensitive condition that must be met to consider the transition satisfied</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{``0},``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The time-sensitive, register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator initializing value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{``0},``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.List{``0},``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The time-sensitive, register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">An aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ListElement``2(System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{``0},``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Int64,System.Collections.Generic.List{``0},``1,``1}})">
            <summary>
            Creates a new pattern with a register and adds a time-synchronous list transition that succeeds on event lists that match a condition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <param name="condition">The time-sensitive, register-value sensitive condition that must be met to consider the transition satisfied</param>
            <param name="aggregator">A time-sensitive aggregator mutator that updates the value of the register</param>
            <returns>A pattern with an updatable register whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.Epsilon``1">
            <summary>
            Creates a new pattern without a register and adds an epsilon transition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.Epsilon``2">
            <summary>
            Creates a new pattern with a register and adds an epsilon transition
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.Concat``3(Microsoft.StreamProcessing.Afa{``0,``1,``2},Microsoft.StreamProcessing.Afa{``0,``1,``2},Microsoft.StreamProcessing.Afa{``0,``1,``2}[])">
            <summary>
            Creates a new pattern resulting from the concatenation of other patterns
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <typeparam name="TAccumulator">The type of the accumulator in the underlying automaton</typeparam>
            <param name="pattern1">The first pattern in the concatenation</param>
            <param name="pattern2">The second pattern in the concatenation</param>
            <param name="patterns">Any remaining patterns to be concatenated, in order</param>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.OrConcat``3(Microsoft.StreamProcessing.Afa{``0,``1,``2},Microsoft.StreamProcessing.Afa{``0,``1,``2},Microsoft.StreamProcessing.Afa{``0,``1,``2}[])">
            <summary>
            Creates a new pattern resulting from the concatenation of other patterns, but where each individual pattern may result in a final state
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <typeparam name="TAccumulator">The type of the accumulator in the underlying automaton</typeparam>
            <param name="pattern1">The first pattern in the concatenation</param>
            <param name="pattern2">The second pattern in the concatenation</param>
            <param name="patterns">Any remaining patterns to be concatenated, in order</param>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.Or``3(Microsoft.StreamProcessing.Afa{``0,``1,``2},Microsoft.StreamProcessing.Afa{``0,``1,``2},Microsoft.StreamProcessing.Afa{``0,``1,``2}[])">
            <summary>
            Creates a new pattern resulting from the disjunction of other patterns
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <typeparam name="TAccumulator">The type of the accumulator in the underlying automaton</typeparam>
            <param name="pattern1">The first pattern in the disjunction</param>
            <param name="pattern2">The second pattern in the disjunction</param>
            <param name="patterns">Any remaining patterns to be disjunction, in order</param>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.KleeneStar``3(Microsoft.StreamProcessing.Afa{``0,``1,``2})">
            <summary>
            Creates a new pattern resulting from zero to many iterations of the given pattern
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <typeparam name="TAccumulator">The type of the accumulator in the underlying automaton</typeparam>
            <param name="pattern">The pattern to iterate</param>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.KleenePlus``3(Microsoft.StreamProcessing.Afa{``0,``1,``2})">
            <summary>
            Creates a new pattern resulting from one to many iterations of the given pattern
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <typeparam name="TAccumulator">The type of the accumulator in the underlying automaton</typeparam>
            <param name="pattern">The pattern to iterate</param>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ARegex.ZeroOrOne``3(Microsoft.StreamProcessing.Afa{``0,``1,``2})">
            <summary>
            Creates a new pattern resulting from zero or one instances of the given pattern
            </summary>
            <typeparam name="TInput">The type of stream input data</typeparam>
            <typeparam name="TRegister">The type of the register to be mutated as transitions occur</typeparam>
            <typeparam name="TAccumulator">The type of the accumulator in the underlying automaton</typeparam>
            <param name="pattern">The pattern to identify</param>
            <returns>A pattern whose first transition is the one just created</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.UngroupedAfaTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UngroupedAfaTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.UngroupedDAfaTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UngroupedDAfaTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.AlterLifetimePlanNode">
            <summary>
            A node in the query plan representing an alteration to the event lifetimes to a variable duration in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.AlterLifetimePlanNode.DurationFunction">
            <summary>
            States the duration for which the event lifetimes will be set.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.AlterLifetimePlanNode.IsConstantDuration">
            <summary>
            States whether the duration after this operation will be constant.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.AlterLifetimePlanNode.StartTimeSelector">
            <summary>
            The expression that is used to select event start time in this operator.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.AlterLifetimePlanNode.Kind">
            <summary>
            Indicates that the current node is a lifetime alteration operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.BeatPlanNode">
            <summary>
            A node in the query plan representing breaking up each event timeline into equal intervals.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BeatPlanNode.Offset">
            <summary>
            The offset value in the beat operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BeatPlanNode.Period">
            <summary>
            The period value in the beat operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BeatPlanNode.Kind">
            <summary>
            Indicates that the current node is a beat operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.BeatTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BeatTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BeatTemplate.Generate``2(Microsoft.StreamProcessing.BeatStreamable{``0,``1})">
            <summary>
            Generate a batch class definition to be used as a Beat pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            Beat pipe class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TPayload">The payload type.</typeparam>
            <returns>
            A type that is defined to be a subtype of UnaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TPayload"/>, <typeparamref name="TPayload"/>&gt;.
            </returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.ClipByConstantPlanNode">
            <summary>
            A node in the query plan representing a lifetime truncation ("ClipByConstant") operation in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.ClipByConstantPlanNode.Kind">
            <summary>
            Indicates that the current node is a clip by constant operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ClipByConstantTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ClipByConstantTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ClipByConstantTemplate.Generate``2(Microsoft.StreamProcessing.ClipByConstantStreamable{``0,``1})">
            <summary>
            Generate a batch class definition to be used as a ClipByConstant pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            ClipByConstant pipe class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TPayload">The payload type.</typeparam>
            <returns>
            A type that is defined to be a subtype of UnaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TPayload"/>, <typeparamref name="TPayload"/>&gt;.
            </returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.ClipJoinPipe`3.leftIntervalMap">
            <summary>
            Stores intervals for active left events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.ClipJoinPipe`3.leftEdgeMap">
            <summary>
            Stores left start edges at <see cref="F:Microsoft.StreamProcessing.ClipJoinPipe`3.currTime"/>
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.ClipJoinPipe`3.leftEndPointHeap">
            <summary>
            Stores left end edges at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.ClipJoinPipe`3.currTime"/>.
            These can originate from edge end events or interval events.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ClipJoinTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ClipJoinTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ClipJoinTemplate.Generate``3(Microsoft.StreamProcessing.ClipJoinStreamable{``0,``1,``2})">
            <summary>
            Generate a batch class definition to be used as a Clip pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            aggregate class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TLeft">The payload type for the left side.</typeparam>
            <typeparam name="TRight">The payload type for the right side.</typeparam>
            <returns>
            A type that is defined to be a subtype of BinaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TLeft"/>, <typeparamref name="TKey"/>, <typeparamref name="TRight"/>&gt;.
            </returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedClipJoinPipe`4.PartitionEntry.leftIntervalMap">
            <summary>
            Stores intervals for active left events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedClipJoinPipe`4.PartitionEntry.leftEdgeMap">
            <summary>
            Stores left start edges at <see cref="F:Microsoft.StreamProcessing.PartitionedClipJoinPipe`4.PartitionEntry.currTime"/>
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedClipJoinPipe`4.PartitionEntry.leftEndPointHeap">
            <summary>
            Stores left end edges at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.PartitionedClipJoinPipe`4.PartitionEntry.currTime"/>.
            These can originate from edge end events or interval events.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ColumnToRowPlanNode">
            <summary>
            A node in the query plan representing a shift from column-oriented data to row-oriented in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.ColumnToRowPlanNode.Kind">
            <summary>
            Indicates that the current node is a columnar-to-row operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ColumnToRowTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ColumnToRowTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.DisjointUnionPipe`2.ExtractGlobalPunctuations(Microsoft.StreamProcessing.StreamMessage{`0,`1})">
            <summary>
            Removes all global punctuations from the batch, and returns the maximum found
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.EndEdgeFreeOutputPlanNode">
            <summary>
            A node in the query plan representing function application to all input rows.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.EndEdgeFreeOutputPlanNode.Kind">
            <summary>
            Indicates that the current node coalesces physical edges so that there are only intervals and no end edges.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.EndEdgeFreeOutputTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.EndEdgeFreeOutputTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.EndEdgeFreeOutputTemplate.Generate``2(Microsoft.StreamProcessing.EndEdgeFreeOutputStreamable{``0,``1})">
            <summary>
            Generate a batch class definition to be used as a EndEdgeFreeOutputStreamable pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            union pipe class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TPayload">The payload type.</typeparam>
            <returns>
            A type that is defined to be a subtype of UnaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TPayload"/>, <typeparamref name="TPayload"/>&gt;.
            </returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.EquiJoinPipe`4.leftIntervalMap">
            <summary>
            Stores left intervals starting at <see cref="F:Microsoft.StreamProcessing.EquiJoinPipe`4.currTime"/>.
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.EquiJoinPipe`4.nextRightTime"/> is caught up to the left edge time and the
            left edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.EquiJoinPipe`4.leftEdgeMap">
            <summary>
            Stores left start edges at <see cref="F:Microsoft.StreamProcessing.EquiJoinPipe`4.currTime"/>
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.EquiJoinPipe`4.nextRightTime"/> is caught up to the left edge time and the
            left edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.EquiJoinPipe`4.endPointHeap">
            <summary>
            Stores end edges for the current join at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.EquiJoinPipe`4.currTime"/>.
            These can originate from edge end events or interval events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.EquiJoinPipe`4.rightIntervalMap">
            <summary>
            Stores right intervals starting at <see cref="F:Microsoft.StreamProcessing.EquiJoinPipe`4.currTime"/>.
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.EquiJoinPipe`4.nextRightTime"/> is caught up to the right edge time and the
            right edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.EquiJoinPipe`4.rightEdgeMap">
            <summary>
            Stores right start edges at <see cref="F:Microsoft.StreamProcessing.EquiJoinPipe`4.currTime"/>
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.EquiJoinPipe`4.nextRightTime"/> is caught up to the right edge time and the
            right edge is processable.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.EquiJoinTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.EquiJoinTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.leftIntervalMap">
            <summary>
            Stores left intervals starting at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.currTime"/>.
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.nextRightTime"/> is caught up to the left edge time and the
            left edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.leftEdgeMap">
            <summary>
            Stores left start edges at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.currTime"/>
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.nextRightTime"/> is caught up to the left edge time and the
            left edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.endPointHeap">
            <summary>
            Stores end edges for the current join at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.currTime"/>.
            These can originate from edge end events or interval events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.rightIntervalMap">
            <summary>
            Stores right intervals starting at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.currTime"/>.
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.nextRightTime"/> is caught up to the right edge time and the
            right edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.rightEdgeMap">
            <summary>
            Stores right start edges at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.currTime"/>
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.nextRightTime"/> is caught up to the right edge time and the
            right edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.isLeftComplete">
            <summary>
            True if left has reached StreamEvent.InfinitySyncTime
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipe`5.PartitionEntry.isRightComplete">
            <summary>
            True if right has reached StreamEvent.InfinitySyncTime
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.leftIntervalMap">
            <summary>
            Stores left intervals starting at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.currTime"/>.
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.nextRightTime"/> is caught up to the left edge time and the
            left edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.leftEdgeMap">
            <summary>
            Stores left start edges at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.currTime"/>
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.nextRightTime"/> is caught up to the left edge time and the
            left edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.endPointHeap">
            <summary>
            Stores end edges for the current join at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.currTime"/>.
            These can originate from edge end events or interval events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.rightIntervalMap">
            <summary>
            Stores right intervals starting at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.currTime"/>.
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.nextRightTime"/> is caught up to the right edge time and the
            right edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.rightEdgeMap">
            <summary>
            Stores right start edges at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.currTime"/>
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.nextRightTime"/> is caught up to the right edge time and the
            right edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.isLeftComplete">
            <summary>
            True if left has reached StreamEvent.InfinitySyncTime
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeCompound`5.PartitionEntry.isRightComplete">
            <summary>
            True if right has reached StreamEvent.InfinitySyncTime
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.leftIntervalMap">
            <summary>
            Stores left intervals starting at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.currTime"/>.
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.nextRightTime"/> is caught up to the left edge time and the
            left edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.leftEdgeMap">
            <summary>
            Stores left start edges at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.currTime"/>
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.nextRightTime"/> is caught up to the left edge time and the
            left edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.endPointHeap">
            <summary>
            Stores end edges for the current join at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.currTime"/>.
            These can originate from edge end events or interval events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.rightIntervalMap">
            <summary>
            Stores right intervals starting at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.currTime"/>.
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.nextRightTime"/> is caught up to the right edge time and the
            right edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.rightEdgeMap">
            <summary>
            Stores right start edges at <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.currTime"/>
            FastMap visibility means that <see cref="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.nextRightTime"/> is caught up to the right edge time and the
            right edge is processable.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.isLeftComplete">
            <summary>
            True if left has reached StreamEvent.InfinitySyncTime
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedEquiJoinPipeSimple`4.PartitionEntry.isRightComplete">
            <summary>
            True if right has reached StreamEvent.InfinitySyncTime
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.FixedIntervalEquiJoinPipe`4.leftIntervalMap">
            <summary>
            Stores left intervals valid for <see cref="F:Microsoft.StreamProcessing.FixedIntervalEquiJoinPipe`4.currTime"/>.
            FastMap visibility is not used.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.FixedIntervalEquiJoinPipe`4.rightIntervalMap">
            <summary>
            Stores right intervals valid for <see cref="F:Microsoft.StreamProcessing.FixedIntervalEquiJoinPipe`4.currTime"/>.
            FastMap visibility is not used.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.FixedIntervalEquiJoinPipe`4.endPointHeap">
            <summary>
            Stores end edges for the current join intervals, i.e. after <see cref="F:Microsoft.StreamProcessing.FixedIntervalEquiJoinPipe`4.currTime"/>.
            Left intervals have a positive index, right intervals have a negative index.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.FixedIntervalEquiJoinTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FixedIntervalEquiJoinTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IncreasingOrderEquiJoinTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.IncreasingOrderEquiJoinTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.IncreasingOrderEquiJoinTemplate.Generate``4(Microsoft.StreamProcessing.BinaryStreamable{``0,``1,``2,``3},System.Linq.Expressions.Expression{System.Func{``1,``2,``3}})">
            <summary>
            Generate a batch class definition to be used as StartEdgeEquiJoin operator.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            aggregate class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TLeft">The payload type for the left side.</typeparam>
            <typeparam name="TRight">The payload type for the right side.</typeparam>
            <typeparam name="TResult">The payload type for the resulting stream.</typeparam>
            <returns>
            A type that is defined to be a subtype of BinaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TLeft"/>, <typeparamref name="TRight"/>, <typeparamref name="TKey"/>, <typeparamref name="TResult"/>&gt;.
            </returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStartEdgeEquiJoinPipe`5.PartitionEntry.leftEdgeMap">
            <summary>
            Currently active left start edges
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStartEdgeEquiJoinPipe`5.PartitionEntry.rightEdgeMap">
            <summary>
            Currently active right start edges
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStartEdgeEquiJoinPipe`5.PartitionEntry.isLeftComplete">
            <summary>
            True if left has reached StreamEvent.InfinitySyncTime
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedStartEdgeEquiJoinPipe`5.PartitionEntry.isRightComplete">
            <summary>
            True if right has reached StreamEvent.InfinitySyncTime
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StartEdgeEquiJoinTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StartEdgeEquiJoinTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ExtendLifetimeBaseTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ExtendLifetimeBaseTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ExtendLifetimeBaseTemplate.Generate``2(Microsoft.StreamProcessing.ExtendLifetimeStreamable{``0,``1},System.Int64)">
            <summary>
            Generate a batch class definition to be used as a Beat pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            union pipe class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TPayload">The payload type.</typeparam>
            <returns>
            A type that is defined to be a subtype of UnaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TPayload"/>, <typeparamref name="TPayload"/>&gt;.
            </returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.ExtendLifetimeNegativeTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ExtendLifetimeNegativeTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ExtendLifetimePlanNode">
            <summary>
            A node in the query plan representing a lifetime extension ("ExtendLifetime") operation in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.ExtendLifetimePlanNode.Kind">
            <summary>
            Indicates that the current node is a lifetime extension operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.ExtendLifetimePlanNode.Negative">
            <summary>
            States whether the "Negative" version of the operator was used
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.ExtendLifetimeTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ExtendLifetimeTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupedWindowPipe`5">
            <summary>
            Operator has has no support for ECQ
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupedWindowPlanNode`3">
            <summary>
            A node in the query plan representing a grouped window snapshot operation.
            </summary>
            <typeparam name="TInput">Input type of the aggregate operation</typeparam>
            <typeparam name="TState">State type of the aggregate operation</typeparam>
            <typeparam name="TResult">Result type of the aggregate operation</typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupedWindowPlanNode`3.Aggregate">
            <summary>
            The aggregate object used in the window operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupedWindowPlanNode`3.KeySelector">
            <summary>
            The function used to select key values in the window operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupedWindowPlanNode`3.FinalResultSelector">
            <summary>
            The function used to compute result values in the window operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupedWindowPlanNode`3.Kind">
            <summary>
            Indicates that the current node is a grouped window aggregation operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupedWindowTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.GroupedWindowTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.GroupedWindowTemplate.Generate``5(Microsoft.StreamProcessing.GroupedWindowStreamable{``0,``1,``2,``3,``4})">
            <summary>
            Generate a batch class definition to be used as an aggregate definition.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            aggregate class.
            </summary>
            <typeparam name="TKey">The key type for the aggregate.</typeparam>
            <typeparam name="TInput">The input type for the aggregate.</typeparam>
            <typeparam name="TOutput">The output type for the aggregate.</typeparam>
            <typeparam name="TState">The type for the accumulated state held by the aggregate.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>
            A type that is defined to be a subtype of UnaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TInput"/>&gt;.
            </returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupPlanNode">
            <summary>
            Represents a grouping operation in a Map-Reduce process.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupPlanNode.Kind">
            <summary>
            Indicates that the current node is a grouping operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupPlanNode.Previous">
            <summary>
            The previous node in the plan, the input to the grouping operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupPlanNode.InputKeyType">
            <summary>
            The type of the grouping key of the input stream.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupPlanNode.GroupingExpression">
            <summary>
            The expression used to group elements relative to a grouping key.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupPlanNode.ShuffleId">
            <summary>
            States the shuffle ID of the grouping operation.  If the operator is not a shuffle, this value should be int.MinValue.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupPlanNode.TotalBranches">
            <summary>
            States the number of branches participating in the grouping operation.  If the operator is not a shuffle, this value should be 1.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.GroupPlanNode.IsShuffle">
            <summary>
            States whether the current operation is a shuffle.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.GroupPlanNode.Accept(Microsoft.StreamProcessing.IPlanNodeVisitor)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.GroupTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.GroupTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.leftIntervalMap">
            <summary>
            Stores left intervals starting at <see cref="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.currTime"/>.
            FastMap visibility means that the interval is currently joined by at least one event on the right.
            When the interval is not joined, it is "invisible".
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.leftEdgeMap">
            <summary>
            Stores left start edges at <see cref="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.currTime"/>
            FastMap visibility means that the interval is currently joined by at least one event on the right.
            When the interval is not joined, it is "invisible".
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.leftEndPointHeap">
            <summary>
            Stores left end edges at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.currTime"/>.
            These can originate from edge end events or interval events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.rightMap">
            <summary>
            Stores the right events present at <see cref="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.currTime"/>
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.rightEndEdges">
            <summary>
            Stores right end edges for <see cref="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.currTime"/>, excluding interval endpoints
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.rightEndPointHeap">
            <summary>
            Stores right endpoints at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.LeftAntiSemiJoinPipe`3.currTime"/>, originating
            from intervals.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.LeftAntiSemiJoinTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.LeftAntiSemiJoinTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.LeftAntiSemiJoinTemplate.Generate``3(Microsoft.StreamProcessing.LeftAntiSemiJoinStreamable{``0,``1,``2})">
            <summary>
            Generate a batch class definition to be used as a Clip pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            aggregate class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TLeft">The payload type for the left side.</typeparam>
            <typeparam name="TRight">The payload type for the right side.</typeparam>
            <returns>
            A type that is defined to be a subtype of BinaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TLeft"/>, <typeparamref name="TKey"/>, <typeparamref name="TRight"/>&gt;.
            </returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.leftIntervalMap">
            <summary>
            Stores left intervals starting at <see cref="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.currTime"/>.
            FastMap visibility means that the interval is currently joined by at least one event on the right.
            When the interval is not joined, it is "invisible".
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.leftEdgeMap">
            <summary>
            Stores left start edges at <see cref="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.currTime"/>
            FastMap visibility means that the interval is currently joined by at least one event on the right.
            When the interval is not joined, it is "invisible".
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.leftEndPointHeap">
            <summary>
            Stores left end edges at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.currTime"/>.
            These can originate from edge end events or interval events.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.rightMap">
            <summary>
            Stores the right events present for this partition at <see cref="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.currTime"/>
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.rightEndEdges">
            <summary>
            Stores right end edges for <see cref="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.currTime"/>, excluding interval endpoints
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.rightEndPointHeap">
            <summary>
            Stores right endpoints at some point in the future, i.e. after <see cref="F:Microsoft.StreamProcessing.PartitionedLeftAntiSemiJoinPipe`4.PartitionEntry.currTime"/>, originating
            from intervals.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.OperationalHint">
            <summary>
            Gives a hint as to what methods should be used for an operator
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.OperationalHint.None">
            <summary>
            No hint given. So, for instance:
            - Use a standard two-input reducer that partitions data by hash buckets.
            - Use a standard streaming symmetric hash join operator.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.OperationalHint.Asymmetric">
            <summary>
            Assume that the pair of inputs are vastly different in size, with the left input much smaller.
            - Use a two-input reducer where the left side input is multicast to every reducer instance, and the right side is sprayed across instances.
            - Use a variant of join where the left side is much smaller than the right side, which will allow us to optimize join on multiple cores by multicasting the smaller side to every instance of the join operator.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IMapDefinition`5">
            <summary>
            Placeholder interface for an operation that represents a map-reduce function
            </summary>
            <typeparam name="TOuterKey">Type of the outer grouping key</typeparam>
            <typeparam name="TMapInputLeft">Type of the left input to the map-reduce</typeparam>
            <typeparam name="TMapInputRight">Type of the right input to the map-reduce</typeparam>
            <typeparam name="TInnerKey">Type of the inner grouping key</typeparam>
            <typeparam name="TReduceInput">Type of the data fed to the reducer</typeparam>
        </member>
        <member name="T:Microsoft.StreamProcessing.IMapDefinition`4">
            <summary>
            Placeholder interface for an operation that represents a map-reduce function
            </summary>
            <typeparam name="TMapInputLeft">Type of the left input to the map-reduce</typeparam>
            <typeparam name="TMapInputRight">Type of the right input to the map-reduce</typeparam>
            <typeparam name="TInnerKey">Type of the inner grouping key</typeparam>
            <typeparam name="TReduceInput">Type of the data fed to the reducer</typeparam>
        </member>
        <member name="T:Microsoft.StreamProcessing.ConnectableStreamable`2">
            <summary>
            WARNING:: this is not a 'true' connectable because it assumes that Connect happens only after all consumers
            have Subscribed (for internal use only, not safe for topical use)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="T:Microsoft.StreamProcessing.ConnectableStreamableBase`2">
            <summary>
            WARNING:: this is not a 'true' connectable because it assumes that Connect happens only after all consumers
            have Subscribed (for internal use only, not safe for topical use)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="T:Microsoft.StreamProcessing.IConnectableStreamable`2">
            <summary>
            Interface for dynamically connecting new streamable outputs to an existing stream
            </summary>
            <typeparam name="TKey">Grouping key type for data flowing through the system</typeparam>
            <typeparam name="TPayload">Event payload type for data flowing through the system</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.IConnectableStreamable`2.Connect">
            <summary>
            Connect establishes upstream stream processing.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.MulticastPlanNode">
            <summary>
            Represents an operation in a stream to allow multiple subscribers to receive the same messages.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.MulticastPlanNode.Kind">
            <summary>
            Indicates that the current node is a multicast operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionPlanNode">
            <summary>
            Represents a grouping operation in a Map-Reduce process.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionPlanNode.Kind">
            <summary>
            Indicates that the current node is a grouping operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionPlanNode.Previous">
            <summary>
            The previous node in the plan, the input to the grouping operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionPlanNode.GroupingExpression">
            <summary>
            The expression used to group elements relative to a grouping key.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PartitionPlanNode.PunctuationLag">
            <summary>
            The amount of time that global punctuations are delayed to account for possible partition skew.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PartitionPlanNode.Accept(Microsoft.StreamProcessing.IPlanNodeVisitor)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.PointAtEndPlanNode">
            <summary>
            A node in the query plan representing a lifetime transformation moving the lifetime to a unit interval ("PointAtEnd") operation in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PointAtEndPlanNode.Kind">
            <summary>
            Indicates that the current node is an operation that adjusts every event to be an interval of length 1 beginning at the end of its original interval.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PointAtEndTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PointAtEndTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PointAtEndTemplate.Generate``2(Microsoft.StreamProcessing.PointAtEndStreamable{``0,``1})">
            <summary>
            Generate a batch class definition to be used as a Beat pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            union pipe class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TPayload">The payload type.</typeparam>
            <returns>
            A type that is defined to be a subtype of UnaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TPayload"/>, <typeparamref name="TPayload"/>&gt;.
            </returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.QuantizeLifetimePlanNode">
            <summary>
            A node in the query plan representing a lifetime transformation quantizing the start and end times along hopping boundaries in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.QuantizeLifetimePlanNode.Width">
            <summary>
            Represents the length of each event after transformation
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.QuantizeLifetimePlanNode.Skip">
            <summary>
            Represents the length whose multiples define the left (start) edge of each transformed lifetime
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.QuantizeLifetimePlanNode.Progress">
            <summary>
            Represents the length whose multiples define the left (start) edge of each transformed lifetime
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.QuantizeLifetimePlanNode.Offset">
            <summary>
            Represents the "zero" from which the interval begins skipping
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.QuantizeLifetimePlanNode.Kind">
            <summary>
            Indicates that the current node is an operation that adjusts every event to be aligned along temporal boundaries.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.QuantizeLifetimeTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.QuantizeLifetimeTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.RowToColumnPlanNode">
            <summary>
            A node in the query plan representing a shift from row-oriented data to column-oriented in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.RowToColumnPlanNode.Kind">
            <summary>
            Indicates that the current node is a row-to-column operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.RowToColumnTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.RowToColumnTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SelectManyPlanNode">
            <summary>
            A node in the query plan representing a SelectMany operation in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SelectManyPlanNode.Selector">
            <summary>
            The expression that is used to generate output events in this operator.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SelectManyPlanNode.IncludesKey">
            <summary>
            States whether the expression in the selector has access to the start edge of events.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SelectManyPlanNode.IncludesStartEdge">
            <summary>
            States whether the expression in the selector has access to the start edge of events.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SelectManyPlanNode.Kind">
            <summary>
            Indicates that the current node is a select many operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SelectManyTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectManyTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SelectManyTemplate.resultFields">
            <summary>
            All public instance fields of type TResult.
            Equal to the union of computedFields and swingingFields.
            REVIEW: Is this true? Can there be public fields that just aren't mentioned in the projection?
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SelectManyTemplate.computedFields">
            <summary>
            Subset of resultFields that are computed a row at a time.
            For each computed field, f, the table maps f to the the C# source for the value that is assigned to f for each row.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SelectManyTemplate.projectionReturningResultInstance">
            <summary>
            Needed when the projection function is optimized to a single select, but cannot be split into separate assignments to the columns
            of the result batch.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SelectPlanNode">
            <summary>
            A node in the query plan representing function application to all input rows.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SelectPlanNode.Selector">
            <summary>
            The expression that is used to generate output events in this operator.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SelectPlanNode.IncludesKey">
            <summary>
            States whether the expression in the selector has access to the start edge of events.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SelectPlanNode.IncludesStartEdge">
            <summary>
            States whether the expression in the selector has access to the start edge of events.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SelectPlanNode.Kind">
            <summary>
            Indicates that the current node is a select operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SelectTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SelectTemplate.destinationFields">
            <summary>
            All public instance fields of type TResult.
            Equal to the union of computedFields and swingingFields.
            REVIEW: Is this true? Can there be public fields that just aren't mentioned in the projection?
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SelectTemplate.computedFields">
            <summary>
            Subset of destinationFields that are computed a row at a time.
            For each computed field, f, the table maps f to the the C# source for the value that is assigned to f for each row.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SelectTemplate.swingingFields">
            <summary>
            Pairs of result type fields and source type fields where the result field
            is just assigned from a source field.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SelectTemplate.nonSwingingFields">
            <summary>
            Subset of sourceFields that are *not* just assigned to a result field.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SelectTemplate.ProjectionReturningResultInstance">
            <summary>
            Needed when the projection function cannot be split into separate assignments to the columns
            of the result batch.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SelectTemplate.needSourceInstance">
            <summary>
            Needed when the projection function references the parameter (i.e., source instance) directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SessionWindowPlanNode">
            <summary>
            A node in the query plan representing a session window truncation ("SessionTimeoutWindow") operation in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SessionWindowPlanNode.SessionTimeout">
            <summary>
            Timeout for closing the current session
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SessionWindowPlanNode.MaximumDuration">
            <summary>
            The max duration of a session timeout window
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SessionWindowPlanNode.Kind">
            <summary>
            Indicates that the current node is a session window operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SessionWindowTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SessionWindowTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SessionWindowTemplate.Generate``2(Microsoft.StreamProcessing.SessionWindowStreamable{``0,``1})">
            <summary>
            Generate a batch class definition to be used as a Beat pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            union pipe class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TPayload">The payload type.</typeparam>
            <returns>
            A type that is defined to be a subtype of UnaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TPayload"/>, <typeparamref name="TPayload"/>&gt;.
            </returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.ShuffleTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ShuffleTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.AggregateTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.AggregateTemplate.Transform(System.Linq.Expressions.NewExpression,System.Type)">
            <summary>
            The compute result function is e => new { f1 = e1, f2 = e2, ...}), i.e., creating an anonymous type
            Transform it into { dest_f1[c] := e1; dest_f2[c] := e2; ... }
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.AggregateTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowStartEdgeTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SnapshotWindowStartEdgeTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowPriorityQueueTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SnapshotWindowPriorityQueueTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowTumblingTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SnapshotWindowTumblingTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowSlidingTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SnapshotWindowSlidingTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowHoppingTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SnapshotWindowHoppingTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowHoppingPipe`5">
            <summary>
            Operator that has a simple queue (we know that Ve values are non-decreasing and number of entries is capped)
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowHoppingPipeSimple`4">
            <summary>
            Operator that has a simple queue (we know that Ve values are non-decreasing and number of entries is capped)
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowHoppingPipe`4">
            <summary>
            Operator that has a simple queue (we know that Ve values are non-decreasing and number of entries is capped)
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowHoppingPipeSimple`3">
            <summary>
            Operator that has a simple queue (we know that Ve values are non-decreasing and number of entries is capped)
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowPriorityQueuePipe`5">
            <summary>
            Operator that uses a full-fledged priority queue as ECQ
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowPriorityQueuePipeSimple`4">
            <summary>
            Operator that uses a full-fledged priority queue as ECQ
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowPriorityQueuePipe`4">
            <summary>
            Operator that uses a full-fledged priority queue as ECQ
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowPriorityQueuePipeSimple`3">
            <summary>
            Operator that uses a full-fledged priority queue as ECQ
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowSlidingPipe`5">
            <summary>
            Operator that has a normal queue (elastic circular buffer) for ECQ (we know that Ve values are non-decreasing)
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowSlidingPipeSimple`4">
            <summary>
            Operator that has a normal queue (elastic circular buffer) for ECQ (we know that Ve values are non-decreasing)
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowSlidingPipe`4">
            <summary>
            Operator that has a normal queue (elastic circular buffer) for ECQ (we know that Ve values are non-decreasing)
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowSlidingPipeSimple`3">
            <summary>
            Operator that has a normal queue (elastic circular buffer) for ECQ (we know that Ve values are non-decreasing)
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowPlanNode`3">
            <summary>
            A node in the query plan representing a batched window snapshot operation.
            </summary>
            <typeparam name="TInput">Input type of the aggregate operation</typeparam>
            <typeparam name="TState">State type of the aggregate operation</typeparam>
            <typeparam name="TResult">Result type of the aggregate operation</typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.SnapshotWindowPlanNode`3.InternalAggregateType">
            <summary>
            States what kind of algorithm is being used for the computation of aggregate state.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SnapshotWindowPlanNode`3.Aggregate">
            <summary>
            States precisely what aggregate is being computed.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SnapshotWindowPlanNode`3.Kind">
            <summary>
            Indicates that the current node is a snapshot window aggregate operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.AggregatePipeType">
            <summary>
            An enumeration of the available state management algorithm types.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.AggregatePipeType.StartEdge">
            <summary>
            States that the aggregate is being computed over a monotonically increasing set of data.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.AggregatePipeType.Sliding">
            <summary>
            States that the aggregate is being computed over a sliding window, so state management is done using a queue of unknown size cap.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.AggregatePipeType.Hopping">
            <summary>
            States that the aggregate is being computed over a hopping window, so state management is done using a queue of known size cap.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.AggregatePipeType.PriorityQueue">
            <summary>
            States that a priority queue is being used to manage aggregate states.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.AggregatePipeType.Tumbling">
            <summary>
            States that the aggregate is being computed over a tumbling window and that state management is at its simplest.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowStartEdgePipe`5">
            <summary>
            Operator only has to deal with start edges
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowStartEdgePipeSimple`4">
            <summary>
            Operator only has to deal with start edges
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowStartEdgePipe`4">
            <summary>
            Operator only has to deal with start edges
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowStartEdgePipeSimple`3">
            <summary>
            Operator only has to deal with start edges
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowTumblingPipe`5">
            <summary>
            Operator for tumbling windows, has no support for ECQ
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PartitionedSnapshotWindowTumblingPipeSimple`4">
            <summary>
            Operator for tumbling windows, has no support for ECQ
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowTumblingPipe`4">
            <summary>
            Operator for tumbling windows, has no support for ECQ
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SnapshotWindowTumblingPipeSimple`3">
            <summary>
            Operator for tumbling windows, has no support for ECQ
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SprayPlanNode">
            <summary>
            Represents an operation in a Map-Reduce job that sprays data to different nodes.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SprayPlanNode.TotalBranches">
            <summary>
            States the maximum number of delegated branches against which to spray data.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SprayPlanNode.Multicast">
            <summary>
            States whether the spray operation sends all data to all nodes.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SprayPlanNode.SpraySortOrderComparer">
            <summary>
            Returns the expression for the comparer used to determine spray sort order.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.SprayPlanNode.Kind">
            <summary>
            Indicates that the current node is a spray operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StitchPlanNode">
            <summary>
            A node in the query plan representing a unification of like events with adjacent lifetime intervals.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StitchPlanNode.Kind">
            <summary>
            Indicates that the current node is a stitch operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StitchTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StitchTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StitchTemplate.Generate``2(Microsoft.StreamProcessing.StitchStreamable{``0,``1})">
            <summary>
            Generate a batch class definition to be used as a Stitch pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            Stitch pipe class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TPayload">The payload type.</typeparam>
            <returns>
            A type that is defined to be a subtype of UnaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TPayload"/>, <typeparamref name="TPayload"/>&gt;.
            </returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.UngroupPlanNode">
            <summary>
            Represents an ungrouping operation in a Map-Reduce process.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UngroupPlanNode.Previous">
            <summary>
            The previous node in the plan, the input to the ungrouping operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UngroupPlanNode.ResultExpression">
            <summary>
            The expression used to retrieve elements relative to a grouping key.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UngroupPlanNode.InputKeyType">
            <summary>
            The type of the grouping key of the input stream.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UngroupPlanNode.GroupPayloadType">
            <summary>
            The payload type of the input groups.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UngroupPlanNode.Kind">
            <summary>
            Indicates that the current node is an ungroup operation.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UngroupPlanNode.Accept(Microsoft.StreamProcessing.IPlanNodeVisitor)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.UngroupTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UngroupTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.UngroupTemplate.ProjectionReturningResultInstance">
            <summary>
            Needed when the projection function cannot be split into separate assignments to the columns
            of the result batch.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.UnionPlanNode">
            <summary>
            Indicates that the current node is a union operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UnionPlanNode.IsDisjoint">
            <summary>
            States whether the two inputs of the union operation are considered to be disjoint.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UnionPlanNode.Kind">
            <summary>
            Indicates that the current node is a union operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.UnionTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UnionTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UnionTemplate.GenerateUnionPipeClass``2(Microsoft.StreamProcessing.UnionStreamable{``0,``1})">
            <summary>
            Generate a batch class definition to be used as a Union pipe.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            union pipe class.
            </summary>
            <typeparam name="TKey">The key type for both sides.</typeparam>
            <typeparam name="TPayload">The payload type.</typeparam>
            <returns>
            A type that is defined to be a subtype of BinaryPipe&lt;<typeparamref name="TKey"/>,<typeparamref name="TPayload"/>, <typeparamref name="TPayload"/>, <typeparamref name="TKey"/>, <typeparamref name="TPayload"/>&gt;.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.MultiStringTransformer.Vectorize.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Transforms e.f.M(...) into var vec_i = f_col.M(..., current_bit_vector, true)
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.MultiStringTransformer.MultiStringHasVectorImplementation(System.String)">
            <summary>
            Returns true iff MultiString has a vector implementation that returns
            a bit vector that represents occupancy information.
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.MultiStringTransformer.WrapperTransformer">
            <summary>
            Replaces certain calls to methods on the String class into equivalent calls
            from the MultiString.MultiStringWrapper class by replacing the receiver
            of the method call with a variable of type MultiString.MultiStringWrapper.
            That variable is kept in a table so clients of this class can generate
            intializations for them in code before the transformed expression is executed.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.MultiStringTransformer.WrapperTransformer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Translate calls to method calls on multistrings into calls to MultiString wrapper methods
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.MultiStringTransformer.WrapperTransformer.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Translate calls to property getters on multistrings into calls to MultiString wrapper methods
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.WherePlanNode">
            <summary>
            A node in the query plan representing a filtration ("where") operation in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.WherePlanNode.Predicate">
            <summary>
            The predicate that is used to filter events in this operator.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.WherePlanNode.Kind">
            <summary>
            Indicates that the current node is a where (filter) operation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.WhereTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.WhereTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.BinaryPipe`4">
            <summary>
            Supports implementation of binary pipes that consume inputs in sync time order.
            Implements streaming merge sort. The only distinction between a conventional merge sort and a streaming
            merge sort is that you can't always peek at the next element in one of the inputs. However, we can
            keep track of the last consumed input and assume that whatever the next element is, it will not
            have a lower sync time.
            </summary>
            <remarks>
            It is important in demonstrating correctness that at least one buffer is empty at any point. Intuitively,
            this is because the existence of buffered elements implies that one input is more advanced than the other.
            It is not possible for each to be ahead of the other. Demonstration is trivial by induction (both queues
            are initially empty).
            </remarks>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPipe`4.Left">
            <summary>
            Gets the observer the binary pipe uses to listen to input from the LHS.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPipe`4.Right">
            <summary>
            Gets the observer the binary pipe uses to listen to input from the RHS.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.BinaryPipe`4.lastCTI">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.#ctor(Microsoft.StreamProcessing.IStreamable{`0,`3},Microsoft.StreamProcessing.IStreamObserver{`0,`3})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="stream"></param>
            <param name="observer"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.OnFlush">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.OnCompleted">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPipe`4.LeftInputHasState">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPipe`4.RightInputHasState">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.ProcessBothBatches(Microsoft.StreamProcessing.StreamMessage{`0,`1},Microsoft.StreamProcessing.StreamMessage{`0,`2},System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="leftBatch"></param>
            <param name="leftBatchDone"></param>
            <param name="leftBatchFree"></param>
            <param name="rightBatch"></param>
            <param name="rightBatchDone"></param>
            <param name="rightBatchFree"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.ProcessLeftBatch(Microsoft.StreamProcessing.StreamMessage{`0,`1},System.Boolean@,System.Boolean@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="leftBatch"></param>
            <param name="leftBatchDone"></param>
            <param name="leftBatchFree"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.ProcessRightBatch(Microsoft.StreamProcessing.StreamMessage{`0,`2},System.Boolean@,System.Boolean@)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="rightBatch"></param>
            <param name="rightBatchDone"></param>
            <param name="rightBatchFree"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPipe`4.CurrentlyBufferedInputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPipe`4.CurrentlyBufferedLeftInputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPipe`4.CurrentlyBufferedRightInputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPipe`4.CurrentlyBufferedLeftKeyCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPipe`4.CurrentlyBufferedRightKeyCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.Reset">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.ProduceBinaryQueryPlan(Microsoft.StreamProcessing.PlanNode,Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPipe`4.ProduceQueryPlan(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="F:Microsoft.StreamProcessing.BinaryPipe`4.ObserverBase`2.isCompleted">
            <summary>
            Gets or sets a value indicating whether or not we're done with this input (received OnCompleted from this input
            or received OnError from either input).
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.BinaryPipe`4.ObserverBase`2.other">
            <summary>
            Gets the 'other' observer (the 'left' observer if this is 'right', the 'right' observer if this is 'left').
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.BinaryPlanNode">
            <summary>
            A node in the query plan representing an object with two inputs in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPlanNode.LeftPayloadType">
            <summary>
            The payload type of the left input stream to the binary operator.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPlanNode.RightPayloadType">
            <summary>
            The payload type of the right input stream to the binary operator.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPlanNode.#ctor(Microsoft.StreamProcessing.PlanNode,Microsoft.StreamProcessing.PlanNode,Microsoft.StreamProcessing.IBinaryObserver,System.Type,System.Type,System.Type,System.Type,System.Boolean,System.String)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="pipe"></param>
            <param name="keyType"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="payloadType"></param>
            <param name="isGenerated"></param>
            <param name="errorMessages"></param>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPlanNode.LeftInputHasState">
            <summary>
            States whether the left input has any accumulated state in the query.
            If true, then sending data via the right input might produce output.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPlanNode.CurrentlyBufferedLeftInputCount">
            <summary>
            Provides a count of events currently buffered from the left input awaiting computation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPlanNode.RightInputHasState">
            <summary>
            States whether the right input has any accumulated state in the query.
            If true, then sending data via the left input might produce output.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPlanNode.CurrentlyBufferedRightInputCount">
            <summary>
            Provides a count of events currently buffered from the right input awaiting computation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPlanNode.LeftPlanNode">
            <summary>
            The query plan node that provides the left input to this operator.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.BinaryPlanNode.RightPlanNode">
            <summary>
            The query plan node that provides the right input to this operator.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.BinaryPlanNode.Accept(Microsoft.StreamProcessing.IPlanNodeVisitor)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.JoinPlanNode">
            <summary>
            A node in the query plan representing a join operation in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.JoinPlanNode.Kind">
            <summary>
            Indicates that the current node is a join operation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.JoinPlanNode.JoinKind">
            <summary>
            Returns the kind of join represented by the current operator.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.JoinPlanNode.JoinExpressions">
            <summary>
            Returns the set of expressions employed by the current node to compute the join.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.JoinKind">
            <summary>
            Describes the kind of join used in a particular join query plan node.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.JoinKind.Clip">
            <summary>
            A clip operation, joining two streams relative to their respective intervals.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.JoinKind.EquiJoin">
            <summary>
            An equijoin between two streams.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.JoinKind.FixedIntervalEquiJoin">
            <summary>
            An equijoin where both streams are guaranteed to only contain constant-duration intervals.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.JoinKind.StartEdgeEquijoin">
            <summary>
            An equijoin where both streams are guaranteed to only contain start edges.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.JoinKind.IncreasingOrderEquiJoin">
            <summary>
            An equijoin where both streams are guaranteed to only contain start edges and use the same key comparer.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.JoinKind.LeftAntiSemiJoin">
            <summary>
            A left antisemijoin operation (i.e., a "where not exists" operation).
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Checkpointable">
            <summary>
            Represents an object that can be checkpointed and restored
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Checkpointable.ClassId">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Checkpointable.#ctor(System.Nullable{System.Boolean},Microsoft.StreamProcessing.QueryContainer)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Checkpointable.Checkpoint(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Checkpointable.CheckpointSchema(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Checkpointable.Restore(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Checkpointable.Reset">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Checkpointable.ValidateSchema(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Checkpointable.UpdatePointers">
            <summary>
            Cleanup method called during restoration to ensure that graph pointers refer to the right places
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Pipe`2">
            <summary>
            Data processor bound to a particular stream operator. When you subscribe to an operator tree,
            a pipe tree is constructed to process data.
            </summary>
            <typeparam name="TKey">Group key type.</typeparam>
            <typeparam name="TPayload">Output payload type.</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Pipe`2.Observer">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Pipe`2.Id">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Pipe`2.id">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.#ctor(Microsoft.StreamProcessing.IStreamable{`0,`1},Microsoft.StreamProcessing.IStreamObserver{`0,`1})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.Checkpoint(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.Restore(System.IO.Stream)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.OnCompleted">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.OnError(System.Exception)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.Dispose">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.DisposeState">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.OnFlush">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.FlushContents">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Pipe`2.CurrentlyBufferedOutputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Pipe`2.CurrentlyBufferedInputCount">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.ProduceQueryPlan(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Get a query plan of the actively running query rooted at this query node.
            </summary>
            <param name="previous">The previous node in the query plan.</param>
            <returns>The query plan node representing the current query artifact.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Pipe`2.GetPartitionExtractor``2">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.UnaryPipe`3">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UnaryPipe`3.OnNext(Microsoft.StreamProcessing.StreamMessage{`0,`1})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UnaryPipe`3.#ctor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UnaryPipe`3.#ctor(Microsoft.StreamProcessing.IStreamable{`0,`2},Microsoft.StreamProcessing.IStreamObserver{`0,`2})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.UnaryPlanNode">
            <summary>
            A node in the query plan representing an object with one input in the active, running query.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UnaryPlanNode.#ctor(Microsoft.StreamProcessing.PlanNode,Microsoft.StreamProcessing.IQueryObject,System.Type,System.Type,System.Type,System.Boolean,System.String)">
            <summary>
            Protected constructor for a new Unary plan node object.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UnaryPlanNode.Kind">
            <summary>
            States that the current node in the query plan is one that is constructed outside of the Microsoft.StreamProcessing namespace.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UnaryPlanNode.InputPayloadType">
            <summary>
            The payload type of the input stream to the unary operator.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.UnaryPlanNode.PreviousPlanNode">
            <summary>
            The query plan node that provides the input to this operator.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.UnaryPlanNode.Accept(Microsoft.StreamProcessing.IPlanNodeVisitor)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.PlanNode">
            <summary>
            A node in the query plan representing the objects in the active, running query.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PlanNode.#ctor(Microsoft.StreamProcessing.IQueryObject,System.Type,System.Type,System.Boolean,System.String)">
            <summary>
            Base constructor for a node in the query plan.
            </summary>
            <param name="pipe">A pointer to the current operating query object.</param>
            <param name="keyType">The type of the key for the current query object.</param>
            <param name="payloadType">The type of the payload for the current query object.</param>
            <param name="isGenerated">States whether the current operator was generated via code-gen.</param>
            <param name="compileErrors">States what issues the code-gen encountered during compilation, if any.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.PlanNode.GetCurrentlyBufferedOutputCount">
            <summary>
            Retrieve the count of tuples currently resident in memory as part of buffering events into pages.
            </summary>
            <returns>The count of tuples currently resident in memory as part of buffering events into pages.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PlanNode.GetCurrentlyBufferedInputCount">
            <summary>
            Retrieve the count of tuples currently resident in memory as part of input calculations.
            </summary>
            <returns>The count of tuples currently resident in memory as part of input calculations.</returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.PlanNode.IsGenerated">
            <summary>
            Tells whether the current node in the query plan was generated using code generation internally.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PlanNode.CodeGenReport">
            <summary>
            Tells what issues, if any, were encountered when trying to create a generated artifact.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PlanNode.Kind">
            <summary>
            Describes the kind of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PlanNode.KeyType">
            <summary>
            Reports the grouping key type of the running query node.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.PlanNode.PayloadType">
            <summary>
            Reports the payload type of the running query node.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.PlanNode.ToString">
            <summary>
            Provides a string representation of the current node.
            </summary>
            <returns>A string representation of the current node.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.PlanNode.PrintConciseGeneralState(System.Text.StringBuilder,System.Int32)">
            <summary>
            Provides a string representation of the current node.
            </summary>
            <param name="builder">The builder to which plan information should be written.</param>
            <param name="indentLevel">The indentation level to which the printing of this node should be printed.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.PlanNode.Accept(Microsoft.StreamProcessing.IPlanNodeVisitor)">
            <summary>
            Visitor pattern acceptor method.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.IngressPlanNode">
            <summary>
            A node in the query plan representing a data source in the active, running query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IngressPlanNode.Kind">
            <summary>
            Returns the kind of plan node, which can then be used for type casting.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.IngressPlanNode.GetCurrentlyBufferedAppliedPolicyCount">
            <summary>
            Retrieve the count of tuples currently resident in memory as part of applying policies.
            </summary>
            <returns>The count of tuples currently resident in memory as part of applying policies.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IngressPlanNode.GetCurrentlyBufferedReorderCount">
            <summary>
            Retrieve the count of tuples currently resident in memory as part of temporal reordering.
            </summary>
            <returns>The count of tuples currently resident in memory as part of temporal reordering.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IngressPlanNode.Accept(Microsoft.StreamProcessing.IPlanNodeVisitor)">
            <summary>
            Visitor pattern acceptor method.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.PlanNodeKind">
            <summary>
            The kind of plan node.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Ingress">
            <summary>
            Represents a simple operation at the point of data input in the running query.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Egress">
            <summary>
            Represents a point of data output in the running query.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Fused">
            <summary>
            Represents a point of data input and output comprising the full running query.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Where">
            <summary>
            Represents an operator in a running query that filters the data to only those items that meet the given criterion.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Select">
            <summary>
            Represents an operator in a running query that applies a function over payloads (and optionally start-time or key value) to each row of the data.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.SelectMany">
            <summary>
            Represents an operator in a running query that applies a function to each row of the data, returning any number of rows of output per row of input.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.AlterLifetime">
            <summary>
            Represents an operator in a running query that alters event lifetimes.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.RowToColumn">
            <summary>
            Represents an operator in a running query that translates row-based data into column-based data.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.ColumnToRow">
            <summary>
            Represents an operator in a running query that translates column-based data into row-based data.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Multicast">
            <summary>
            Represents an operator that multicasts data to multiple other operators.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Union">
            <summary>
            Represents an operator that takes a union of multiple inputs.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Spray">
            <summary>
            Represents a spray operator in a Map-Reduce operation.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.SnapshotWindow">
            <summary>
            Represents an operator that generates a snapshot window.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.GroupedWindow">
            <summary>
            Represents an operator that generates a grouping snapshot window.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.CoalesceEndEdges">
            <summary>
            Represents an operator that condenses stream events into just start edges and intervals.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Beat">
            <summary>
            Represents a chop or beat operation, aligning edge times with beat boundaries.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Partition">
            <summary>
            Represents a temporal partitioning operation within a stream.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Group">
            <summary>
            Represents a grouping operation within a stream.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Ungroup">
            <summary>
            Represents an ungrouping operation within a stream.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Join">
            <summary>
            Represents a join operation within a stream.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Stitch">
            <summary>
            Stitch events by maximally merging adjacent events with the same payload
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.PointAtEnd">
            <summary>
            Convert events into point events at the original end time
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.Afa">
            <summary>
            Plan node for augmented finite automaton (AFA)
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.ExtendLifetime">
            <summary>
            Extend the lifetime of the events in the stream
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.ClipByConstant">
            <summary>
            Truncate the lifetime of the events to a given constant
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.SessionWindow">
            <summary>
            Alter the lifetime of events so that they conform to sessions relative to a given timeout
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.QuantizeLifetime">
            <summary>
            Adjust the start and end times along a set of boundary points
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.PlanNodeKind.UserDefined">
            <summary>
            Represents an operator that is defined externally from the library
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IPlanNodeVisitor">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.IPlanNodeVisitor.Visit(Microsoft.StreamProcessing.PlanNode)">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.QueryContainer">
            <summary>
            A container object that represents a stream query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.QueryContainer.Surrogate">
            <summary>
            ISurrogate to be used in serialization in checkpoints and serialized StreamMessage
            for payload types which can not be serialized otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.QueryContainer.#ctor">
            <summary>
            Creates a new instance of a query container for use in checkpointable queries.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.QueryContainer.#ctor(Microsoft.StreamProcessing.Serializer.ISurrogate)">
            <summary>
            Creates a new instance of a query container for use in checkpointable queries.
            </summary>
            <param name="surrogate">An object that offers serialization surrogacy.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.QueryContainer.Restore(System.IO.Stream)">
            <summary>
            Start a query, with or without a previously checkpointed state.
            </summary>
            <param name="inputStream">The stream from which query state should be retrieved.</param>
            <returns>A Process object that represents an active, running query that can be checkpointed.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Process">
            <summary>
            A class representing a running query that can be checkpointed.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Process.Checkpoint(System.IO.Stream)">
            <summary>
            Quiesce the currently running query and checkpoint its state to the given stream.
            </summary>
            <param name="outputStream">The stream to which the checkpoint is recorded.</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Process.Flush">
            <summary>
            Flushes batched output events
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Process.PotentiallyQuietIngressSites">
            <summary>
            Returns the set of ingress sites that may be blocking result creation due to
            lack of input data.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Process.GetQueryPlanAtEgress(System.String)">
            <summary>
            Returns the internal query plan of the actively running stream query rooted at the given point of egress.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Process.QueryPlan">
            <summary>
            Returns the internal query plan of the actively running stream query.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamScheduler">
            <summary>
            Class to set scheduling strategy for Trill (via Microsoft.StreamProcessing.Config.StreamScheduler)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamScheduler.Null">
            <summary>
            Library mode (no threads owned by Trill).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamScheduler.OwnedThreads(System.Int32,System.Boolean)">
            <summary>
            Trill creates and owns the specified number of threads for scheduling the processing.
            </summary>
            <param name="numCores"></param>
            <param name="affinitizeThreads"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamScheduler.Stop">
            <summary>
            Stop the scheduler.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.IShardedStreamable`2">
            <summary>
            Interface abstraction for a streamable that is physically sharded
            </summary>
            <typeparam name="TKey">Grouping key type for data in the query</typeparam>
            <typeparam name="TPayload">Event payload type for data in the query</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.IShardedStreamable`2.Query``1(System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.IStreamable{`0,`1},Microsoft.StreamProcessing.IStreamable{`0,``0}}})">
            <summary>
            Execute a unary query on all shards
            </summary>
            <typeparam name="TOutput">The type of event payload in the output</typeparam>
            <param name="query">The query to evaluate</param>
            <returns>A new sharded streamable comprised of the output of the query</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.IShardedStreamable`2.Query``2(Microsoft.StreamProcessing.Sharding.IShardedStreamable{`0,``0},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.IStreamable{`0,`1},Microsoft.StreamProcessing.IStreamable{`0,``0},Microsoft.StreamProcessing.IStreamable{`0,``1}}})">
            <summary>
            Execute a binary query on all shards
            </summary>
            <typeparam name="TPayload2">Event payload type for data from the second input</typeparam>
            <typeparam name="TOutput">The type of event payload in the output</typeparam>
            <param name="input2">The second input to the binary query</param>
            <param name="query">The query to evaluate</param>
            <returns>A new sharded streamable comprised of the output of the query</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.IShardedStreamable`2.ReKey``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Re-key the data stream shards
            </summary>
            <typeparam name="TNewKey">The type of the new key</typeparam>
            <param name="keySelector">Selector function for assigning new keys based on event payload</param>
            <returns>A new sharded streamable with the new key type and values</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.IShardedStreamable`2.ReDistribute(Microsoft.StreamProcessing.Sharding.ILocationDescriptor)">
            <summary>
            Re-distribute the data across shards
            </summary>
            <param name="newLocation">Assign an optional new location descriptor</param>
            <returns>A new sharded streamable with the new key type and values</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.IShardedStreamable`2.ReShard(Microsoft.StreamProcessing.Sharding.ILocationDescriptor)">
            <summary>
            Reshard the sharded streamable
            </summary>
            <param name="newLocation">Assign an optional new location descriptor</param>
            <returns>A new sharded streamable with the new key type and values</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.IShardedStreamable`2.Broadcast(Microsoft.StreamProcessing.Sharding.ILocationDescriptor)">
            <summary>
            Broadcast operation on a sharded streamable
            </summary>
            <param name="newLocation">Assign an optional new location descriptor</param>
            <returns>A new sharded streamable post-broadcast</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.IShardedStreamable`2.Multicast(Microsoft.StreamProcessing.Sharding.IDestinationDescriptor,Microsoft.StreamProcessing.Sharding.ILocationDescriptor)">
            <summary>
            Multicast operation on a sharded streamable
            </summary>
            <param name="destination">A destination desciption for the multicast operation</param>
            <param name="newLocation">Assign an optional new location descriptor</param>
            <returns>A new sharded streamable post-multicast</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.IShardedStreamable`2.SelectKey``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Calculate new payloads based on old payloads and sharding keys
            </summary>
            <typeparam name="TNewPayload">The type of the new payload</typeparam>
            <param name="selector">Selector function for new payloads based on the old payloads and the sharding key</param>
            <returns>A new sharded streamable with the same key and new payload type</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.ShardedStreamableExtensions">
            <summary>
            Extension methods on IShardedStreamable interface
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamableExtensions.Shuffle``3(Microsoft.StreamProcessing.Sharding.IShardedStreamable{``0,``2},System.Linq.Expressions.Expression{System.Func{``2,``1}},Microsoft.StreamProcessing.Sharding.ILocationDescriptor)">
            <summary>
            Shuffle operation on a sharded streamable
            </summary>
            <typeparam name="TKey">Grouping/sharding key type for input data</typeparam>
            <typeparam name="TNewKey">Grouping/sharding key type for output data</typeparam>
            <typeparam name="TPayload">Payload type for data flowing through the shuffle operation</typeparam>
            <param name="streamable">Input sharded streamable for the shuffle operation</param>
            <param name="shuffleSelector">Selector function to determine new shard keys</param>
            <param name="newLocation">Assign an optional new location descriptor</param>
            <returns>A new sharded streamable post-shuffle</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamableExtensions.Unshuffle``2(Microsoft.StreamProcessing.Sharding.IShardedStreamable{``0,``1})">
            <summary>
            Unshuffle operation on a sharded streamable (essentially, a unifying shuffle operation shuffling to a unity shard
            </summary>
            <typeparam name="TKey">Grouping/sharding key type for input data</typeparam>
            <typeparam name="TPayload">Payload type for data flowing through the shuffle operation</typeparam>
            <param name="streamable">Input sharded streamable for the shuffle operation</param>
            <returns>A new sharded streamable post-shuffle</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamableExtensions.WritePropertiesToStream``2(Microsoft.StreamProcessing.Sharding.IShardedStreamable{``0,``1},System.IO.Stream)">
            <summary>
            Write stream properties to specified .NET stream
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TPayload"></typeparam>
            <param name="streamable"></param>
            <param name="stream"></param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.ILocationDescriptor">
            <summary>
            Interface that provides to an operation on an IShardedStreamable, a description of the location
            for the shards produced as a result of the operation. For example, on a multi-core machine, the
            location may be the number of result shards.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ILocationDescriptor.GetLocation">
            <summary>
            Gets a representation of the location
            </summary>
            <returns>A representation of the location</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.IDestinationDescriptor">
            <summary>
            Interface that provides to the "Multicast" operation, a description of how individual events
            should be routed, i.e., to which destination output stream(s) a given event should be routed to.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.IDestinationDescriptor.GetDestination">
            <summary>
            Gets a representation of the destination
            </summary>
            <returns>A representation of the destination</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.LocalLocationDescriptor">
            <summary>
            Local location descriptor that identifies the number of shards that the data is shuffled into.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.LocalLocationDescriptor.#ctor(System.Int32)">
            <summary>
            Create a local location descriptor for use within a machine.
            </summary>
            <param name="numShards">Number of shards</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.LocalLocationDescriptor.GetLocation">
            <summary>
            Required for Shuffle
            </summary>
            <returns>Number of shards as an object</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.LocalDestinationDescriptor`2">
            <summary>
            Local location descriptor that identifies the number of shards that the data is shuffled into.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.LocalDestinationDescriptor`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,`1,System.Int32[]}})">
            <summary>
            Create a local location descriptor for use within a machine.
            </summary>
            <param name="destinationSelector">Expression that takes a key, a hash value for the key,
            and a payload, and returns the set of destinations (as an array of integer offsets into the
            array of destination streams)</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.LocalDestinationDescriptor`2.GetDestination">
            <summary>
            Required for Shuffle
            </summary>
            <returns>Number of shards as an object</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2">
            <summary>
            Concrete instantiation of the IShardedStreamable class
            </summary>
            <typeparam name="TKey">Grouping key type for data in the query</typeparam>
            <typeparam name="TPayload">Event payload type for data in the query</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.streamables">
            <summary>
            The base array of streams
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.#ctor">
            <summary>
            Default constructor - do not use directly
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.#ctor(Microsoft.StreamProcessing.IStreamable{`0,`1}[])">
            <summary>
            Constructor to create a new sharded streamable instance from an existing set of streamables
            </summary>
            <param name="streamables"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.#ctor(Microsoft.StreamProcessing.Sharding.IShardedStreamable{`0,`1}[])">
            <summary>
            Constructor to create a new sharded streamable instance from an existing set of sharded streamables
            </summary>
            <param name="shardedStreamables"></param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.Subscribe(Microsoft.StreamProcessing.IStreamObserver{`0,`1}[])">
            <summary>
            Chained subscribe call to connect an array of observers to the underlying streamables
            </summary>
            <param name="observers">The array of observers seeking to receive data from the streamables</param>
            <returns>The array of disposables that are created by the corresponding subscriptions</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.Query``1(System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.IStreamable{`0,`1},Microsoft.StreamProcessing.IStreamable{`0,``0}}})">
            <summary>
            Execute a unary query on all shards
            </summary>
            <typeparam name="TOutput">The type of event payload in the output</typeparam>
            <param name="query">The query to evaluate</param>
            <returns>A new sharded streamable comprised of the output of the query</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.Query``2(Microsoft.StreamProcessing.Sharding.IShardedStreamable{`0,``0},System.Linq.Expressions.Expression{System.Func{Microsoft.StreamProcessing.IStreamable{`0,`1},Microsoft.StreamProcessing.IStreamable{`0,``0},Microsoft.StreamProcessing.IStreamable{`0,``1}}})">
            <summary>
            Execute a binary query on all shards
            </summary>
            <typeparam name="TPayload2">Event payload type for data from the second input</typeparam>
            <typeparam name="TOutput">The type of event payload in the output</typeparam>
            <param name="input2">The second input to the binary query</param>
            <param name="query">The query to evaluate</param>
            <returns>A new sharded streamable comprised of the output of the query</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.ReShard(Microsoft.StreamProcessing.Sharding.ILocationDescriptor)">
            <summary>
            Reshard the sharded streamable
            </summary>
            <param name="newLocation">Assign an optional new location descriptor</param>
            <returns>A new sharded streamable with the new key type and values</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.Broadcast(Microsoft.StreamProcessing.Sharding.ILocationDescriptor)">
            <summary>
            Broadcast operation on a sharded streamable
            </summary>
            <param name="newLocation">Assign an optional new location descriptor</param>
            <returns>A new sharded streamable post-broadcast</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.SelectKey``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Calculate new payloads based on old payloads and sharding keys
            </summary>
            <typeparam name="TNewPayload">The type of the new payload</typeparam>
            <param name="selector">Selector function for new payloads based on the old payloads and the sharding key</param>
            <returns>A new sharded streamable with the same key and new payload type</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.ReKey``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Re-key the data stream shards
            </summary>
            <typeparam name="TNewKey">The type of the new key</typeparam>
            <param name="keySelector">Selector function for assigning new keys based on event payload</param>
            <returns>A new sharded streamable with the new key type and values</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.ReDistribute(Microsoft.StreamProcessing.Sharding.ILocationDescriptor)">
            <summary>
            Re-distribute the data across shards
            </summary>
            <param name="newLocation">Assign an optional new location descriptor</param>
            <returns>A new sharded streamable with the new key type and values</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.Multicast(Microsoft.StreamProcessing.Sharding.IDestinationDescriptor,Microsoft.StreamProcessing.Sharding.ILocationDescriptor)">
            <summary>
            Multicast operation on a sharded streamable
            </summary>
            <param name="destination">A destination desciption for the multicast operation</param>
            <param name="newLocation">Assign an optional new location descriptor</param>
            <returns>A new sharded streamable post-multicast</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.Split">
            <summary>
            Break up a sharded streamable into an array of sharded streamables, each consisting of only one shard
            </summary>
            <returns>Array of sharded streamables</returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.Sharding.ShardedStreamable`2.Streamables">
            <summary>
            Currently for internal use only - do not use
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.Streamable">
            <summary>
            Additional extension methods to provide sharding capabilities on top of streamables
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.Streamable.Shard``1(Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},System.Int32)">
            <summary>
            Shard a streamable
            </summary>
            <typeparam name="TPayload">The event payload type</typeparam>
            <param name="source">The stream to shard</param>
            <param name="shardArity">The number of shards to create</param>
            <returns>A sharded stream across <paramref name="shardArity"/> shards</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.Streamable.Unshard``1(Microsoft.StreamProcessing.Sharding.IShardedStreamable{Microsoft.StreamProcessing.Empty,``0})">
            <summary>
            Unshard operation on a non-partitioned stream
            </summary>
            <typeparam name="TPayload">The event payload type</typeparam>
            <param name="source">The stream to be returned from sharded to strictly a unified stream</param>
            <returns>A streamable brought together from all shards</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.Streamable.Unshard``2(Microsoft.StreamProcessing.Sharding.IShardedStreamable{Microsoft.StreamProcessing.PartitionKey{``0},``1})">
            <summary>
            Unshard operation on a partitioned stream
            </summary>
            <typeparam name="TKey">The partition key type</typeparam>
            <typeparam name="TPayload">The event payload type</typeparam>
            <param name="source">The stream to be returned from sharded to strictly a unified stream</param>
            <returns>A streamable brought together from all shards</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.ShardedStreamCache`2">
            <summary>
            Represents a node in the query graph where data is cached
            </summary>
            <typeparam name="TKey">Grouping key type for data in the query</typeparam>
            <typeparam name="TPayload">Event payload type for data in the query</typeparam>
        </member>
        <member name="F:Microsoft.StreamProcessing.Sharding.ShardedStreamCache`2.caches">
            <summary>
            The underlying array of cached streams corresponding to the array of cached streamables in the original sharded streamable
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamCache`2.#ctor(Microsoft.StreamProcessing.Sharding.IShardedStreamable{`0,`1})">
            <summary>
            Create a cached sharded streamable from an existing sharded streamable
            </summary>
            <param name="source">The sharded streamable to cache</param>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamCache`2.Dispose">
            <summary>
            Dispose of the cached shards
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.ShardedStreamableIO">
            <summary>
            Static class for extension methods on sharded streamables
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamableIO.Cache``2(Microsoft.StreamProcessing.Sharding.IShardedStreamable{``0,``1})">
            <summary>
            Create a cache from a sharded streamable
            </summary>
            <typeparam name="TKey">Grouping key type for data in the query</typeparam>
            <typeparam name="TPayload">Event payload type for data in the query</typeparam>
            <param name="source">The sharded streamable to cache</param>
            <returns>A cached sharded streamable</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.ShardedStreamSerializer`2">
            <summary>
            Serializer class for serializing data from sharded streams
            </summary>
            <typeparam name="TKey">Grouping key type for data in the query</typeparam>
            <typeparam name="TPayload">Event payload type for data in the query</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamSerializer`2.#ctor(Microsoft.StreamProcessing.Sharding.IShardedStreamable{`0,`1},System.IO.Stream[],System.Boolean,System.Boolean)">
            <summary>
            Constructor to take a sharded streamable and provide serialization features
            </summary>
            <param name="source">The sharded streamable from which data shall be serialized</param>
            <param name="destinations">The sinks to which serialized data should be written</param>
            <param name="aSync">States whether serialization should be able to be done asynchronously</param>
            <param name="writePropertiesToStream">States whether streams properties should be written to the binary stream</param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Sharding.ShardedStreamableSerializer">
            <summary>
            Static class to provide deserialization services to sharded streamable from and to binary streams
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamableSerializer.FromBinaryStream``2(System.IO.Stream[],Microsoft.StreamProcessing.Serializer.IIngressScheduler,System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1})">
            <summary>
            Deserialize data from binary streams to a sharded streamable
            </summary>
            <typeparam name="TKey">Grouping key type for data in the query</typeparam>
            <typeparam name="TPayload">Event payload type for data in the query</typeparam>
            <param name="binaryStream">Streams from which to deserialize binary data to sharded streams</param>
            <param name="scheduler"></param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns>A sharded streamable hydrated from the data in the binary streams</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamableSerializer.FromBinaryStreamPassive``2(System.IO.Stream[],System.Boolean,Microsoft.StreamProcessing.StreamProperties{``0,``1})">
            <summary>
            Deserialize data from binary streams to a sharded streamable
            </summary>
            <typeparam name="TKey">Grouping key type for data in the query</typeparam>
            <typeparam name="TPayload">Event payload type for data in the query</typeparam>
            <param name="binaryStream">Streams from which to deserialize binary data to sharded streams</param>
            <param name="readPropertiesFromStream"></param>
            <param name="inputProperties"></param>
            <returns>A sharded streamable hydrated from the data in the binary streams</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Sharding.ShardedStreamableSerializer.ToBinaryStream``2(Microsoft.StreamProcessing.Sharding.IShardedStreamable{``0,``1},System.IO.Stream[],System.Boolean,System.Boolean)">
            <summary>
            Stream data from a sharded streamable to binary streams
            </summary>
            <typeparam name="TKey">Grouping key type for data in the query</typeparam>
            <typeparam name="TPayload">Event payload type for data in the query</typeparam>
            <param name="source">The sharded streamable from which data shall be serialized</param>
            <param name="destinations">The sinks to which serialized data should be written</param>
            <param name="async">States whether serialization should be able to be done asynchronously</param>
            <param name="writePropertiesToStream">Write stream properties to the binary stream</param>
        </member>
        <member name="T:Microsoft.StreamProcessing.Properties">
            <summary>
            Streamable extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.GetStreamable``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1})">
            <summary>
            Enter into a mode where you can set a property for the stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.SetProperty``2(Microsoft.StreamProcessing.IStreamable{``0,``1})">
            <summary>
            Enter into a mode where you can set a property for the stream.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.IsIntervalFree``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Boolean)">
            <summary>
            Set a property of whether or not the stream is devoid of intervals.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.IsSyncTimeSimultaneityFree``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Boolean)">
            <summary>
            Set a property of whether or not the stream is devoid of simultaneity w.r.t. sync-times.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.IsEventOverlappingFree``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Boolean)">
            <summary>
            Set a property of whether or not the stream is devoid of simultaneity w.r.t. sync-times.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.IsConstantDuration``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Set a property of whether events in the stream all have constant duration, and optionally, the width of the constant duration (null if not known).
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.IsConstantHop``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Set a property of whether events in the stream all have constant hop, and optionally, the period and offset of the constant hop (null if not known).
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.PayloadEqualityComparer``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},Microsoft.StreamProcessing.IEqualityComparerExpression{``1})">
            <summary>
            Sets the PayloadEqualityComparer property associated with the stream.
            This comparer is an efficient comparer optimized for this data instance, and does not apply to other streams with
            the same schema. For a schema-level equality comparer, implement the interface IEqualityComparerExpression.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.PayloadEqualityComparer``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Int32}})">
            <summary>
            Sets the PayloadEqualityComparer property associated with the stream.
            This comparer is an efficient comparer optimized for this data instance, and does not apply to other streams with
            the same schema. For a schema-level equality comparer, implement the interface IEqualityComparerExpression.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.PayloadComparer``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},Microsoft.StreamProcessing.IComparerExpression{``1})">
            <summary>
            Sets the PayloadComparer property associated with the stream.
            This comparer is an efficient comparer optimized for this data instance, and does not apply to other streams with
            the same schema. For a schema-level comparer, implement the interface IComparerExpression.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.PayloadComparer``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Linq.Expressions.Expression{System.Comparison{``1}})">
            <summary>
            Sets the PayloadComparer property associated with the stream.
            This comparer is an efficient comparer optimized for this data instance, and does not apply to other streams with
            the same schema. For a schema-level comparer, implement the interface IComparerExpression.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.KeyEqualityComparer``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},Microsoft.StreamProcessing.IEqualityComparerExpression{``0})">
            <summary>
            Sets the KeyEqualityComparer property associated with the stream.
            This comparer is an efficient comparer optimized for this data instance, and does not apply to other streams with
            the same schema. For a schema-level equality comparer, implement the interface IEqualityComparerExpression.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.EqualityComparer``3(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Microsoft.StreamProcessing.IEqualityComparerExpression{``2})">
            <summary>
            Sets a selected-substream equality comparer for the stream. Multiple of these can be set for various selectors.
            This comparer is an efficient comparer optimized for this data instance, and does not apply to other streams with
            the same schema. For a schema-level equality comparer, implement the interface IEqualityComparerExpression.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.EqualityComparer``3(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``2,``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Int32}})">
            <summary>
            Sets a selected-substream equality comparer for the stream. Multiple of these can be set for various selectors.
            This comparer is an efficient comparer optimized for this data instance, and does not apply to other streams with
            the same schema.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.IsSnapshotSorted``2(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Boolean,System.Nullable{System.Guid})">
            <summary>
            Sets a property whether or nor the stream is sorted (by entire payload) per snapshot
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.IsSnapshotSorted``3(Microsoft.StreamProcessing.IPropertySetter{``0,``1},System.Boolean,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Nullable{System.Guid})">
            <summary>
            Sets a property whether or nor the stream is sorted per snapshot. If sorted, specifies the sort fields associated with the stream (entire payload by default)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.SetProperties``2(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.StreamProperties{``0,``1})">
            <summary>
            Sets the current stream properties to the provided argument (newProperties)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Properties.GetProperties``2(Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.StreamProperties{``0,``1}@)">
            <summary>
            Sets the out parameter (properties) to the current properties of the stream
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IStreamable`2">
            <summary>
            Primary interface for streamable operations - users should not be creating new classes that implement this interface without direct communication with the development team
            </summary>
            <typeparam name="TKey">Grouping key type for the streaming data</typeparam>
            <typeparam name="TPayload">Event payload type for the streaming data</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.IStreamable`2.Subscribe(Microsoft.StreamProcessing.IStreamObserver{`0,`1})">
            <summary>
            Immediately starts sending events from the stream to the observer.
            </summary>
            <param name="observer">The observer to which events are sent.</param>
            <returns>An object that can be used to cancel the subscription or otherwise
            notify the stream that the caller is no longer interested in receiving any
            more events.</returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.IStreamable`2.Properties">
            <summary>
            Returns the current properties of the stream, such as whether the stream
            is a constant-duration stream.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.IStreamable`2.ErrorMessages">
            <summary>
            Returns any errors that were encountered during code generation.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Streamable`2">
            <summary>
            An operator represents a stream query.
            </summary>
            <typeparam name="TKey">Group key type.</typeparam>
            <typeparam name="TPayload">Output payload type.</typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.Streamable`2.Properties">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Streamable`2.properties">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Streamable`2.Subscribe(Microsoft.StreamProcessing.IStreamObserver{`0,`1})">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.Streamable`2.ErrorMessages">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Streamable`2.errorMessages">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IPropertySetter`2">
            <summary>
            Interface for an intermediate state when setting properties on a stream.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamProperties`2">
            <summary>
            Class that holds the set of stream properties for the stream
            </summary>
            <typeparam name="TKey">Type of mapping key for the stream</typeparam>
            <typeparam name="TPayload">Type of payload for the stream</typeparam>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamProperties`2.IsColumnar">
            <summary>
            Indicates whether the stream contains data in columnar payload format.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.QueryContainer">
            <summary>
            Query container
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.IsConstantDuration">
            <summary>
            Indicates whether, for all interval events in the stream, the end timestamps of the intervals are non-decreasing.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.ConstantDurationLength">
            <summary>
            Indicates for a constant-duration stream, the length of the constant duration.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamProperties`2.IsStartEdgeOnly">
            <summary>
            Indicates whether the stream consists only of start edges.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.StreamProperties`2.IsTumbling">
            <summary>
            Indicates whether the stream consists only of events with tumbling lifetimes.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.IsConstantHop">
            <summary>
            Indicates that sync-times of events either stay the same or increment (hop) by a fixed amount.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.ConstantHopLength">
            <summary>
            Indicates for a constant-hop stream, the length of the constant hop.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.ConstantHopOffset">
            <summary>
            Indicates for a constant-duration stream, the offset (from 0) of the sync-time hops.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.IsIntervalFree">
            <summary>
            Indicates whether the stream consists only of start edges.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.IsSyncTimeSimultaneityFree">
            <summary>
            Indicates whether each group of stream is free of multiple events with the same sync-time
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.IsEventOverlappingFree">
            <summary>
            Indicates whether the stream is free of overlapping events (i.e., it is a signal).
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.IsSnapshotSorted">
            <summary>
            Indicates whether the stream is sorted on a per-snapshot basis
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.KeyEqualityComparer">
            <summary>
            Comparer for current key
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.PayloadEqualityComparer">
            <summary>
            Comparer for current payload
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.KeyComparer">
            <summary>
            Comparer for sort-ordering of keys
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.PayloadComparer">
            <summary>
            Comparer for sort-ordering of payloads
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.EqualityComparerSelectorMap">
            <summary>
            Equality comparers for possible key selectors (selector -> IECE)
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamProperties`2.SortSelectorMap">
            <summary>
            Selectors that identify what the data is sorted by (could be more than one)
            (selector -> packing Guid)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.Clone">
            <summary>
            Clone
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.CloneDelayed">
            <summary>
            Clone
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.CloneToNewKeyType``1(Microsoft.StreamProcessing.IEqualityComparerExpression{``0},Microsoft.StreamProcessing.IComparerExpression{``0})">
            <summary>
            Clone
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.CloneToNewPayloadType``1(Microsoft.StreamProcessing.IEqualityComparerExpression{``0},Microsoft.StreamProcessing.IComparerExpression{``0})">
            <summary>
            Clone
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.Where(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.Select``1(System.Linq.Expressions.LambdaExpression,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.SelectMany``1(System.Linq.Expressions.LambdaExpression)">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.Partition``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Partitioning
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.Group``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            First-level Group
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.GroupNested``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Group
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.Union(Microsoft.StreamProcessing.StreamProperties{`0,`1})">
            <summary>
            Union
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.Join``2(Microsoft.StreamProcessing.StreamProperties{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0,``1}})">
            <summary>
            Join
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.LASJ``1(Microsoft.StreamProcessing.StreamProperties{`0,``0})">
            <summary>
            LASJ
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.Clip``1(Microsoft.StreamProcessing.StreamProperties{`0,``0})">
            <summary>
            Clip
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamProperties`2.AlterLifetime(System.Linq.Expressions.LambdaExpression)">
            <summary>
            AlterLifetime
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamPropertyExtensions.Ungroup``4(Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.CompoundGroupKey{``0,``1},``2},System.Linq.Expressions.Expression{System.Func{``1,``2,``3}})">
            <summary>
            Ungroup with group-selector
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamPropertyExtensions.Ungroup``3(Microsoft.StreamProcessing.StreamProperties{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            First-level Ungroup with group-selector
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamPropertyExtensions.Afa``3(Microsoft.StreamProcessing.StreamProperties{``0,``1})">
            <summary>
            Afa
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamPropertyExtensions.MapReduce``7(Microsoft.StreamProcessing.StreamProperties{``0,``1},Microsoft.StreamProcessing.StreamProperties{``0,``2},System.Func{Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},Microsoft.StreamProcessing.IStreamable{``0,``3}},System.Linq.Expressions.Expression{System.Func{``3,``4}},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``4},``3},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``4},``5}},System.Linq.Expressions.Expression{System.Func{``4,``5,``6}})">
            <summary>
            Map + single-input Reduce
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamPropertyExtensions.MapReduce``6(Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0},Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``1},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``1},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``2}},System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Func{Microsoft.StreamProcessing.IStreamable{``3,``2},Microsoft.StreamProcessing.IStreamable{``3,``4}},System.Linq.Expressions.Expression{System.Func{``3,``4,``5}})">
            <summary>
            Map + single-input Reduce
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamPropertyExtensions.Map2Reduce``10(Microsoft.StreamProcessing.StreamProperties{``0,``1},Microsoft.StreamProcessing.StreamProperties{``0,``2},Microsoft.StreamProcessing.StreamProperties{``0,``3},Microsoft.StreamProcessing.StreamProperties{``0,``4},System.Func{Microsoft.StreamProcessing.IStreamable{``0,``1},Microsoft.StreamProcessing.IStreamable{``0,``2},Microsoft.StreamProcessing.IStreamable{``0,``6}},System.Func{Microsoft.StreamProcessing.IStreamable{``0,``3},Microsoft.StreamProcessing.IStreamable{``0,``4},Microsoft.StreamProcessing.IStreamable{``0,``7}},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``5},``6},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``5},``7},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.CompoundGroupKey{``0,``5},``8}},System.Linq.Expressions.Expression{System.Func{``6,``5}},System.Linq.Expressions.Expression{System.Func{``7,``5}},System.Linq.Expressions.Expression{System.Func{``5,``8,``9}},Microsoft.StreamProcessing.OperationalHint)">
            <summary>
            Map + 2-input Reduce
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.StreamPropertyExtensions.Map2Reduce``9(Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``0},Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``1},Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``2},Microsoft.StreamProcessing.StreamProperties{Microsoft.StreamProcessing.Empty,``3},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``0},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``1},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``5}},System.Func{Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``2},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``3},Microsoft.StreamProcessing.IStreamable{Microsoft.StreamProcessing.Empty,``6}},System.Func{Microsoft.StreamProcessing.IStreamable{``4,``5},Microsoft.StreamProcessing.IStreamable{``4,``6},Microsoft.StreamProcessing.IStreamable{``4,``7}},System.Linq.Expressions.Expression{System.Func{``5,``4}},System.Linq.Expressions.Expression{System.Func{``6,``4}},System.Linq.Expressions.Expression{System.Func{``4,``7,``8}},Microsoft.StreamProcessing.OperationalHint)">
            <summary>
            Map + 2-input Reduce
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.CommonBaseTemplate.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.CommonBaseTemplate.IndentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.CommonBaseTemplate.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CommonBaseTemplate.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CommonBaseTemplate.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CommonBaseTemplate.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CommonBaseTemplate.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CommonBaseTemplate.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CommonBaseTemplate.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CommonBaseTemplate.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.CommonBaseTemplate.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.CommonBaseTemplate.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.CommonBaseTemplate.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.CommonBaseTemplate.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.StreamMessageManager">
            <summary>
            Manager for producing StreamMessage instances on demand
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.StreamMessageManager.cachedObjects">
            <summary>
            Maps pair TKey,TPayload to the generated batch type
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.MemoryPoolTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.MemoryPoolTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.MemoryPoolTemplate.types">
            <summary>
            A set so that there is just one memory pool and Get method per type.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SafeBatchTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SafeBatchTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SafeBatchTemplate.noPublicFields">
            <summary>
            When the payload type doesn't have any public fields (e.g., it is a primitive type like int64),
            then a pseudo-field, "payload" is used to hold full payload, as opposed to its public fields
            being turned into fields in the generated batch class.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTransformer.#ctor(System.Linq.Expressions.LambdaExpression,System.Collections.Generic.IEnumerable{System.Tuple{System.Linq.Expressions.ParameterExpression,Microsoft.StreamProcessing.SelectParameterInformation}},Microsoft.StreamProcessing.ColumnarRepresentation,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Fifth component of tuple is needed when the projection body must be evaluated into a local to hold the result value.
            That is the case when the body looks like "new T(...)" or is the result of a method call.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTransformer.TransformSingleFieldSelect(System.Linq.Expressions.MemberExpression)">
            <summary>
            Transforms the lambda "(e_1, e_2, ..., e_n) => e_i.f"
            (a projection of a single field f from one of the parameters, e_i)
            The type of e_i is E_i.
            The type of f is the result type R, which is either going to be decomposed into *its* columns or will stay as a single value.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTransformer.TransformSingleParameterSelect(System.Linq.Expressions.ParameterExpression,System.Boolean)">
            <summary>
            Transforms the lambda "(e_1, e_2, ..., e_n) => e_i"
            (a projection of a single parameter, e_i)
            The type of e_i is E_i.
            The type of e_i is also the result type R, which means that we can
            just swing the columns representing E_i to the columns representing R.
            Special case for when that parameter is the startedge parameter!
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTransformer.TransformAnonymousTypeSelect(System.Linq.Expressions.NewExpression)">
            <summary>
            Transforms the lambda "(e_1, e_2, ..., e_n) => new { f_1 = ..., f_2 = ..., ..., f_m = ... }"
            (a projection of an anonymous type)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTransformer.TransformTupleCreateSelect(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Transforms the lambda "(e_1, e_2, ..., e_n) => ValueTuple.Create(e_1, e_2, ..., e_n)"
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTransformer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
             <summary>
             If the method call's receiver is a parameter of the original predicate, then
             that predicate contained a call like "p.M(...)".
             If a method call has an argument that is a parameter of the original predicate,
             then that predicate contained a call like "o.M(..., p, ...)".
            
             Both patterns mean that the predicate cannot be transformed into
             a column-oriented view. So just flag the error.
             </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTransformer.IsMultiStringCall(System.Linq.Expressions.Expression,System.String@)">
            <summary>
            Returns true iff expression is "e.f.M()" or "e.f.P" or
            "e.M()" or "e.P" where
            e is a parameter of the select function
            f is a field/property on the batch type
            M is a method from System.String for which there is a MultiString method
            P is a property from System.String for which there is a MultiString method
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTransformer.MultiStringHasImplementation(System.String)">
            <summary>
            Returns true iff MultiString has an implementation which can be used
            on an entire batch column and which returns a value which can be assigned
            to a column in the result batch. So Contains and Equals don't count because
            they return an occupancy vector (i.e., a bit vector) and not a column of
            bool.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SelectTransformer.HandleSimpleAssignments(System.Linq.Expressions.Expression,Microsoft.StreamProcessing.MyFieldInfo)">
            <summary>
            Two special cases for the right-hand side of an assignment or argument to a new expression where it turns into a column swing:
               g = e_i.f
                   Then the projection for g turns into a swing of the column from f
                   E_i must be a decomposable type
               g = e_i
                   The the projection for g turns into a swing of the pseudo-column for E_i
                   E_i must be an atomic type
            </summary>
            <returns>True iff the expression was transformed, either into a computed field or a swinging field.</returns>
        </member>
        <member name="F:Microsoft.StreamProcessing.Transformer.ColumnFieldPrefix">
            <summary>
            This is used as part of constructing the name of a field in a StreamMessage that is a column representing a field of the payload type.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Transformer.GenerateBatchClass``2">
            <summary>
            Generate a batch class definition from the types <typeparamref name="TKey"/> and <typeparamref name="TPayload"/>.
            Compile the definition, dynamically load the assembly containing it, and return the Type representing the
            batch class.
            </summary>
            <typeparam name="TKey">
            The key type for the batch class.
            </typeparam>
            <typeparam name="TPayload">
            The payload type for which a batch class is generated. The batch class will have a field F of type T[] for every field
            F of type T in the type <typeparamref name="TPayload"/>.
            </typeparam>
            <returns>
            A type that is defined to be a subtype of Batch&lt;<typeparamref name="TKey"/>,<typeparamref name="TPayload"/>&gt;.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Transformer.CompileSourceCode(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String@,System.Boolean)">
            <summary>
            Given a string, <paramref name="sourceCode"/>, that represents a compilable assembly, compile it into an assembly which is located
            in a sub-directory of the current working directory named "Generated", unless overriden by changing value of Config.GeneratedCodePath.
            If it is successful, then the resulting assembly is loaded and returned. Otherwise, null is returned and the
            parameter <paramref name="errorMessages"/> will contain the compiler errors.
            The parameter <paramref name="references"/> allows the client to specify the location of assemblies that are needed to compile
            the code.
            The parameter <paramref name="includeIgnoreAccessChecksAssembly"/> allows the generated assembly to reference
            the IgnoreAccessChecksTo attribute for access to Microsoft.StreamProcessing.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Transformer.IsValidKeyType(System.Type)">
            <summary>
            A type is a valid key type (i.e., it can be used as a Key type for a StreamMessage)
            if it is any type T that is not a CompoundGroupKey or is a valid CGK.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Transformer.IsValidCGK(System.Type)">
            <summary>
            A type is a valid CGK (i.e., it can be used as a Key type for a StreamMessage)
            as long as it is a left-branching structure. The base case can be any type.
            E.g., any type T (that is not a CompoundGroupKey) is a valid CGK.
            Or it can be CGK of T1, T2 where T2 is not a CompoundGroupKey and T1 is a valid key type.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.MyFieldInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Used only for anonymous types and autoprops (REVIEW: should be enforced, at least with a contract)
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IComparerExpression`1">
            <summary>
            A wrapper interface for an expression to compare two values of the given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.IComparerExpression`1.GetCompareExpr">
            <summary>
            Provides an expression to compare two values of the given type.
            </summary>
            <returns>An expression to compare two values of the given type.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ComparerExpression`1.ComparerExprForAnonymousType(System.Type)">
            <summary>
            Returns an (unfortunately) weakly-typed expression for a function
            that takes two values of type <paramref name="t"/> (which must be
            an anonymous type) and returns an int. The function is a comparer,
            so it returns -1 if the first argument is less than the second,
            +1 if the first argument is greater than the second and 0 if
            the two arguments are equal.
            The function is:
            (A a1, A a2) =&gt; compare_expression_for_a1.P1_and_a2.P1 == 0 ? ComparerExprForAnonymousType(new { P2, .., P_n }) : compare_expression_for_a1.P1_and_a2.P1
            where the compare_expression is the compare expression returned by ComparerExpression&gt;U&lt;.Default where U is the type of the property P_i.
            where the anonymous type had been defined as new{ P1 = ..., ...., Pn = ...}.
            I.e., this is using lexicographic ordering on the order the properties were defined in the
            new expression.
            If the type of any of the properties does not support the lessthan or equality operators,
            null is returned.
            </summary>
            <param name="t">
            Must be an anonymous type
            </param>
            <returns>
            When <paramref name="t"/> is null or not an anonymous type, then null is
            returned. Otherwise, an expression which is defined as above.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.EqualityComparerExtensions.EqualityExpressionEquals(System.Object,System.Object)">
            <summary>
            Performs a special kind of equality test on IEqualityComparer&lt;T&gt; in which case, both the Equals function and GetHashCode function are checked
            If the objects are not of the same type, then false is returned.
            Otherwise, an expression tree visitor walks the trees associated with the two arguments
            and returns true only if they are isomorphic modulo alpha conversions.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SortingTechnique">
            <summary>
            Choices for what technique should be used at data ingress for sorting any out-of-order data.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SortingTechnique.PriorityQueue">
            <summary>
            Specifies that the query processor should use a priority queue to sort out-of-order data.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.SortingTechnique.ImpatienceSort">
            <summary>
            Specifies that the query processor should use the impatience sort method to sort out-of-order data.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Config">
            <summary>
            Static class that holds all user configuration settings.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.GeneratedCodePath">
            <summary>
            The file system location to which any generated code artifacts should be stored.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.MapArity">
            <summary>
            Number of mapper threads created by map-reduce. One implies no thread creation (work on user thread).
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.ReduceArity">
            <summary>
            Number of reducer threads created by map-reduce. One implies no thread creation (work on user thread).
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.ForceRowBasedExecution">
            <summary>
            Use the row-based implementation of every operator. No code generation.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.AllowFloatingReorderPolicy">
            <summary>
            Allow the reorder policy to be applied later in the query than the ingress site, or possibly not at all if it is not required by the query.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.DeterministicWithinTimestamp">
            <summary>
            Multi-input operators are made deterministic within the same timestamp. Currently only done for union.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.ClearColumnsOnReturn">
            <summary>
            Clear (zero out) columns before returning them to a pool
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.DisableMemoryPooling">
            <summary>
            Disable Trill's memory pooling functionality
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.DataBatchSize">
            <summary>
            Maximum number of tuples in each DataBatch message.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.UseMultiString">
            <summary>
            Optimize strings in generated batches.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.IngressSortingTechnique">
            <summary>
            Choose sorting technique to use an ingress
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.MultiStringTransforms">
            <summary>
            Whenever possible, transform method calls on strings into operations on MultiStrings.
            In effect only if UseMultiString is true.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.StreamScheduler">
            <summary>
            Change the scheduler used to run Trill using multiple cores.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.AggregateHashTableInitSize">
            <summary>
            What size to initialize hash tables to.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.SerializationCompressionLevel">
            <summary>
            Compression level used in serialization.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Config.CodegenOptions">
            <summary>
            A place to organize all codegen related options
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.CodegenOptions.GenerateDebugInfo">
            <summary>
            When true then generate debugging information for the generated code.
            The default for Debug builds of Trill is to generate debugging information.
            The default for Release builds of Trill is not generate debugging information.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.CodegenOptions.BreakIntoCodeGen">
            <summary>
            When true and in Debug builds, code gen operators will break into
            the debugger the first time the code gen'ed class gets loaded.
            This allows developers to put breakpoints into interesting places
            in the code.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.CodegenOptions.DontFallBackToRowBasedExecution">
            <summary>
            FOR TEST USE ONLY!
            When ForceRowBasedExecution is true, this flag is ignored.
            When it is false, then the code generation will not fall back
            to row-based execution, but instead will throw an (uncaught)
            exception. Useful to make sure that tests that are intended to
            work in columnar actually do.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.CodegenOptions.SuperStrictColumnar">
            <summary>
            FOR TEST USE ONLY!
            When ForceRowBasedExecution is true, this flag is ignored.
            When it is false, then the code generation will not use
            any compiled lambdas, but will insist on inlining all of
            them, e.g. in aggregates. Otherwise it will throw an
            (uncaught) exception.
            Useful to make sure that tests that are intended to
            work in columnar actually do.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.Config.CodegenOptions.CodeGenAfa">
            <summary>
            When CodeGenAfa is true, then the code generation will be used
            for the pattern matching API. Default: true
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Config.Describe">
            <summary>
            Provides a string representation of the configuration settings.
            </summary>
            <returns>A string representation of the configuration settings.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.Empty">
            <summary>
            A type representing the empty struct, similar to Unit in other libraries and languages.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Empty.Equals(Microsoft.StreamProcessing.Empty)">
            <summary>
            Determines whether the argument Empty value is equal to the receiver. Because Empty has a single value, this always returns true.
            </summary>
            <param name="other">An Empty value to compare to the current Empty value.</param>
            <returns>Because there is only one value of type Empty, this always returns true.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Empty.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current Empty.
            </summary>
            <param name="obj">The System.Object to compare with the current Empty.</param>
            <returns>true if the specified System.Object is a Empty value; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Empty.GetHashCode">
            <summary>
            Returns the hash code for the Empty value.
            </summary>
            <returns>A hash code for the Empty value.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Empty.ToString">
            <summary>
            Returns a string representation of the Empty value.
            </summary>
            <returns>String representation of the Empty value.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Empty.op_Equality(Microsoft.StreamProcessing.Empty,Microsoft.StreamProcessing.Empty)">
            <summary>
            Determines whether the two specified Emtpy values are equal. Because Empty has a single value, this always returns true.
            </summary>
            <param name="first">The first Empty value to compare.</param>
            <param name="second">The second Empty value to compare.</param>
            <returns>Because Empty has a single value, this always returns true.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Empty.op_Inequality(Microsoft.StreamProcessing.Empty,Microsoft.StreamProcessing.Empty)">
            <summary>
            Determines whether the two specified Empty values are not equal. Because Empty has a single value, this always returns false.
            </summary>
            <param name="first">The first Empty value to compare.</param>
            <param name="second">The second Empty value to compare.</param>
            <returns>Because Empty has a single value, this always returns false.</returns>
        </member>
        <member name="P:Microsoft.StreamProcessing.Empty.Default">
            <summary>
            The single Empty value.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.IEqualityComparerExpression`1">
            <summary>
            An interface that provides an expression-based way
            to specify the same thing that <see cref="T:System.Collections.Generic.IComparer`1"/>
            does: a function for equality and a function for computing
            a hash.
            </summary>
            <typeparam name="T">The type over which equality is being defined.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.IEqualityComparerExpression`1.GetEqualsExpr">
            <summary>
            A function encoding equality over type <typeparamref name="T"/>
            </summary>
            <returns>true iff the two values should be considered equal.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IEqualityComparerExpression`1.GetGetHashCodeExpr">
            <summary>
            A function that computes a hash value over type <typeparamref name="T"/>
            </summary>
            <returns>Any integer, but it is much more useful if it returns the same
            number only for values of type <typeparamref name="T"/> that are considered
            equal.</returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.EqualityComparerExpression`1">
            <summary>
            Provides an implementation for wrapping two functions
            into an <see cref="T:Microsoft.StreamProcessing.IEqualityComparerExpression`1"/>.
            </summary>
            <typeparam name="T">The type for which the equality comparers are defined.</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.EqualityComparerExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            Creates an instance to be used as an argument for many of the query methods.
            </summary>
            <param name="equalsExpr">
            A function used to test equality on type <typeparamref name="T"/>.
            </param>
            <param name="getHashCodeExpr">
            A function used to compute hash values for values of type <typeparamref name="T"/>.
            </param>
        </member>
        <member name="P:Microsoft.StreamProcessing.EqualityComparerExpression`1.Default">
            <summary>
            A default equality comparer.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.EqualityComparerExpression`1.DefaultEqualsFunction">
            <summary>
            Returns an expression that computes the default equality function for the given type.
            </summary>
        </member>
        <member name="P:Microsoft.StreamProcessing.EqualityComparerExpression`1.DefaultGetHashCodeFunction">
            <summary>
            Returns an expression that computes the default hash code
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.EqualityComparerExpression`1.IsSimpleStruct(System.Reflection.TypeInfo)">
            <summary>
            Determines if <paramref name="type"/> is just a struct that has nothing
            but public fields, i.e., a true "record". It may have an override for
            ToString, but not overrides for GetHashCode or Equals. It also may not have
            any properties at all.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.EqualityComparerExpression`1.GetEqualsExpr">
            <summary>
            An accessor for the equals function.
            </summary>
            <returns>The function used for equality tests.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.EqualityComparerExpression`1.GetGetHashCodeExpr">
            <summary>
            An accessor for the hash function.
            </summary>
            <returns>The function used for computing hashes.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.EqualityComparerExpression`1.ExpressionsForAnonymousType(System.Type)">
            <summary>
            Returns (unfortunately) weakly-typed expressions for the two functions
            for checking equality and getting the hash code for the anonymous
            type <paramref name="t"/>.
            The body of the equals function is the conjunction of calling "equals" on each property contained in the anonymous type.
            That is, the first one (for equality) looks like this:
            (A a1, A a2) =&gt; "equals"(a1.P1, a2.P1) &amp;&amp; "equals"(a1.P2, a2.P2) &amp;&amp; ... "equals"(a1.Pn, a2.Pn)
            The body of the second one (for hash code) is just the xor of calling "getHashCode" on each property contained in the anonymous type.
            That is, it looks like this:
            (A a) =&gt; "getHashCode"(a.P1) ^ "getHashCode"(a.P2) &amp;&amp; ... "getHashCode"(a.Pn)
            where
                - the anonymous type had been defined as new{ P1 = ..., ...., Pn = ...}.
                - "equals" is the expression returned from EqualityComparerExpression&lt;U&gt;.Default.GetEqualsExpr()
                - "getHashCode" is the expression returned EqualityComparerExpression&lt;U&gt;.Default.GetGetHashCodeExpr()
                - U is the type of the corresponding property
            So really they are not function calls, but instead expressions
            </summary>
            <param name="t">
            Must be an anonymous type
            </param>
            <returns>
            When <paramref name="t"/> is null or not an anonymous type, then null is
            returned. Otherwise, an expression which is defined as above.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ExpressionExtensions.ExpressionToCSharp(System.Linq.Expressions.Expression)">
            <summary>
            Given an expression, <paramref name="e"/>, returns a string that
            should be acceptable to the C# compiler and which has the same
            semantics as <paramref name="e"/>.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ExpressionExtensions.Inline(System.Linq.Expressions.LambdaExpression,System.String[])">
            <summary>
            Given an expression, <paramref name="function"/>, that is a LambdaExpression,
            returns the body of the lambda
            with all references to parameters replaced by the corresponding string from
            <paramref name="arguments"/>.
            Note that this can result in an argument being evaluated more than once,
            so if it has any side-effects, this changes the semantics
            from applying the function to the arguments.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ExpressionExtensions.ExpressionToCSharpStringWithParameterSubstitution(System.Linq.Expressions.Expression,System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.String})">
            <summary>
            Just like <see cref="M:Microsoft.StreamProcessing.ExpressionExtensions.ExpressionToCSharp(System.Linq.Expressions.Expression)"/>, but while turning the expression
            into C# source, replaces all occurrences of any parameter given as a key
            in <paramref name="map"/> with the value that parameter is associated with in
            <paramref name="map"/>.
            Note that this can result in an argument being evaluated more than once,
            so if it has any side-effects, this changes the semantics
            from applying the function to the arguments.
            </summary>
            <param name="e"></param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.ConvertToCSharp">
            <summary>
            Emits C# source code equivalent to expression trees.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.ColumnOriented.Transform(System.Linq.Expressions.LambdaExpression,System.Collections.Generic.IDictionary{System.Linq.Expressions.ParameterExpression,Microsoft.StreamProcessing.ColumnOriented.SubstitutionInformation})">
            <summary>
            Transforms a row-oriented lambda into a column-oriented lambda.
            For each parameter, e, that is referenced in the body of the lambda as
            "e.f" (i.e., a field/property dereference for decomposable types or else
            just "e" for atomic types like ints), the reference is changed into "b.f.col[i]"
            where b is a batch variable, f is a column on the batch that corresponds to the field
            f, and i is the index variable for the row in the column.
            </summary>
            <param name="rowOrientedLambda"></param>
            <param name="substitutionInformation"></param>
            <returns>Null if the body could not be transformed</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.ColumnOriented.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Converts expressions of the form "t.F" to "batch.F'[i]"
            when F is a field (of type A) defined in the type T that the user query is written over.
            batch is a parameter whose type is the batch class generated from T.
            F' is the indexable expression that was computed in the Transform method.
            i is the a variable of type int
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.IntroduceArrayVariables.Transform(System.Linq.Expressions.LambdaExpression,System.Collections.Generic.IDictionary{System.Linq.Expressions.ParameterExpression,System.String})">
            <summary>
            Tranforms a lambda's body into a new expression.
            The input lambda is of the form (b_1, ..., b_n) => B.
            The body, B, has expressions of the form "b_i.f.col[i]".
            The new expression replaces such expressions with "x_i_f_col[i]"
            where "x_i_f_col" is a newly created (array) variable of the correct type.
            It is up to the caller to make sure that variables with the same name are
            defined in the scope for which the returned expression is used.
            The value of "x" for each parameter b_i is specified in the <paramref name="parameterSubstitutionNames"/>.
            If a parameter, b_i, is not a key in the dictionary, then any references to it will be left
            unchanged.
            </summary>
            <param name="inputLambda"></param>
            <param name="parameterSubstitutionNames">If provided, used to map parameters of the lambda to the
            name to use as the first part of the array variable. If not provided, then all parameters will
            be substituted for and the name of the parameter will be used for "x".
            </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.StreamProcessing.ParameterInstanceFinder">
            <summary>
            Finds occurrences of parameter instances that are *not* dereferenced by a field/property
            access.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.NativeMethods">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.SafeNativeMethods">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.SafeNativeMethods.Frequency">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.SafeNativeMethods.Counter">
            <summary>
            Currently for internal use only - do not use directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Extensions.CanUsePayloadEquality``1(Microsoft.StreamProcessing.IEqualityComparerExpression{``0})">
            <summary>
            Returns true iff the equality and hashcode functions defined in
            <paramref name="payloadEqualityComparer"/> can be used in columnar codegen.
            </summary>
            <typeparam name="T">The type of the payload</typeparam>
            <param name="payloadEqualityComparer">The equality and hashcode functions
            represented as lambda expressions.</param>
            <returns>True iff both the equality and hashcode functions can be used in columnar
            codegen operators.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Extensions.TransformUnaryFunction``2(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Transforms a unary function f, with parameter e of type <typeparamref name="TPayload"/>, into
            a columnar representation where all occurrences of "e.f" have been replaced with "f_col[i]"
            "f_col" is a new new variable that the caller must define to point to the "col" array within
            the ColumnBatch&lt;T&gt; (where T is the type of the field "f") that represents the field f from
            the type <typeparamref name="TPayload"/>.
            The name "i" is used as the index variable for the column batch, so the caller must also have defined
            that variable.
            </summary>
            <typeparam name="TKey">
            The key type of the trill message whose payloads are used for arguments to <paramref name="f"/>
            </typeparam>
            <typeparam name="TPayload">
            The type of the parameter of <paramref name="f"/>
            </typeparam>
            <param name="f"></param>
            <returns>Null if the columnar transformation of f's body fails.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Extensions.TransformFunction``2(System.Linq.Expressions.LambdaExpression,System.Int32,System.String,System.String)">
            <summary>
            Transforms an n-ary function f, with parameters e_i, into a columnar representation.
            One parameter, at position <paramref name="j"/>, is e_j and its type is <typeparamref name="TPayload"/>.
            In the resulting lambda, all occurrences of "e_j.f" have been replaced with "x_f_col[i]"
            "x_f_col" is a new (array) variable that the caller must define to point to the "col" array within
            the ColumnBatch&lt;T&gt; (where T is the type of the field "f") that represents the field f from
            the type <typeparamref name="TPayload"/>.
            The name "i" is used as the index variable for the column batch, so the caller must also have defined
            that variable.
            The resulting lambda has all of the same parameter as <paramref name="f"/> *except* for e_j.
            </summary>
            <typeparam name="TKey">
            The key type of the trill message whose payloads are used for arguments to <paramref name="f"/>
            </typeparam>
            <typeparam name="TPayload">
            The type of the parameter of <paramref name="f"/>
            </typeparam>
            <param name="f"></param>
            <param name="j">The index of the parameter e that is to be transformed.</param>
            <param name="batchVariableName">
            The name to use for "x" in the new variable name. The default is the empty string, in which case
            the name does *not* have a leading underscore, but is just "f_col".
            </param>
            <param name="indexVariableName">
            The name to use for the index variable used to access the array. The default is "i".
            </param>
            <returns>Null if the columnar transformation of f's body fails.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Extensions.TransformFunction``2(System.Linq.Expressions.LambdaExpression,System.String,System.Int32)">
            <summary>
            Transforms an n-ary function f, with parameters e_i, into a columnar representation.
            The first parameter, at position 0, is e_0 and its type is <typeparamref name="TPayload"/>.
            In the resulting lambda, all occurrences of "e_0.f" have been replaced with "b_0.f.col[i]"
            "b_0" is a new parameter of type G where G is the generated batch type for a
            StreamMessage&lt;<typeparamref name="TKey"/>, <typeparamref name="TPayload"/>&gt;.
            "f" is the column batch representing the field f in type TPayload.
            The name "i" is used as the index variable for the column batch, so the caller must also have defined
            that variable.
            The resulting lambda has all of the same parameter as <paramref name="f"/> *except* for e_0.
            That parameter has been replaced by b_0.
            </summary>
            <typeparam name="TKey">
            The key type of the trill message whose payloads are used for arguments to <paramref name="f"/>
            </typeparam>
            <typeparam name="TPayload">
            The type of the parameter of <paramref name="f"/>
            </typeparam>
            <param name="f"></param>
            <param name="indexVariableName">
            The name to use for the index variable used to access the array.
            </param>
            <param name="parameterIndex"></param>
            <returns>Null if the columnar transformation of f's body fails.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Returns true if <paramref name="type"/> is an anonymous type or is a generic type
            with an anonymous type somewhere in the type tree(s) of its type arguments.
            REVIEW: Is there a better way to tell if a type represents an anonymous type?
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.GetAllFields(System.Type)">
            <summary>
            Gets all fields of the type.
            </summary>
            <param name="t">The type.</param>
            <returns>Collection of fields.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.GetAllProperties(System.Type)">
            <summary>
            Gets all properties of the type.
            </summary>
            <param name="t">The type.</param>
            <returns>Collection of properties.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.KeyTypeNeedsGeneratedMemoryPool(System.Type)">
            <summary>
            Returns true iff <paramref name="keyType"/> is a type for which
            a generated memory pool is needed. That is needed when the
            <paramref name="keyType"/> is either an atomic type for which
            the memory pool does not have a Get method for or is a CompoundGroupKey
            whose TOuterKey or TInnerKey requires a generated memory pool.
            </summary>
            <param name="keyType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.NeedGeneratedMemoryPool(System.Type)">
            <summary>
            Returns true iff <paramref name="type"/> is a type for which,
            if it is decomposed into its columns, has a type that is not
            handled by the base MemoryPool type (i.e., something that is
            not a long, int, or string).
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.CanRepresentAsColumnar(System.Type)">
            <summary>
            Returns true iff <paramref name="type"/> can be used as a *non* key
            type for code gen. (All types can be used as key types.)
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.CanBeFixed(System.Type)">
            <summary>
            http://msdn.microsoft.com/en-us/library/aa664771(v=vs.71).aspx
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.IsManagedType(System.Type)">
             <summary>
             IsManagedType is simple for most named types:
                 enums are not managed;
                 non-enum, non-struct named types are managed;
                 generic types and their nested types are managed;
                 type parameters are managed;
                 all special types have spec'd values (basically, (non-string) primitives) are not managed;
            
             Only structs are complicated, because the definition is recursive.  A struct type is managed
             if one of its instance fields is managed.  Unfortunately, this can result in infinite recursion.
             If the closure is finite, and we don't find anything definitely managed, then we return true.
             If the closure is infinite, we disregard all but a representative of any expanding cycle.
            
             Intuitively, this will only return true if there's a specific type we can point to that is would
             be managed even if it had no fields.  e.g. struct S { S s; } is not managed, but struct S { S s; object o; }
             is because we can point to object.
             </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.IsManagedTypeHelper(System.Type)">
            <summary>
            Returns a boolean value if we can determine whether the type is managed
            without looking at its fields and Unset otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.HasParameterlessConstructor(System.Type)">
            <summary>
                Checks if type t has a public parameter-less constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>True if type t has a public parameter-less constructor, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.IsUnsupported(System.Type)">
            <summary>
                Determines whether the type is definitely unsupported for schema generation.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the type is unsupported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.ValidateTypeForSerializer(System.Type)">
            <summary>
            Validates that a type can be serialized.
            </summary>
            <param name="type">The type to validate.</param>
            <returns>
            Returns the input back again if it is valid.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.TypeExtensions.ResolveMembers(System.Type)">
            <summary>
            Gets the serialization information about the type members.
            </summary>
            <param name="type">Type containing members which should be serialized/columnarized.</param>
            <returns>
            Serialization information about the fields/properties.
            </returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Utility.TryGetFirst``2(System.Collections.Generic.SortedDictionary{``0,``1},``0@,``1@)">
            <summary>
            Tries to get the first element in the given sorted dictionary.
            </summary>
            <typeparam name="TKey">The key type of the sorted dictionary.</typeparam>
            <typeparam name="TValue">The value type of the sorted dictionary.</typeparam>
            <param name="source">The sorted dictionary from which to attempt drawing an item.</param>
            <param name="key">The key of the sorted dictionary item returned.</param>
            <param name="value">The value of the sorted dictionary item returned.</param>
            <returns>Whether a value was found in the sorted dictionary.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Utility.TryGetFirst``1(System.Collections.Generic.SortedSet{``0},``0@)">
            <summary>
            Tries to get the first element in the given sorted set.
            </summary>
            <typeparam name="TKey">The key type of the sorted dictionary.</typeparam>
            <param name="source">The sorted dictionary from which to attempt drawing an item.</param>
            <param name="key">The key of the sorted dictionary item returned.</param>
            <returns>Whether a value was found in the sorted dictionary.</returns>
        </member>
        <member name="M:Microsoft.StreamProcessing.Utility.Add``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            With a dictionary of lists, add a single element to a particular list. Create a new list if none exists at that key location.
            </summary>
            <typeparam name="TKey">The key type of the dictionary to which to add a value.</typeparam>
            <typeparam name="TValue">The item type of the lists that serve as values in the dictionary.</typeparam>
            <param name="dict">The dictionary of lists to which to add an item.</param>
            <param name="key">The key of the list to which to add the new element.</param>
            <param name="value">The value to add to the given list.</param>
        </member>
        <member name="T:Microsoft.StreamProcessing.FilteredWindow`2">
            <summary>
            Derived class from Window where additional semantics are applied when a filter is present
            </summary>
            <typeparam name="TKey">Grouping key type for input data</typeparam>
            <typeparam name="TSource">Event payload type for input data</typeparam>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.SByte}})">
            <summary>
            Computes a time-sensitive average aggregate over sbytes using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Int16}})">
            <summary>
            Computes a time-sensitive average aggregate over shorts using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})">
            <summary>
            Computes a time-sensitive average aggregate over ints using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})">
            <summary>
            Computes a time-sensitive average aggregate over longs using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Byte}})">
            <summary>
            Computes a time-sensitive average aggregate over bytes using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.UInt16}})">
            <summary>
            Computes a time-sensitive average aggregate over ushorts using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.UInt32}})">
            <summary>
            Computes a time-sensitive average aggregate over uints using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.UInt64}})">
            <summary>
            Computes a time-sensitive average aggregate over ulongs using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Single}})">
            <summary>
            Computes a time-sensitive average aggregate over floats using snapshot semantics. Note that the accumulator
            internally is a float datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a time-sensitive average aggregate over doubles using snapshot semantics. Note that the accumulator
            internally is a double datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})">
            <summary>
            Computes a time-sensitive average aggregate over decimals using snapshot semantics. Note that the accumulator
            internally is a decimal datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive average aggregate over BigIntegers using snapshot semantics. Note that the accumulator
            internally is a BigInteger datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive average aggregate over Complexs using snapshot semantics. Note that the accumulator
            internally is a Complex datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.SByte}})">
            <summary>
            Computes a time-sensitive average squares aggregate over sbytes using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Int16}})">
            <summary>
            Computes a time-sensitive average squares aggregate over shorts using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})">
            <summary>
            Computes a time-sensitive average squares aggregate over ints using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})">
            <summary>
            Computes a time-sensitive average squares aggregate over longs using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Byte}})">
            <summary>
            Computes a time-sensitive average squares aggregate over bytes using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.UInt16}})">
            <summary>
            Computes a time-sensitive average squares aggregate over ushorts using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.UInt32}})">
            <summary>
            Computes a time-sensitive average squares aggregate over uints using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.UInt64}})">
            <summary>
            Computes a time-sensitive average squares aggregate over ulongs using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Single}})">
            <summary>
            Computes a time-sensitive average squares aggregate over floats using snapshot semantics. Note that the accumulator
            internally is a float datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a time-sensitive average squares aggregate over doubles using snapshot semantics. Note that the accumulator
            internally is a double datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})">
            <summary>
            Computes a time-sensitive average squares aggregate over decimals using snapshot semantics. Note that the accumulator
            internally is a decimal datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive average squares aggregate over BigIntegers using snapshot semantics. Note that the accumulator
            internally is a BigInteger datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.FilteredWindow`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive average squares aggregate over Complexs using snapshot semantics. Note that the accumulator
            internally is a Complex datatype.
            </summary>
        </member>
        <member name="T:Microsoft.StreamProcessing.Window`2">
            <summary>
            Class representing a window within an aggregation operation.
            </summary>
        </member>
        <member name="F:Microsoft.StreamProcessing.Window`2.Filter">
            <summary>
            The filter associated with the given window. Defaults to null.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.#ctor(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Microsoft.StreamProcessing.StreamProperties{`0,`1})">
            <summary>
            Creates a new window representation with the given filter and properties.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Where(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Filter input rows with the specified filter.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Count">
            <summary>
            Computes a time-sensitive count aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SingleOrDefault">
            <summary>
            Computes a time-sensitive single-or-default aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.CountNotNull``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Computes a time-sensitive count aggregate of the non-null values using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Min``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Computes a time-sensitive minimum aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Min``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},Microsoft.StreamProcessing.IComparerExpression{``0})">
            <summary>
            Computes a time-sensitive minimum aggregate using snapshot semantics with the provided ordering comparer.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Min``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Comparison{``0}})">
            <summary>
            Computes a time-sensitive minimum aggregate using snapshot semantics with the provided ordering comparer.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Max``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Computes a time-sensitive maximum aggregate using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Max``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},Microsoft.StreamProcessing.IComparerExpression{``0})">
            <summary>
            Computes a time-sensitive maximum aggregate using snapshot semantics with the provided ordering comparer.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Max``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Comparison{``0}})">
            <summary>
            Computes a time-sensitive maximum aggregate using snapshot semantics with the provided ordering comparer.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.TopK``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Int32)">
            <summary>
            Computes a time-sensitive top-k aggregate using snapshot semantics based on a key selector.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.TopK``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},Microsoft.StreamProcessing.IComparerExpression{``0},System.Int32)">
            <summary>
            Computes a time-sensitive top-k aggregate using snapshot semantics based on a key selector with the provided ordering comparer.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.PercentileContinuous(System.Double,System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a percentile continuous aggregate.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.PercentileContinuous(System.Linq.Expressions.Expression{System.Comparison{System.Double}},System.Double,System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a percentile continuous aggregate.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.PercentileDiscrete(System.Double,System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a percentile discrete aggregate.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.PercentileDiscrete(System.Linq.Expressions.Expression{System.Comparison{System.Double}},System.Double,System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a percentile discrete aggregate.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.StandardDeviation(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})">
            <summary>
            Computes the sample standard deviation of the elements in the window.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.StandardDeviation(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})">
            <summary>
            Computes the sample standard deviation of the elements in the window.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.PopulationStandardDeviation(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})">
            <summary>
            Computes the population standard deviation of the elements in the window.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.PopulationStandardDeviation(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})">
            <summary>
            Computes the population standard deviation of the elements in the window.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Variance(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})">
            <summary>
            Computes the sample variance of the elements in the window.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Variance(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})">
            <summary>
            Computes the sample variance of the elements in the window.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.PopulationVariance(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})">
            <summary>
            Computes the population variance of the elements in the window.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.PopulationVariance(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})">
            <summary>
            Computes the population variance of the elements in the window.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.SByte}})">
            <summary>
            Computes a time-sensitive sum aggregate over sbytes using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Byte}})">
            <summary>
            Computes a time-sensitive sum aggregate over bytes using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Int16}})">
            <summary>
            Computes a time-sensitive sum aggregate over shorts using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.UInt16}})">
            <summary>
            Computes a time-sensitive sum aggregate over ushorts using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})">
            <summary>
            Computes a time-sensitive sum aggregate over ints using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.UInt32}})">
            <summary>
            Computes a time-sensitive sum aggregate over uints using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})">
            <summary>
            Computes a time-sensitive sum aggregate over longs using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.UInt64}})">
            <summary>
            Computes a time-sensitive sum aggregate over ulongs using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Single}})">
            <summary>
            Computes a time-sensitive sum aggregate over floats using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a time-sensitive sum aggregate over doubles using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})">
            <summary>
            Computes a time-sensitive sum aggregate over decimals using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive sum aggregate over BigIntegers using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive sum aggregate over Complexs using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable sbytes using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable bytes using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable shorts using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable ushorts using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable ints using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable uints using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable longs using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable ulongs using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable floats using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable doubles using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable decimals using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable BigIntegers using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Sum(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable Complexs using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.SByte}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over sbytes using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Byte}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over bytes using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Int16}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over shorts using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.UInt16}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over ushorts using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over ints using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.UInt32}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over uints using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over longs using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.UInt64}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over ulongs using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Single}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over floats using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over doubles using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over decimals using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over BigIntegers using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over Complexs using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable sbytes using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable bytes using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable shorts using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable ushorts using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable ints using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable uints using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable longs using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable ulongs using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable floats using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable doubles using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable decimals using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable BigIntegers using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.SumSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive sum-squares aggregate over nullable Complexs using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.SByte}})">
            <summary>
            Computes a time-sensitive product aggregate over sbytes using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Byte}})">
            <summary>
            Computes a time-sensitive product aggregate over bytes using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Int16}})">
            <summary>
            Computes a time-sensitive product aggregate over shorts using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.UInt16}})">
            <summary>
            Computes a time-sensitive product aggregate over ushorts using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})">
            <summary>
            Computes a time-sensitive product aggregate over ints using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.UInt32}})">
            <summary>
            Computes a time-sensitive product aggregate over uints using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})">
            <summary>
            Computes a time-sensitive product aggregate over longs using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.UInt64}})">
            <summary>
            Computes a time-sensitive product aggregate over ulongs using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Single}})">
            <summary>
            Computes a time-sensitive product aggregate over floats using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a time-sensitive product aggregate over doubles using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})">
            <summary>
            Computes a time-sensitive product aggregate over decimals using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive product aggregate over BigIntegers using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive product aggregate over Complexs using snapshot semantics.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable sbytes using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable bytes using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable shorts using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable ushorts using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable ints using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable uints using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable longs using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable ulongs using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable floats using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable doubles using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable decimals using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable BigIntegers using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Product(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive sum aggregate over nullable Complexs using snapshot semantics. Note that nulls have
            no affect on the sum.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.SByte}})">
            <summary>
            Computes a time-sensitive average aggregate over sbytes using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Int16}})">
            <summary>
            Computes a time-sensitive average aggregate over shorts using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})">
            <summary>
            Computes a time-sensitive average aggregate over ints using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})">
            <summary>
            Computes a time-sensitive average aggregate over longs using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Byte}})">
            <summary>
            Computes a time-sensitive average aggregate over bytes using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.UInt16}})">
            <summary>
            Computes a time-sensitive average aggregate over ushorts using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.UInt32}})">
            <summary>
            Computes a time-sensitive average aggregate over uints using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.UInt64}})">
            <summary>
            Computes a time-sensitive average aggregate over ulongs using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Single}})">
            <summary>
            Computes a time-sensitive average aggregate over floats using snapshot semantics. Note that the accumulator
            internally is a float datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a time-sensitive average aggregate over doubles using snapshot semantics. Note that the accumulator
            internally is a double datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})">
            <summary>
            Computes a time-sensitive average aggregate over decimals using snapshot semantics. Note that the accumulator
            internally is a decimal datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive average aggregate over BigIntegers using snapshot semantics. Note that the accumulator
            internally is a BigInteger datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive average aggregate over Complexs using snapshot semantics. Note that the accumulator
            internally is a Complex datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable sbytes using snapshot semantics. Note that the accumulator
            internally is a long datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable shorts using snapshot semantics. Note that the accumulator
            internally is a long datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable ints using snapshot semantics. Note that the accumulator
            internally is a long datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable longs using snapshot semantics. Note that the accumulator
            internally is a long datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable bytes using snapshot semantics. Note that the accumulator
            internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable ushorts using snapshot semantics. Note that the accumulator
            internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable uints using snapshot semantics. Note that the accumulator
            internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable ulongs using snapshot semantics. Note that the accumulator
            internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable floats using snapshot semantics. Note that the accumulator
            internally is a float datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable doubles using snapshot semantics. Note that the accumulator
            internally is a double datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable decimals using snapshot semantics. Note that the accumulator
            internally is a decimal datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable BigIntegers using snapshot semantics. Note that the accumulator
            internally is a BigInteger datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.Average(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive average aggregate over nullable Complexs using snapshot semantics. Note that the accumulator
            internally is a Complex datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.SByte}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over sbytes using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Int16}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over shorts using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over ints using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over longs using snapshot semantics. Note that the accumulator
            internally is a long datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Byte}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over bytes using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.UInt16}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over ushorts using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.UInt32}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over uints using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.UInt64}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over ulongs using snapshot semantics. Note that the accumulator
            internally is a ulong datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Single}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over floats using snapshot semantics. Note that the accumulator
            internally is a float datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Double}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over doubles using snapshot semantics. Note that the accumulator
            internally is a double datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over decimals using snapshot semantics. Note that the accumulator
            internally is a decimal datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.BigInteger}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over BigIntegers using snapshot semantics. Note that the accumulator
            internally is a BigInteger datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Numerics.Complex}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over Complexs using snapshot semantics. Note that the accumulator
            internally is a Complex datatype.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.SByte}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable sbytes using snapshot semantics. Note that the accumulator
            internally is a long datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int16}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable shorts using snapshot semantics. Note that the accumulator
            internally is a long datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable ints using snapshot semantics. Note that the accumulator
            internally is a long datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable longs using snapshot semantics. Note that the accumulator
            internally is a long datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Byte}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable bytes using snapshot semantics. Note that the accumulator
            internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt16}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable ushorts using snapshot semantics. Note that the accumulator
            internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt32}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable uints using snapshot semantics. Note that the accumulator
            internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.UInt64}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable ulongs using snapshot semantics. Note that the accumulator
            internally is a ulong datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable floats using snapshot semantics. Note that the accumulator
            internally is a float datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable doubles using snapshot semantics. Note that the accumulator
            internally is a double datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable decimals using snapshot semantics. Note that the accumulator
            internally is a decimal datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.BigInteger}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable BigIntegers using snapshot semantics. Note that the accumulator
            internally is a BigInteger datatype and that nulls have no affect on the average.
            </summary>
        </member>
        <member name="M:Microsoft.StreamProcessing.Window`2.AverageSquares(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Numerics.Complex}}})">
            <summary>
            Computes a time-sensitive average-squares aggregate over nullable Complexs using snapshot semantics. Note that the accumulator
            internally is a Complex datatype and that nulls have no affect on the average.
            </summary>
        </member>
    </members>
</doc>
