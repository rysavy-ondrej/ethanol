using System.Text.Json;
using Ethanol;
using Ethanol.ContextBuilder.Observable;
using Ethanol.ContextBuilder.Polishers;
using Ethanol.ContextBuilder.Serialization;
using Microsoft.Extensions.Logging;
internal class MalwareSonarCommands : ConsoleAppBase
{
    private readonly ILogger _logger;

    public MalwareSonarCommands(ILogger<ContextProviderCommand> logger)
    {
        this._logger = logger;
    }

    [Command("test-malware", "Buildes the malware profiles from the specified malware reports.")]
    public void TestMalware(
        [Option("p", "Path to the malware profile file.")] string pathMalwareProfileFile,
        [Option("i", "Path to the input folder or input file with context data to test.")] string inputPath,
        [Option("o", "Path to the output JSON report.")] string outputFilePath,
        [Option("t", "Threshold score. Default is 1.0.")] double thresholdScore = 1.0
    )
    {
        var fullMalwareProfilePath = Path.GetFullPath(pathMalwareProfileFile);
        var fullInputPath = Path.GetFullPath(inputPath);

        Path.Exists(fullMalwareProfilePath).ElseThrow(() => new ArgumentException($"The profiles file '{fullMalwareProfilePath}' does not exist."));
        Path.Exists(fullInputPath).ElseThrow(() => new ArgumentException($"The input path '{fullInputPath}' does not exist."));

        _logger?.LogInformation($"Loading malware profiles from: '{fullMalwareProfilePath}'");
        var malwareProfile = MalwareDetectionProfile.LoadFrom(fullMalwareProfilePath);

        _logger?.LogInformation($"Loading context data from: '{fullInputPath}'");
        var inputContextFiles = Directory.Exists(fullInputPath) ? Directory.GetFiles(fullInputPath) : new string[] { fullInputPath };
        foreach(var contextFile in inputContextFiles)
        {
            _logger?.LogInformation($"  Context file '{contextFile}' loaded, matching malware indicators:");
            var contextData = ReadFromFile(contextFile);
            foreach(var data in contextData)
            {
                var matches = malwareProfile.Models.Select(model => model.Match(data));

                var scoreReports = matches.Select(m => new MalwareScoreReport(m.Malware, 
                new[]{
                    Math.Abs(m.ScoreIps.Score / (m.ScoreIps.ThresholdMean + m.ScoreIps.ThresholdDev)),
                    Math.Abs(m.ScoreIps.Score / m.ScoreIps.ThresholdMean),
                    Math.Abs(m.ScoreIps.Score / (m.ScoreIps.ThresholdMean - m.ScoreIps.ThresholdDev))},
                new[]{
                    Math.Abs(m.ScoreDomains.Score / (m.ScoreDomains.ThresholdMean + m.ScoreDomains.ThresholdDev)),
                    Math.Abs(m.ScoreDomains.Score / m.ScoreDomains.ThresholdMean),
                    Math.Abs(m.ScoreDomains.Score / (m.ScoreDomains.ThresholdMean - m.ScoreDomains.ThresholdDev))},
                new[]{
                    Math.Abs(m.ScoreUrls.Score / (m.ScoreUrls.ThresholdMean + m.ScoreUrls.ThresholdDev)),
                    Math.Abs(m.ScoreUrls.Score / m.ScoreUrls.ThresholdMean),
                    Math.Abs(m.ScoreUrls.Score / (m.ScoreUrls.ThresholdMean - m.ScoreUrls.ThresholdDev))}                    
                )).OrderByDescending(x => x.ScoreHigh).ToArray();


                var malwareDetectionReport = new MalwareDetectionReport(data.Start, data.End, data.Host, scoreReports);

                var options = new JsonSerializerOptions
                {
                    NumberHandling = System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals
                };
                var json = JsonSerializer.Serialize(malwareDetectionReport, options);
                File.AppendAllText(outputFilePath, json + Environment.NewLine);

                if (malwareDetectionReport.GetHighestScore() >= thresholdScore)
                {
                    var detected = malwareDetectionReport.Scores.FirstOrDefault();
                    var detectedMalware = malwareProfile.GetModel(detected?.Family);

                    Console.WriteLine($"  + Malware Detected in context [{malwareDetectionReport.WindowStart}-{malwareDetectionReport.WindowEnd}], host={malwareDetectionReport.Host}: family={detected?.Family}, score={detected?.ScoreHigh:F2}");
                    Console.WriteLine($"  + {detectedMalware?.Name} information: {detectedMalware?.Description} See more at '{detectedMalware?.InformationRefUrl}'");
                }
                else
                {
                    Console.WriteLine($"  - No malware detected in context [{malwareDetectionReport.WindowStart}-{malwareDetectionReport.WindowEnd}], host={malwareDetectionReport.Host}.");
                }
                Console.WriteLine($"    Scoreboard:");
                //                          loki                 |  0.41 | 0.51 | 0.68 |
                Console.WriteLine( "    |----------------------|----------------|----------------|----------------|");
                Console.WriteLine($"    | family               | ips            | domains        | urls           |");
                foreach(var m in malwareDetectionReport.Scores)
                {                                           
                    Console.WriteLine($"    | {m.Family,-20} | { String.Join(',', m.IpsScore.Select(s=>s.ToString("F2"))) } | { String.Join(',', m.DomainsScore.Select(s=>s.ToString("F2"))) } | { String.Join(',', m.UrlsScore.Select(s=>s.ToString("F2"))) } |");
                }
            }
        }  
    }

    public record MalwareScoreReport(string Family, double[] IpsScore, double[] DomainsScore, double[] UrlsScore)
    {
        public double ScoreHigh => (IpsScore[2] + DomainsScore[2] + UrlsScore[2]) / 3;
    }
    public record MalwareDetectionReport(DateTime WindowStart, DateTime WindowEnd, string Host, MalwareScoreReport[] Scores)
    {
        public double GetHighestScore() => Scores.Select(x => x.ScoreHigh).Max();
    }

    IEnumerable<ContextIndicators> ReadFromFile(string filePath)
    {
        var contexts = File.ReadAllLines(filePath).Select(line => Json.Deserialize<ObservableEvent<IpTargetHostContext>>(line));
        ContextIndicators GetContextIoas(ObservableEvent<IpTargetHostContext> context)
        {
            return new ContextIndicators(context.StartTime, context.EndTime, context.Payload.HostAddress.ToString(),
            context.Payload.WebUrls.Select(x => x.Url).ToArray(),
            context.Payload.ResolvedDomains.Select(d => d.ResponseData).ToArray(),
            context.Payload.Connections.Select(c => c.RemoteHostAddress).ToArray());
        }
        return contexts.Select(c => GetContextIoas(c));
    }


    [Command("build-malware-profiles", "Buildes the malware profiles from the specified malware reports.")]
    public void BuildMalwareProfiles(
        [Option("r", "Path to the root folder with malware reports.")] string rootReportFolder,
        [Option("o", "Path to the output folder where the malware profiles will be saved.")] string outputProfilePath
    )
    {
        var rootReportFolderPath = Path.GetFullPath(rootReportFolder);
        var outputFolderPath = Path.GetFullPath(outputProfilePath);

        Path.Exists(Path.GetDirectoryName(outputFolderPath)).ElseThrow(() => new ArgumentException($"The output folder '{outputFolderPath}' does not exist."));

        _logger?.LogInformation($"Building malware profiles from reports in folder: '{rootReportFolderPath}'");

        var families = Directory.GetDirectories(rootReportFolderPath);
        var models = new List<MalwareModel>();
        foreach (var family in families)
        {
            try
            {
                var familyName = Path.GetFileName(family);
                _logger?.LogInformation($"Reading reports for family '{familyName}'.");

                var samples = Directory.GetFiles(family);
                var reports = samples.Select(MalwareReportLoader.LoadReport).Where(x => x != null).Select(x => x!).ToList();
                var indicators = MalwareReportLoader.GetMalwareIndicators(familyName, reports);

                var firstReport = reports.FirstOrDefault();
                var signature = firstReport?.Signatures?.Where(s => s.Tags?.Any(t => t.StartsWith($"family:{familyName}")) ?? false).FirstOrDefault();
                var description = signature?.Desc ?? string.Empty;
                var malwareName = signature?.Name ?? familyName;
                var builder = new MalwareModelBuilder(familyName, malwareName) { Description = description ?? string.Empty };

                builder.AddMalwareIndicators(indicators);
                var model = builder.Build();
                if (model != null)
                {
                    models.Add(model);
                    _logger?.LogInformation($"Add model for family '{familyName}'.");
                }
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, $"Failed to build malware profile for '{family}'.");
            }
        }
        var malwareProfile = new MalwareDetectionProfile(models.ToArray());
        malwareProfile.SaveTo(outputFolderPath);
        _logger?.LogInformation($"Profile save to '{outputFolderPath}'.");
    }
}
