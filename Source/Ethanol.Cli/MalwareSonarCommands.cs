using Ethanol;
using Ethanol.ContextBuilder.Observable;
using Ethanol.ContextBuilder.Polishers;
using Ethanol.ContextBuilder.Serialization;
using Microsoft.Extensions.Logging;
internal class MalwareSonarCommands : ConsoleAppBase
{
    private readonly ILogger _logger;

    public MalwareSonarCommands(ILogger<ContextProviderCommand> logger)
    {
        this._logger = logger;
    }

    [Command("test-malware", "Buildes the malware profiles from the specified malware reports.")]
    public void TestMalware(
        [Option("p", "Path to the root folder with malware profiles.")] string rootProfilesFolder,
        [Option("i", "Path to the input folder or input file with context data to test.")] string inputPath
    )
    {
        var rootProfilesFolderPath = Path.GetFullPath(rootProfilesFolder);
        var fullInputPath = Path.GetFullPath(inputPath);

        Path.Exists(rootProfilesFolderPath).ElseThrow(() => new ArgumentException($"The profiles folder '{rootProfilesFolderPath}' does not exist."));
        Path.Exists(fullInputPath).ElseThrow(() => new ArgumentException($"The input path '{fullInputPath}' does not exist."));

        _logger?.LogInformation($"Loading malware profiles from folder: '{rootProfilesFolderPath}'");
        var profileFiles = Directory.GetFiles(rootProfilesFolderPath);
        var malwareModels = new List<MalwareModel>();

        foreach (var profile in profileFiles)
        {
            var model = MalwareModel.Deserialize(File.ReadAllText(profile));
            if (model != null)
            {
                _logger?.LogInformation($"  Profile '{model.Family}' loaded.");
                malwareModels.Add(model);
            }
        }

        _logger?.LogInformation($"Loading context data from: '{fullInputPath}'");
        var inputContextFiles = Directory.Exists(fullInputPath) ? Directory.GetFiles(fullInputPath) : new string[] { fullInputPath };
        foreach(var contextFile in inputContextFiles)
        {
            _logger?.LogInformation($"  Context file '{contextFile}' loaded, matching malware indicators:");
            var contextData = ReadFromFile(contextFile);
            foreach(var data in contextData)
            {
                var matches = malwareModels.Select(model => model.Match(data)).OrderByDescending(x => x.ScoreIps.Score);
                var match = matches.FirstOrDefault();
                if (match != null)
                {
                    if (match.ScoreIps.Score > match.ScoreIps.ThresholdMean + match.ScoreIps.ThresholdDev)
                    {
                        _logger?.LogInformation($"  + Malware Detected in context [{match.Start}-{match.End}], host={match.Host}: family={match.Malware}, score={match.ScoreIps.Score}/{match.ScoreIps.ThresholdMean - match.ScoreIps.ThresholdDev}");
                    }
                    else
                    {
                        _logger?.LogInformation($"  - No malware detected in context [{match.Start}-{match.End}], host={match.Host}.");
                    }
                    _logger?.LogInformation($"    Probabilities:");
                    foreach(var m in matches)
                    {                                           
                        _logger?.LogInformation($"             {m.Malware}: {(m.ScoreIps.Score * 100) / m.ScoreIps.ThresholdMean:F2}%");
                    }
                }
            }
        }  
    }
    IEnumerable<ContextIndicators> ReadFromFile(string filePath)
    {
        var contexts = File.ReadAllLines(filePath).Select(line => Json.Deserialize<ObservableEvent<IpTargetHostContext>>(line));
        ContextIndicators GetContextIoas(ObservableEvent<IpTargetHostContext> context)
        {
            return new ContextIndicators(context.StartTime, context.EndTime, context.Payload.HostAddress.ToString(),
            context.Payload.WebUrls.Select(x => x.Url).ToArray(),
            context.Payload.ResolvedDomains.Select(d => d.ResponseData).ToArray(),
            context.Payload.Connections.Select(c => c.RemoteHostAddress).ToArray());
        }
        return contexts.Select(c => GetContextIoas(c));
    }


    [Command("build-malware-profiles", "Buildes the malware profiles from the specified malware reports.")]
    public void BuildMalwareProfiles(
        [Option("r", "Path to the root folder with malware reports.")] string rootReportFolder,
        [Option("o", "Path to the output folder where the malware profiles will be saved.")] string outputFolder
    )
    {
        var rootReportFolderPath = Path.GetFullPath(rootReportFolder);
        var outputFolderPath = Path.GetFullPath(outputFolder);

        Path.Exists(outputFolderPath).ElseThrow(() => new ArgumentException($"The output folder '{outputFolderPath}' does not exist."));

        _logger?.LogInformation($"Building malware profiles from reports in folder: '{rootReportFolderPath}'");

        var families = Directory.GetDirectories(rootReportFolderPath);
        foreach (var family in families)
        {
            try
            {
                var familyName = Path.GetFileName(family);
                _logger?.LogInformation($"Reading reports for family '{familyName}'.");

                var samples = Directory.GetFiles(family);
                var reports = samples.Select(MalwareReportLoader.LoadReport).Where(x => x != null).Select(x => x!).ToList();
                var indicators = MalwareReportLoader.GetMalwareIndicators(familyName, reports);
                var builder = new MalwareModelBuilder(familyName);
                builder.AddMalwareIndicators(indicators);
                var model = builder.Build();
                var modelJson = model.Serialize();
                var modelFilePath = Path.Combine(outputFolderPath, $"{familyName}.json");

                _logger?.LogInformation($"Writing malware profile for family '{familyName}' to: '{modelFilePath}'");
                File.WriteAllTextAsync(modelFilePath, modelJson);
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, $"Failed to build malware profile for '{family}'.");
            }
        }
    }
}
