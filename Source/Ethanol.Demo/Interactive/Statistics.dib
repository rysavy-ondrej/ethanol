#!markdown

# Initialize environment

The following code reference the ETHANOL library and prepares the environment.

#!csharp

#r "..\bin\Debug\net5.0\Ethanol.Demo.dll"
#r "System.Reactive"
#r "C:\GitHub\ethanol\References\Microsoft.StreamProcessing\Microsoft.StreamProcessing.dll"

using System.Reactive;
using System.Reactive.Linq;
using Microsoft.StreamProcessing;
using Ethanol.Demo;
using System.Reflection;
using System.CodeDom.Compiler;

void PrintStream<V>(IStreamable<Empty,V> stream, Func<StreamEvent<V>, bool> predicate, int count = Int32.MaxValue)
{
    stream.ToStreamEventObservable().Where(predicate).Take(count).ForEachAsync(e=>Console.WriteLine($"[{e.StartTime},{e.EndTime}):{e.Payload}")).Wait();
}

var artifactServiceCollection = new ArtifactServiceCollection(Assembly.GetAssembly(typeof(ArtifactServiceCollection)));

#!markdown

# Add artifact providers

#!csharp

artifactServiceCollection.AddArtifactFromCsvFiles(@"..\Data");
var artifactServices = artifactServiceCollection.Build();

#!csharp

artifactServices.Services.Select(r => { var s = artifactServices.GetService(r); return $"{s.ArtifactType} [{s.Source}]"; }).Display()

#!markdown

# Create context

Compute context for all flows.

#!csharp

var source = artifactServices.GetService(artifactServiceCollection.GetArtifactTypeByName("flow"));                        
var inputStream = source.GetStreamable<IpfixArtifact>();

PrintStream(inputStream, e=>e.IsData, 100);
