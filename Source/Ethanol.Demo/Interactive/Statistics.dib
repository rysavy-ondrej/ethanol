#!markdown

# Initialize environment

The following code reference the ETHANOL library and prepares the environment.

#!csharp

#r "..\bin\Debug\net5.0\Ethanol.Demo.dll"
//#r "System.Reactive"
//#r "C:\GitHub\ethanol\References\Microsoft.StreamProcessing\Microsoft.StreamProcessing.dll"
#r "nuget:System.Reactive"
#r "nuget:Trill"

using System.Reactive;
using System.Reactive.Linq;
using Microsoft.StreamProcessing;
using Ethanol.Demo;
using System.Reflection;
using System.CodeDom.Compiler;

void PrintStream<V>(IStreamable<Empty,V> stream, Func<StreamEvent<V>, bool> predicate, int count = Int32.MaxValue)
{
    stream.ToStreamEventObservable().Where(predicate).Take(count).ForEachAsync(e=>Console.WriteLine($"[{e.StartTime},{e.EndTime}):{e.Payload}")).Wait();
}

IList<StreamEvent<V>> GetList<V>(IStreamable<Empty,V> stream, Func<StreamEvent<V>, bool> predicate)
{
    return stream.ToStreamEventObservable().Where(predicate).ToList().FirstAsync().Wait();    
}

var artifactServiceCollection = new ArtifactServiceCollection(Assembly.GetAssembly(typeof(ArtifactServiceCollection)));

#!markdown

# Add artifact providers

#!csharp

artifactServiceCollection.AddArtifactFromCsvFiles(@"..\Data");
var artifactServices = artifactServiceCollection.Build();

#!csharp

artifactServices.Services.Select(r => { var s = artifactServices.GetService(r); return $"{s.ArtifactType} [{s.Source}]"; }).Display()

#!markdown

# Create context

Compute context for all flows.

#!csharp

var flowStream = artifactServices.GetService(artifactServiceCollection.GetArtifactTypeByName("flow")).GetStreamable<IpfixArtifact>();                        
var dnsStream =  artifactServices.GetService(artifactServiceCollection.GetArtifactTypeByName("dns")).GetStreamable<ArtifactDns>();
var httpStream = artifactServices.GetService(artifactServiceCollection.GetArtifactTypeByName("http")).GetStreamable<ArtifactHttp>();

display( GetList(flowStream, e=>e.IsData).Count);
display( GetList(dnsStream, e=>e.IsData).Count);
display( GetList(httpStream, e=>e.IsData).Count);

#!csharp

var tcpStream = flowStream.Where(f => f.Protocol == "TCP");
var tcpList = GetList(tcpStream, e=>e.IsData);
display(tcpList.Count);

#!csharp

var reverseFlowStream = tcpStream.Multicast(m=> m.Join(m, f => new {SA = f.SrcIp, SP = f.SrcPt, DA = f.DstIp, DP = f.DstPt}, f => new { SA = f.DstIp, SP = f.DstPt, DA = f.SrcIp, DP = f.SrcPt}, (k,v) => new {KeyFlow= k, ReverseFlow = v}));
var reverseFlowList = GetList(reverseFlowStream, e=>e.IsData);
display(reverseFlowList);

#!csharp

var domainFlowStream = tcpStream.Join(dnsStream.SessionTimeoutWindow(TimeSpan.FromMinutes(5).Ticks, TimeSpan.FromMinutes(10).Ticks), f => new {SA = f.SrcIp, DA = f.DstIp }, f => new { SA = f.DstIp, DA = f.DnsResponseData }, (k,v) => new {KeyFlow= k, DomainFlow = v});
var domainFlowList = GetList(domainFlowStream, e => e.IsData);
display(domainFlowList);

#!csharp

var webFlowStream = tcpStream.Join(httpStream.SessionTimeoutWindow(TimeSpan.FromSeconds(5).Ticks, TimeSpan.FromSeconds(10).Ticks), 
    f => new { SA = f.SrcIp, DA = f.DstIp, DP_HTTP = 80, DP_HTTPS = f.DstPt }, 
    f => new { SA = f.SrcIp, DA = f.DstIp, DP_HTTP = f.DstPt, DP_HTTPS = 443 }, 
    (k,v) => new {KeyFlow= k, WebFlow = v});
var webFlowList = GetList(webFlowStream, e => e.IsData);
display(webFlowList);

#!markdown

# Making a context

#!csharp

var revGroups = reverseFlowStream.GroupApply(k => k.KeyFlow.Id, s => s.Count(), (k,v)=> new { Flow = k.Key, Count = v} );
var webGroups = webFlowStream.GroupApply(k => k.KeyFlow.Id, s => s.Count(), (k,v)=> new { Flow = k.Key, Count = v} );
var dnsGroups = domainFlowStream.GroupApply(k => k.KeyFlow.Id, s => s.Count(), (k,v)=> new { Flow = k.Key, Count = v} );
var grps = revGroups.LeftOuterJoin(
    webGroups.LeftOuterJoin(dnsGroups, 
        x=>x.Flow, 
        x=>x.Flow, 
        x => new {Flow = x.Flow, WebCount = x.Count, DnsCount = 0uL },
        (x,y) => new {Flow = x.Flow, WebCount = x.Count, DnsCount = y.Count}),
    x=>x.Flow,
    y=>y.Flow,
    x => new {FlowId = x.Flow, RevCount = x.Count, WebCount = 0uL, DnsCount = 0uL},
    (x,y) => new {FlowId = x.Flow, RevCount = x.Count, WebCount = y.WebCount, DnsCount = y.DnsCount});
var lst = GetList(grps, e => e.IsEnd);

display(lst);
