
using Ethanol.MalwareSonar.Fuzzy;

public class MalwareModel
{
    public string? Family { get; init; }
    public FuzzySet<string>? Urls { get;  init; }
    public FuzzySet<string>? Domains { get;  init; }
    public FuzzySet<string>? Ips { get;  init; }
    public double[]? UrlThresholds { get;  init; }
    public double[]? DomainThresholds { get;  init; }
    public double[]? IpsThresholds { get;  init; }

    public static MalwareModel? Deserialize(string json)
    {
        var options = new System.Text.Json.JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
        options.Converters.Add(new FuzzySetJsonSerializer<string>());
        return System.Text.Json.JsonSerializer.Deserialize<MalwareModel>(json, options);
    }
    public string Serialize()
    {
        var options = new System.Text.Json.JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
        options.Converters.Add(new FuzzySetJsonSerializer<string>());
        return System.Text.Json.JsonSerializer.Serialize(this, options);
    }

    static (double,double) MeanWithStandardDeviation(double[] numbers)
    {
        var mean = numbers.Average();
        var sumOfSquaresOfDifferences = numbers.Select(val => (val - mean) * (val - mean)).Sum();
        var standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / numbers.Count());
        return(mean, standardDeviation);
    }
    public MalwareMatch Match(ContextIndicators context)
    {
        var urlsFuzzy = FuzzySet<string>.FromEnumerable(context.Urls.Distinct()); 
        var domainsFuzzy = FuzzySet<string>.FromEnumerable(context.Domains.Where(x => x != null).Distinct());
        var ipsFuzzy = FuzzySet<string>.FromEnumerable(context.Ips.Distinct());

        return new MalwareMatch(Host: context.Host, Start: context.Start, End: context.End, Malware: Family,
                                Urls: FuzzySetOperations.AndOperation<string>(urlsFuzzy, Urls, FuzzySetOperations.NormFunctions.Hamacher),
                                Domains: FuzzySetOperations.AndOperation<string>(domainsFuzzy, Domains, FuzzySetOperations.NormFunctions.Hamacher),
                                Ips: FuzzySetOperations.AndOperation<string>(ipsFuzzy, Ips, FuzzySetOperations.NormFunctions.Hamacher),
                                MeanWithStandardDeviation(UrlThresholds),
                                MeanWithStandardDeviation(DomainThresholds),
                                MeanWithStandardDeviation(IpsThresholds)
                );
    }
}
public record MalwareMatchScore(string Host, string Malware, double Score, double ThresholdMean, double ThresholdDev);

public record MalwareMatch(string Host, DateTime Start, DateTime End, string Malware, FuzzySet<string> Urls, FuzzySet<string> Domains, FuzzySet<string> Ips, (double,double) UrlsThreshold , (double,double) DomainsThreshold, (double,double) IpsThreshold)
{
    public MalwareMatchScore ScoreIps =>
        new MalwareMatchScore(this.Host, this.Malware, this.Ips.GetMembershipValues().Sum(x=>x.Value), this.IpsThreshold.Item1, this.IpsThreshold.Item2);
    public MalwareMatchScore ScoreDomains =>
        new MalwareMatchScore(this.Host, this.Malware, this.Domains.GetMembershipValues().Sum(x=>x.Value), this.DomainsThreshold.Item1, this.DomainsThreshold.Item2);
    public MalwareMatchScore ScoreUrls =>
        new MalwareMatchScore(this.Host, this.Malware, this.Urls.GetMembershipValues().Sum(x=>x.Value),this.UrlsThreshold.Item1, this.UrlsThreshold.Item2);
}


