
using System.IO.Compression;
using Ethanol.MalwareSonar.Fuzzy;
using System.Text.Json;
public class MalwareModel
{
    public string? Family { get; init; }
    public FuzzySet<string>? Urls { get;  init; }
    public FuzzySet<string>? Domains { get;  init; }
    public FuzzySet<string>? Ips { get;  init; }
    public double[]? UrlThresholds { get;  init; }
    public double[]? DomainThresholds { get;  init; }
    public double[]? IpsThresholds { get;  init; }
    public string? Name { get; init; }
    public string? Description { get; init; }
    public string? InformationRefUrl { get; init; }

    public static MalwareModel? Deserialize(string json)
    {
        var options = new System.Text.Json.JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
        options.Converters.Add(new FuzzySetJsonSerializer<string>());
        return System.Text.Json.JsonSerializer.Deserialize<MalwareModel>(json, options);
    }
    public string Serialize()
    {
        var options = new System.Text.Json.JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
        options.Converters.Add(new FuzzySetJsonSerializer<string>());
        return System.Text.Json.JsonSerializer.Serialize(this, options);
    }

    static (double,double) MeanWithStandardDeviation(double[] numbers)
    {
        var mean = numbers.Average();
        var sumOfSquaresOfDifferences = numbers.Select(val => (val - mean) * (val - mean)).Sum();
        var standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / numbers.Count());
        return(mean, standardDeviation);
    }
    public MalwareMatch Match(ContextIndicators context)
    {
        var urlsFuzzy = FuzzySet<string>.FromEnumerable(context.Urls.Distinct()); 
        var domainsFuzzy = FuzzySet<string>.FromEnumerable(context.Domains.Where(x => x != null).Distinct());
        var ipsFuzzy = FuzzySet<string>.FromEnumerable(context.Ips.Distinct());

        return new MalwareMatch(Host: context.Host, Start: context.Start, End: context.End, Malware: Family,
                                Urls: FuzzySetOperations.AndOperation<string>(urlsFuzzy, Urls, FuzzySetOperations.NormFunctions.Hamacher),
                                Domains: FuzzySetOperations.AndOperation<string>(domainsFuzzy, Domains, FuzzySetOperations.NormFunctions.Hamacher),
                                Ips: FuzzySetOperations.AndOperation<string>(ipsFuzzy, Ips, FuzzySetOperations.NormFunctions.Hamacher),
                                MeanWithStandardDeviation(UrlThresholds),
                                MeanWithStandardDeviation(DomainThresholds),
                                MeanWithStandardDeviation(IpsThresholds)
                );
    }
}
public record MalwareMatchScore(string Host, string Malware, double Score, double ThresholdMean, double ThresholdDev);

public record MalwareMatch(string Host, DateTime Start, DateTime End, string Malware, FuzzySet<string> Urls, FuzzySet<string> Domains, FuzzySet<string> Ips, (double,double) UrlsThreshold , (double,double) DomainsThreshold, (double,double) IpsThreshold)
{
    public MalwareMatchScore ScoreIps =>
        new MalwareMatchScore(this.Host, this.Malware, this.Ips.GetMembershipValues().Sum(x=>x.Value), this.IpsThreshold.Item1, this.IpsThreshold.Item2);
    public MalwareMatchScore ScoreDomains =>
        new MalwareMatchScore(this.Host, this.Malware, this.Domains.GetMembershipValues().Sum(x=>x.Value), this.DomainsThreshold.Item1, this.DomainsThreshold.Item2);
    public MalwareMatchScore ScoreUrls =>
        new MalwareMatchScore(this.Host, this.Malware, this.Urls.GetMembershipValues().Sum(x=>x.Value),this.UrlsThreshold.Item1, this.UrlsThreshold.Item2);
}


/// <summary>
/// This class is used to store the malware profiles in a zip file. 
/// </summary>
public class MalwareDetectionProfile
{
    record Information(string Version, string[] Families, DateTime Created);

    Information Index { get; init; }
    public MalwareModel[] Models { get; init; }

    public MalwareDetectionProfile(MalwareModel[] models)
    {
        Models = models ?? throw new ArgumentNullException(nameof(models));
        Index = new Information(Version: "1.0", Families: models.Select(x => x.Family).ToArray(), Created: DateTime.UtcNow);
    }




    public void SaveTo(string path)
    {
        using var zipFile = File.Create(path);
        using (var archive = new ZipArchive(zipFile, ZipArchiveMode.Create))
        {
            var entry = archive.CreateEntry("index.json");
            using (var indexWriter = new StreamWriter(entry.Open()))
            {
                indexWriter.Write(JsonSerializer.Serialize(Index));
                indexWriter.Close();
            }
            foreach (var model in Models)
            {
                var modelEntry = archive.CreateEntry($"{model.Family}.json");
                using var modelWriter = new StreamWriter(modelEntry.Open());
                modelWriter.Write(model.Serialize());
                modelWriter.Close();
            }
        }
    }

    public static MalwareDetectionProfile LoadFrom(string path)
    {
        using var zipFile = File.OpenRead(path);
        using (var archive = new ZipArchive(zipFile))
        {
            var indexEntry = archive.GetEntry("index.json");
            using var indexReader = new StreamReader(indexEntry.Open());
            var index = JsonSerializer.Deserialize<Information>(indexReader.ReadToEnd());
            indexReader.Close();
            var models = new List<MalwareModel>();
            foreach (var family in index.Families)
            {
                var modelEntry = archive.GetEntry($"{family}.json");
                using var modelReader = new StreamReader(modelEntry.Open());
                var model = MalwareModel.Deserialize(modelReader.ReadToEnd());
                if (model != null)
                {
                    models.Add(model);
                }
            }
            return new MalwareDetectionProfile(models.ToArray());
        }
    }

    public MalwareModel? GetModel(string? family)
    {
        return Models.FirstOrDefault(x => x.Family == family);
    }
}

